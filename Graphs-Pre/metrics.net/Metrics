D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	name != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( name != null ) ; return new FunctionGauge ( valueProvider ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.MetricMetaCatalog`3.GetOrAdd(System.String name, System.Func`1<System.Tuple`2<TMetric, TValue>> metricProvider)	metrics != null	1	97	0	public TMetric GetOrAdd ( string name , Func < Tuple < TMetric , TValue > > metricProvider ) { if ( metrics != null ) ; return this . metrics . GetOrAdd ( name , n => { var result = metricProvider ( ) ; return new MetricMeta ( result . Item1 , result . Item2 ) ; } ) . Metric ; }	metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName)	childContexts != null	1	86	0	public MetricsContext Context ( string contextName ) { if ( childContexts != null ) ; return this . Context ( contextName , c => CreateChildContextInstance ( contextName ) ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonHistogram.cs	Metrics.Json.JsonHistogram.FromHistogram(Metrics.MetricData.MetricValueSource`1<Metrics.MetricData.HistogramValue> histogram)	histogram != null	1	49	0	public static JsonHistogram FromHistogram ( MetricValueSource < HistogramValue > histogram ) { if ( histogram != null ) ; return new JsonHistogram { Name = histogram . Name , Count = histogram . Value . Count , LastValue = histogram . Value . LastValue , LastUserValue = histogram . Value . LastUserValue , Max = histogram . Value . Max , MaxUserValue = histogram . Value . MaxUserValue , Mean = histogram . Value . Mean , Min = histogram . Value . Min , MinUserValue = histogram . Value . MinUserValue , StdDev = histogram . Value . StdDev , Median = histogram . Value . Median , Percentile75 = histogram . Value . Percentile75 , Percentile95 = histogram . Value . Percentile95 , Percentile98 = histogram . Value . Percentile98 , Percentile99 = histogram . Value . Percentile99 , Percentile999 = histogram . Value . Percentile999 , SampleSize = histogram . Value . SampleSize , Unit = histogram . Unit . Name , Tags = histogram . Tags } ; }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonGauge.cs	Metrics.Json.JsonGauge.FromGauge(Metrics.MetricData.MetricValueSource`1<System.Double> gauge)	gauge != null	1	49	0	public static JsonGauge FromGauge ( MetricValueSource < double > gauge ) { if ( gauge != null ) ; return new JsonGauge { Name = gauge . Name , Value = gauge . Value , Unit = gauge . Unit . Name , Tags = gauge . Tags } ; }	gauge != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.FromTimer(Metrics.MetricData.TimerValueSource timer)	timer != null	1	49	0	public static JsonTimer FromTimer ( TimerValueSource timer ) { if ( timer != null ) ; return new JsonTimer { Name = timer . Name , Count = timer . Value . Rate . Count , ActiveSessions = timer . Value . ActiveSessions , Rate = ToRate ( timer . Value . Rate ) , Histogram = ToHistogram ( timer . Value . Histogram ) , Unit = timer . Unit . Name , RateUnit = timer . RateUnit . Unit ( ) , DurationUnit = timer . DurationUnit . Unit ( ) , Tags = timer . Tags } ; }	timer != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonCounter.cs	Metrics.Json.JsonCounter.FromCounter(Metrics.MetricData.MetricValueSource`1<Metrics.MetricData.CounterValue> counter)	counter != null	1	49	0	public static JsonCounter FromCounter ( MetricValueSource < CounterValue > counter ) { if ( counter != null ) ; return new JsonCounter { Name = counter . Name , Count = counter . Value . Count , Unit = counter . Unit . Name , Items = counter . Value . Items . Select ( i => new SetItem { Item = i . Item , Count = i . Count , Percent = i . Percent } ) . ToArray ( ) , Tags = counter . Tags } ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	ActiveSessions == 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( ActiveSessions == 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	ActiveSessions == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Count >= 0	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Count >= 0 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Count >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonGauge.cs	Metrics.Json.JsonGauge.ToJsonObject()	value >= 0	1	5	0	public JsonObject ToJsonObject ( ) { if ( value >= 0 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricTags.cs	Metrics.MetricTags.ToTags(System.String commaSeparatedTags)	Metrics.MetricTags.empty.Count == 1	1	20	0	private static IEnumerable < string > ToTags ( string commaSeparatedTags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; if ( string . IsNullOrWhiteSpace ( commaSeparatedTags ) ) { return Enumerable . Empty < string > ( ) ; } return commaSeparatedTags . Split ( new [ ] { ',' } , StringSplitOptions . RemoveEmptyEntries ) . Select ( t => t . Trim ( ) . ToLowerInvariant ( ) ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	name.ToString().Equals("Test")	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return new FunctionGauge ( valueProvider ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	DurationUnit != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( DurationUnit != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	DurationUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.MetricMetaCatalog`3.GetOrAdd(System.String name, System.Func`1<System.Tuple`2<TMetric, TValue>> metricProvider)	name != null	1	97	0	public TMetric GetOrAdd ( string name , Func < Tuple < TMetric , TValue > > metricProvider ) { if ( name != null ) ; return this . metrics . GetOrAdd ( name , n => { var result = metricProvider ( ) ; return new MetricMeta ( result . Item1 , result . Item2 ) ; } ) . Metric ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonGauge.cs	Metrics.Json.JsonGauge.ToJsonProperties()	value >= 0	1	5	0	public IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( value >= 0 ) ; yield return new JsonProperty ( "Name" , this . Name ) ; yield return new JsonProperty ( "Value" , this . Value . Value ) ; yield return new JsonProperty ( "Unit" , this . Unit ) ; if ( this . Tags . Length > 0 ) { yield return new JsonProperty ( "Tags" , this . Tags ) ; } }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	unit != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( unit != null ) ; return new FunctionGauge ( valueProvider ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	FifteenMinuteRate == 0	0.147540983606557	9	52	public MeterValue Scale ( TimeUnit unit ) { if ( FifteenMinuteRate == 0 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	FifteenMinuteRate == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMeter.cs	Metrics.Json.JsonMeter.FromMeter(Metrics.MetricData.MeterValueSource meter)	meter != null	1	49	0	public static JsonMeter FromMeter ( MeterValueSource meter ) { if ( meter != null ) ; return new JsonMeter { Name = meter . Name , Count = meter . Value . Count , MeanRate = meter . Value . MeanRate , OneMinuteRate = meter . Value . OneMinuteRate , FiveMinuteRate = meter . Value . FiveMinuteRate , FifteenMinuteRate = meter . Value . FifteenMinuteRate , Unit = meter . Unit . Name , RateUnit = meter . RateUnit . Unit ( ) , Items = meter . Value . Items . Select ( i => new SetItem { Item = i . Item , Count = i . Value . Count , MeanRate = i . Value . MeanRate , OneMinuteRate = i . Value . OneMinuteRate , FiveMinuteRate = i . Value . FiveMinuteRate , FifteenMinuteRate = i . Value . FifteenMinuteRate , Percent = i . Percent } ) . ToArray ( ) , Tags = meter . Tags } ; }	meter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricTags.cs	Metrics.MetricTags.ToTags(System.String commaSeparatedTags)	Metrics.MetricTags.empty != null	0.1	2	18	private static IEnumerable < string > ToTags ( string commaSeparatedTags ) { if ( Metrics . MetricTags . empty != null ) ; if ( string . IsNullOrWhiteSpace ( commaSeparatedTags ) ) { return Enumerable . Empty < string > ( ) ; } return commaSeparatedTags . Split ( new [ ] { ',' } , StringSplitOptions . RemoveEmptyEntries ) . Select ( t => t . Trim ( ) . ToLowerInvariant ( ) ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Metrics.TimeUnit.Days != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Metrics . TimeUnit . Days != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonCounter.cs	Metrics.Json.JsonCounter.ToJsonObject()	items.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( items . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName)	isDisabled == false	1	86	0	public MetricsContext Context ( string contextName ) { if ( isDisabled == false ) ; return this . Context ( contextName , c => CreateChildContextInstance ( contextName ) ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.ReverseOrderDoubleComparer.Compare(System.Double x, System.Double y)	x >= 0	1	54	0	public int Compare ( double x , double y ) { if ( x >= 0 ) ; return y . CompareTo ( x ) ; }	x >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.ChildMetrics != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . ChildMetrics != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . ChildMetrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.MetricMetaCatalog`3.GetOrAdd(System.String name, System.Func`1<System.Tuple`2<TMetric, TValue>> metricProvider)	name.ToString().Equals("test")	0.0206185567010309	2	95	public TMetric GetOrAdd ( string name , Func < Tuple < TMetric , TValue > > metricProvider ) { if ( name . ToString ( ) . Equals ( "test" ) ) ; return this . metrics . GetOrAdd ( name , n => { var result = metricProvider ( ) ; return new MetricMeta ( result . Item1 , result . Item2 ) ; } ) . Metric ; }	name . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	FifteenMinuteRate >= 0	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( FifteenMinuteRate >= 0 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	FifteenMinuteRate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HealthCheck.cs	Metrics.Core.HealthCheck.Check()	check != null	1	49	0	protected virtual HealthCheckResult Check ( ) { if ( check != null ) ; return this . check ( ) ; }	check != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	FifteenMinuteRate <= 0	0.147540983606557	9	52	public MeterValue Scale ( TimeUnit unit ) { if ( FifteenMinuteRate <= 0 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	FifteenMinuteRate <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	unit.Name != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( unit . Name != null ) ; return new FunctionGauge ( valueProvider ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram != null	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram != null ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonCounter.cs	Metrics.Json.JsonCounter.ToJsonObject()	items.All(x => x != null)	1	5	0	public JsonObject ToJsonObject ( ) { if ( items . All ( x => x != null ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricTags.cs	Metrics.MetricTags.ToTags(System.String commaSeparatedTags)	Metrics.MetricTags.None != null	1	20	0	private static IEnumerable < string > ToTags ( string commaSeparatedTags ) { if ( Metrics . MetricTags . None != null ) ; if ( string . IsNullOrWhiteSpace ( commaSeparatedTags ) ) { return Enumerable . Empty < string > ( ) ; } return commaSeparatedTags . Split ( new [ ] { ',' } , StringSplitOptions . RemoveEmptyEntries ) . Select ( t => t . Trim ( ) . ToLowerInvariant ( ) ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HealthCheck.cs	Metrics.Core.HealthCheck.Execute()	check != null	1	49	0	public Result Execute ( ) { if ( check != null ) ; try { return new Result ( this . Name , this . Check ( ) ) ; } catch ( Exception x ) { return new Result ( this . Name , HealthCheckResult . Unhealthy ( x ) ) ; } }	check != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	unit.Name.ToString().Equals("Calls")	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return new FunctionGauge ( valueProvider ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Metrics.TimeUnit.Hours != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Metrics . TimeUnit . Hours != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricTags.cs	Metrics.MetricTags.ToTags(System.String commaSeparatedTags)	commaSeparatedTags != null	1	20	0	private static IEnumerable < string > ToTags ( string commaSeparatedTags ) { if ( commaSeparatedTags != null ) ; if ( string . IsNullOrWhiteSpace ( commaSeparatedTags ) ) { return Enumerable . Empty < string > ( ) ; } return commaSeparatedTags . Split ( new [ ] { ',' } , StringSplitOptions . RemoveEmptyEntries ) . Select ( t => t . Trim ( ) . ToLowerInvariant ( ) ) ; }	commaSeparatedTags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.IsErrorEnabled(Metrics.Logging.ILog logger)	logger != null	1	24	0	public static bool IsErrorEnabled ( this ILog logger ) { if ( logger != null ) ; GuardAgainstNullLogger ( logger ) ; return logger . Log ( LogLevel . Error , null ) ; }	logger != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMeter.cs	Metrics.Json.JsonMeter.ToJsonObject()	items.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( items . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonCounter.cs	Metrics.Json.JsonCounter.ToJsonProperties()	items.Count == 1	1	5	0	public IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( items . Count == 1 ) ; yield return new JsonProperty ( "Name" , this . Name ) ; yield return new JsonProperty ( "Count" , this . Count ) ; yield return new JsonProperty ( "Unit" , this . Unit ) ; if ( this . Items . Length > 0 ) { yield return new JsonProperty ( "Items" , this . Items . Select ( i => new JsonObject ( ToJsonProperties ( i ) ) ) ) ; } if ( this . Tags . Length > 0 ) { yield return new JsonProperty ( "Tags" , this . Tags ) ; } }	items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName)	metricsBuilder != null	1	86	0	public MetricsContext Context ( string contextName ) { if ( metricsBuilder != null ) ; return this . Context ( contextName , c => CreateChildContextInstance ( contextName ) ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Bytes != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Bytes != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	FifteenMinuteRate <= Count	0.459016393442623	28	33	public MeterValue Scale ( TimeUnit unit ) { if ( FifteenMinuteRate <= Count ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	FifteenMinuteRate <= Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.Context != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . Context != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . Context != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.ReverseOrderDoubleComparer.Compare(System.Double x, System.Double y)	x != null	0.166666666666667	9	45	public int Compare ( double x , double y ) { if ( x != null ) ; return y . CompareTo ( x ) ; }	x != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.MetricMetaCatalog`3.GetOrAdd(System.String name, System.Func`1<System.Tuple`2<TMetric, TValue>> metricProvider)	name.ToString().Equals("Test")	0.0206185567010309	2	95	public TMetric GetOrAdd ( string name , Func < Tuple < TMetric , TValue > > metricProvider ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . metrics . GetOrAdd ( name , n => { var result = metricProvider ( ) ; return new MetricMeta ( result . Item1 , result . Item2 ) ; } ) . Metric ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonCounter.cs	Metrics.Json.JsonCounter.ToJsonProperties()	items.All(x => x != null)	1	5	0	public IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( items . All ( x => x != null ) ) ; yield return new JsonProperty ( "Name" , this . Name ) ; yield return new JsonProperty ( "Count" , this . Count ) ; yield return new JsonProperty ( "Unit" , this . Unit ) ; if ( this . Items . Length > 0 ) { yield return new JsonProperty ( "Items" , this . Items . Select ( i => new JsonObject ( ToJsonProperties ( i ) ) ) ) ; } if ( this . Tags . Length > 0 ) { yield return new JsonProperty ( "Tags" , this . Tags ) ; } }	items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMeter.cs	Metrics.Json.JsonMeter.ToJsonObject()	items.All(x => x != null)	1	5	0	public JsonObject ToJsonObject ( ) { if ( items . All ( x => x != null ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Calls != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Calls != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricTags.cs	Metrics.MetricTags.ToTags(System.String commaSeparatedTags)	commaSeparatedTags.ToString().Equals("tag")	0.55	11	9	private static IEnumerable < string > ToTags ( string commaSeparatedTags ) { if ( commaSeparatedTags . ToString ( ) . Equals ( "tag" ) ) ; if ( string . IsNullOrWhiteSpace ( commaSeparatedTags ) ) { return Enumerable . Empty < string > ( ) ; } return commaSeparatedTags . Split ( new [ ] { ',' } , StringSplitOptions . RemoveEmptyEntries ) . Select ( t => t . Trim ( ) . ToLowerInvariant ( ) ) ; }	commaSeparatedTags . ToString ( ) . Equals ( "tag" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Metrics.TimeUnit.Microseconds != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Metrics . TimeUnit . Microseconds != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.MetricMetaCatalog`3.GetOrAdd(System.String name, System.Func`1<System.Tuple`2<TMetric, TValue>> metricProvider)	name.ToString().Equals("custom")	0.0103092783505155	1	96	public TMetric GetOrAdd ( string name , Func < Tuple < TMetric , TValue > > metricProvider ) { if ( name . ToString ( ) . Equals ( "custom" ) ) ; return this . metrics . GetOrAdd ( name , n => { var result = metricProvider ( ) ; return new MetricMeta ( result . Item1 , result . Item2 ) ; } ) . Metric ; }	name . ToString ( ) . Equals ( "custom" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Calls.Equals(unit)	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonCounter.cs	Metrics.Json.JsonCounter.ToJsonProperties(Metrics.Json.JsonCounter.SetItem item)	item != null	1	5	0	private static IEnumerable < JsonProperty > ToJsonProperties ( SetItem item ) { if ( item != null ) ; yield return new JsonProperty ( "Item" , item . Item ) ; yield return new JsonProperty ( "Count" , item . Count ) ; yield return new JsonProperty ( "Percent" , item . Percent ) ; }	item != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	FiveMinuteRate == 0	0.147540983606557	9	52	public MeterValue Scale ( TimeUnit unit ) { if ( FiveMinuteRate == 0 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	FiveMinuteRate == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Commands != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Commands != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	x != null	1	30	0	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( x != null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Metrics.TimeUnit.Milliseconds != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Errors != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Errors != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	x.UserValue != null	0.366666666666667	11	19	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( x . UserValue != null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . UserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.MetricMetaCatalog`3.GetOrAdd(System.String name, System.Func`1<System.Tuple`2<TMetric, TValue>> metricProvider)	metricProvider != null	1	97	0	public TMetric GetOrAdd ( string name , Func < Tuple < TMetric , TValue > > metricProvider ) { if ( metricProvider != null ) ; return this . metrics . GetOrAdd ( name , n => { var result = metricProvider ( ) ; return new MetricMeta ( result . Item1 , result . Item2 ) ; } ) . Metric ; }	metricProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricTags.cs	Metrics.MetricTags.ToTags(System.String commaSeparatedTags)	commaSeparatedTags.ToString().Equals("tag1 , tag2")	0.25	5	15	private static IEnumerable < string > ToTags ( string commaSeparatedTags ) { if ( commaSeparatedTags . ToString ( ) . Equals ( "tag1,tag2" ) ) ; if ( string . IsNullOrWhiteSpace ( commaSeparatedTags ) ) { return Enumerable . Empty < string > ( ) ; } return commaSeparatedTags . Split ( new [ ] { ',' } , StringSplitOptions . RemoveEmptyEntries ) . Select ( t => t . Trim ( ) . ToLowerInvariant ( ) ) ; }	commaSeparatedTags . ToString ( ) . Equals ( "tag1,tag2" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMeter.cs	Metrics.Json.JsonMeter.ToJsonProperties()	items.Count == 1	1	5	0	public IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( items . Count == 1 ) ; yield return new JsonProperty ( "Name" , this . Name ) ; yield return new JsonProperty ( "Count" , this . Count ) ; yield return new JsonProperty ( "MeanRate" , this . MeanRate ) ; yield return new JsonProperty ( "OneMinuteRate" , this . OneMinuteRate ) ; yield return new JsonProperty ( "FiveMinuteRate" , this . FiveMinuteRate ) ; yield return new JsonProperty ( "FifteenMinuteRate" , this . FifteenMinuteRate ) ; yield return new JsonProperty ( "Unit" , this . Unit ) ; yield return new JsonProperty ( "RateUnit" , this . RateUnit ) ; if ( this . Items . Length > 0 ) { yield return new JsonProperty ( "Items" , this . Items . Select ( i => new JsonObject ( ToJsonProperties ( i ) ) ) ) ; } if ( this . Tags . Length > 0 ) { yield return new JsonProperty ( "Tags" , this . Tags ) ; } }	items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Metrics.TimeUnit.Minutes != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Metrics . TimeUnit . Minutes != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	x.UserValue == null	0.466666666666667	14	16	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( x . UserValue == null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . UserValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Events != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Events != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Count == 1	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Count == 1 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	FiveMinuteRate >= 0	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( FiveMinuteRate >= 0 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	FiveMinuteRate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.Context.ToString().Equals("test")	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . Context . ToString ( ) . Equals ( "test" ) ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . Context . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.ReverseOrderDoubleComparer.Compare(System.Double x, System.Double y)	y >= 0	1	54	0	public int Compare ( double x , double y ) { if ( y >= 0 ) ; return y . CompareTo ( x ) ; }	y >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	x.UserValue.ToString().Equals("B")	0.533333333333333	16	14	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( x . UserValue . ToString ( ) . Equals ( "B" ) ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . UserValue . ToString ( ) . Equals ( "B" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName)	registry != null	1	86	0	public MetricsContext Context ( string contextName ) { if ( registry != null ) ; return this . Context ( contextName , c => CreateChildContextInstance ( contextName ) ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Metrics.TimeUnit.Nanoseconds != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.MetricMetaCatalog`3.GetOrAdd(System.String name, System.Func`1<System.Tuple`2<TMetric, TValue>> metricProvider)	metricProvider >= 0	0.0206185567010309	2	95	public TMetric GetOrAdd ( string name , Func < Tuple < TMetric , TValue > > metricProvider ) { if ( metricProvider >= 0 ) ; return this . metrics . GetOrAdd ( name , n => { var result = metricProvider ( ) ; return new MetricMeta ( result . Item1 , result . Item2 ) ; } ) . Metric ; }	metricProvider >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricTags.cs	Metrics.MetricTags.ToTags(System.String commaSeparatedTags)	commaSeparatedTags.ToString().Equals("tag1,tag2")	0.15	3	17	private static IEnumerable < string > ToTags ( string commaSeparatedTags ) { if ( commaSeparatedTags . ToString ( ) . Equals ( "tag1,tag2" ) ) ; if ( string . IsNullOrWhiteSpace ( commaSeparatedTags ) ) { return Enumerable . Empty < string > ( ) ; } return commaSeparatedTags . Split ( new [ ] { ',' } , StringSplitOptions . RemoveEmptyEntries ) . Select ( t => t . Trim ( ) . ToLowerInvariant ( ) ) ; }	commaSeparatedTags . ToString ( ) . Equals ( "tag1,tag2" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Items != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Items != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMeter.cs	Metrics.Json.JsonMeter.ToJsonProperties()	items.All(x => x != null)	1	5	0	public IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( items . All ( x => x != null ) ) ; yield return new JsonProperty ( "Name" , this . Name ) ; yield return new JsonProperty ( "Count" , this . Count ) ; yield return new JsonProperty ( "MeanRate" , this . MeanRate ) ; yield return new JsonProperty ( "OneMinuteRate" , this . OneMinuteRate ) ; yield return new JsonProperty ( "FiveMinuteRate" , this . FiveMinuteRate ) ; yield return new JsonProperty ( "FifteenMinuteRate" , this . FifteenMinuteRate ) ; yield return new JsonProperty ( "Unit" , this . Unit ) ; yield return new JsonProperty ( "RateUnit" , this . RateUnit ) ; if ( this . Items . Length > 0 ) { yield return new JsonProperty ( "Items" , this . Items . Select ( i => new JsonObject ( ToJsonProperties ( i ) ) ) ) ; } if ( this . Tags . Length > 0 ) { yield return new JsonProperty ( "Tags" , this . Tags ) ; } }	items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	x.Value == 1	0.366666666666667	11	19	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( x . Value == 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.Counters != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . Counters != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . Counters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.KiloBytes != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . KiloBytes != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	FiveMinuteRate <= 0	0.147540983606557	9	52	public MeterValue Scale ( TimeUnit unit ) { if ( FiveMinuteRate <= 0 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	FiveMinuteRate <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Metrics.TimeUnit.Nanoseconds.Equals(DurationUnit)	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Metrics . TimeUnit . Nanoseconds . Equals ( DurationUnit ) ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Metrics . TimeUnit . Nanoseconds . Equals ( DurationUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.LastUserValue != null	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . LastUserValue != null ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . LastUserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	x.Value >= 0	0.5	15	15	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( x . Value >= 0 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Metrics.TimeUnit.Seconds != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Metrics . TimeUnit . Seconds != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.MegaBytes != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . MegaBytes != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	x.Value >= 1	0.533333333333333	16	14	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( x . Value >= 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.ReverseOrderDoubleComparer.Compare(System.Double x, System.Double y)	y >= x	0.185185185185185	10	44	public int Compare ( double x , double y ) { if ( y >= x ) ; return y . CompareTo ( x ) ; }	y >= x
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName)	contextName != null	0.872093023255814	75	11	public MetricsContext Context ( string contextName ) { if ( contextName != null ) ; return this . Context ( contextName , c => CreateChildContextInstance ( contextName ) ) ; }	contextName != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.None != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . None != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	FiveMinuteRate <= Count	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( FiveMinuteRate <= Count ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	FiveMinuteRate <= Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMeter.cs	Metrics.Json.JsonMeter.ToJsonProperties(Metrics.Json.JsonMeter.SetItem item)	item != null	1	5	0	private static IEnumerable < JsonProperty > ToJsonProperties ( SetItem item ) { if ( item != null ) ; yield return new JsonProperty ( "Item" , item . Item ) ; yield return new JsonProperty ( "Count" , item . Count ) ; yield return new JsonProperty ( "MeanRate" , item . MeanRate ) ; yield return new JsonProperty ( "OneMinuteRate" , item . OneMinuteRate ) ; yield return new JsonProperty ( "FiveMinuteRate" , item . FiveMinuteRate ) ; yield return new JsonProperty ( "FifteenMinuteRate" , item . FifteenMinuteRate ) ; yield return new JsonProperty ( "Percent" , item . Percent ) ; }	item != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Count == 1	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Count == 1 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Percent != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Percent != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	FiveMinuteRate <= FifteenMinuteRate	0.163934426229508	10	51	public MeterValue Scale ( TimeUnit unit ) { if ( FiveMinuteRate <= FifteenMinuteRate ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	FiveMinuteRate <= FifteenMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	x.Value <= 1	0.366666666666667	11	19	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( x . Value <= 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Requests != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Requests != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	y != null	1	30	0	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( y != null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	y != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.Environment != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . Environment != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . Environment != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Results != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Results != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.LastUserValue != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . LastUserValue != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . LastUserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthChecks.cs	Metrics.HealthChecks.RegisterHealthCheck(Metrics.Core.HealthCheck healthCheck)	Metrics.HealthChecks.checks != null	1	35	0	public static void RegisterHealthCheck ( HealthCheck healthCheck ) { if ( Metrics . HealthChecks . checks != null ) ; checks . TryAdd ( healthCheck . Name , healthCheck ) ; }	Metrics . HealthChecks . checks != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	counters != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( counters != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	counters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	y.UserValue != null	0.366666666666667	11	19	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( y . UserValue != null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	y . UserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Count == 1	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Count == 1 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	Metrics.Unit.Threads != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( Metrics . Unit . Threads != null ) ; return new FunctionGauge ( valueProvider ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthChecks.cs	Metrics.HealthChecks.RegisterHealthCheck(Metrics.Core.HealthCheck healthCheck)	healthCheck != null	1	35	0	public static void RegisterHealthCheck ( HealthCheck healthCheck ) { if ( healthCheck != null ) ; checks . TryAdd ( healthCheck . Name , healthCheck ) ; }	healthCheck != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	y.UserValue == null	0.466666666666667	14	16	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( y . UserValue == null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	y . UserValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.LastValue >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . LastValue >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . LastValue >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildGauge(System.String name, Metrics.Unit unit, System.Func`1<System.Double> valueProvider)	valueProvider != null	1	14	0	public MetricValueProvider < double > BuildGauge ( string name , Unit unit , Func < double > valueProvider ) { if ( valueProvider != null ) ; return new FunctionGauge ( valueProvider ) ; }	valueProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Healthy(System.String message, System.Object[] values)	message != null	1	40	0	public static HealthCheckResult Healthy ( string message , params object [ ] values ) { if ( message != null ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( true , string . IsNullOrWhiteSpace ( status ) ? "OK" : status ) ; }	message != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	y.UserValue.ToString().Equals("A")	0.533333333333333	16	14	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( y . UserValue . ToString ( ) . Equals ( "A" ) ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	y . UserValue . ToString ( ) . Equals ( "A" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthChecks.cs	Metrics.HealthChecks.RegisterHealthCheck(Metrics.Core.HealthCheck healthCheck)	healthCheck.check != null	1	35	0	public static void RegisterHealthCheck ( HealthCheck healthCheck ) { if ( healthCheck . check != null ) ; checks . TryAdd ( healthCheck . Name , healthCheck ) ; }	healthCheck . check != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	y.Value == 1	0.366666666666667	11	19	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( y . Value == 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	y . Value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.LastUserValue.ToString().Equals("3")	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . LastUserValue . ToString ( ) . Equals ( "3" ) ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . LastUserValue . ToString ( ) . Equals ( "3" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	name != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( name != null ) ; return new CounterMetric ( ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	y.Value >= 1	0.533333333333333	16	14	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( y . Value >= 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	y . Value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Count == Count	0.19672131147541	12	49	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Count == Count ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Count == Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthChecks.cs	Metrics.HealthChecks.GetStatus()	Metrics.HealthChecks.checks != null	1	28	0	public static HealthStatus GetStatus ( ) { if ( Metrics . HealthChecks . checks != null ) ; var results = checks . Values . Select ( v => v . Execute ( ) ) . OrderBy ( r => r . Name ) ; return new HealthStatus ( results ) ; }	Metrics . HealthChecks . checks != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.ReverseOrderDoubleComparer.Compare(System.Double x, System.Double y)	y <= x	0.166666666666667	9	45	public int Compare ( double x , double y ) { if ( y <= x ) ; return y . CompareTo ( x ) ; }	y <= x
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	y.Value >= 0	0.5	15	15	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( y . Value >= 0 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	y . Value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	name.ToString().Equals("test")	0.540983606557377	33	28	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( name . ToString ( ) . Equals ( "test" ) ) ; return new CounterMetric ( ) ; }	name . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.LastValue >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . LastValue >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . LastValue >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName)	contextName.ToString().Equals("NancyFx")	0.27906976744186	24	62	public MetricsContext Context ( string contextName ) { if ( contextName . ToString ( ) . Equals ( "NancyFx" ) ) ; return this . Context ( contextName , c => CreateChildContextInstance ( contextName ) ) ; }	contextName . ToString ( ) . Equals ( "NancyFx" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	counters.metrics != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( counters . metrics != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	counters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UserValueWrapper.cs	Metrics.Sampling.UserValueWrapper.UserValueComparer.Compare(Metrics.Sampling.UserValueWrapper x, Metrics.Sampling.UserValueWrapper y)	y.Value <= 1	0.366666666666667	11	19	public int Compare ( UserValueWrapper x , UserValueWrapper y ) { if ( y . Value <= 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	y . Value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthChecks.cs	Metrics.HealthChecks.UnregisterAllHealthChecks()	Metrics.HealthChecks.checks != null	1	35	0	public static void UnregisterAllHealthChecks ( ) { if ( Metrics . HealthChecks . checks != null ) ; checks . Clear ( ) ; }	Metrics . HealthChecks . checks != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Max >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Max >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Max >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items >= Count	0.0163934426229508	1	60	public MeterValue Scale ( TimeUnit unit ) { if ( Items >= Count ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items >= Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Healthy(System.String message, System.Object[] values)	message.ToString().Equals("")	0.375	15	25	public static HealthCheckResult Healthy ( string message , params object [ ] values ) { if ( message . ToString ( ) . Equals ( "" ) ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( true , string . IsNullOrWhiteSpace ( status ) ? "OK" : status ) ; }	message . ToString ( ) . Equals ( "" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	name.ToString().Equals("counter")	0.114754098360656	7	54	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( name . ToString ( ) . Equals ( "counter" ) ) ; return new CounterMetric ( ) ; }	name . ToString ( ) . Equals ( "counter" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.Gauges != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . Gauges != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . Gauges != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	name.ToString().Equals("Test")	0.0983606557377049	6	55	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return new CounterMetric ( ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Max >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Max >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Max >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x != null	1	97	0	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x != null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonValue.cs	Metrics.Json.JsonValue.Escape(System.String value)	value != null	1	5	0	public static string Escape ( string value ) { if ( value != null ) ; if ( string . IsNullOrEmpty ( value ) ) { return string . Empty ; } return value . Replace ( @"\" , @"\\" ) . Replace ( "\"" , "\\\"" ) . Replace ( "\r" , @"\r" ) . Replace ( "\n" , @"\n" ) ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items >= FifteenMinuteRate	0.0163934426229508	1	60	public MeterValue Scale ( TimeUnit unit ) { if ( Items >= FifteenMinuteRate ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items >= FifteenMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	unit != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( unit != null ) ; return new CounterMetric ( ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	gauges != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( gauges != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	gauges != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Max >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Max >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Max >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsContext.cs	Metrics.DefaultMetricsContext.CreateChildContextInstance(System.String contextName)	contextName != null	1	40	0	protected override MetricsContext CreateChildContextInstance ( string contextName ) { if ( contextName != null ) ; return new DefaultMetricsContext ( contextName ) ; }	contextName != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	unit.Name != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( unit . Name != null ) ; return new CounterMetric ( ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items >= FiveMinuteRate	0.0163934426229508	1	60	public MeterValue Scale ( TimeUnit unit ) { if ( Items >= FiveMinuteRate ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items >= FiveMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsContext.cs	Metrics.DefaultMetricsContext.CreateChildContextInstance(System.String contextName)	contextName.ToString().Equals("test")	1	40	0	protected override MetricsContext CreateChildContextInstance ( string contextName ) { if ( contextName . ToString ( ) . Equals ( "test" ) ) ; return new DefaultMetricsContext ( contextName ) ; }	contextName . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Healthy(System.String message, System.Object[] values)	message.ToString().Equals("message")	0.125	5	35	public static HealthCheckResult Healthy ( string message , params object [ ] values ) { if ( message . ToString ( ) . Equals ( "message" ) ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( true , string . IsNullOrWhiteSpace ( status ) ? "OK" : status ) ; }	message . ToString ( ) . Equals ( "message" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.ReverseOrderDoubleComparer.Compare(System.Double x, System.Double y)	y != null	0.0185185185185185	1	53	public int Compare ( double x , double y ) { if ( y != null ) ; return y . CompareTo ( x ) ; }	y != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	unit.Name.ToString().Equals("bytes")	0.327868852459016	20	41	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( unit . Name . ToString ( ) . Equals ( "bytes" ) ) ; return new CounterMetric ( ) ; }	unit . Name . ToString ( ) . Equals ( "bytes" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Max >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Max >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Max >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.LastValue >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . LastValue >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . LastValue >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	unit.Name.ToString().Equals("Requests")	0.213114754098361	13	48	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( unit . Name . ToString ( ) . Equals ( "Requests" ) ) ; return new CounterMetric ( ) ; }	unit . Name . ToString ( ) . Equals ( "Requests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.MaxUserValue != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . MaxUserValue != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . MaxUserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	unit.Name.ToString().Equals("Calls")	0.0983606557377049	6	55	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return new CounterMetric ( ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName)	contextName.ToString().Equals("test")	0.13953488372093	12	74	public MetricsContext Context ( string contextName ) { if ( contextName . ToString ( ) . Equals ( "test" ) ) ; return this . Context ( contextName , c => CreateChildContextInstance ( contextName ) ) ; }	contextName . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	gauges.metrics != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( gauges . metrics != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	gauges . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items >= 0	0.0163934426229508	1	60	public MeterValue Scale ( TimeUnit unit ) { if ( Items >= 0 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.Histograms != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . Histograms != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . Histograms != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Healthy(System.String message, System.Object[] values)	values.Count == 1	1	40	0	public static HealthCheckResult Healthy ( string message , params object [ ] values ) { if ( values . Count == 1 ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( true , string . IsNullOrWhiteSpace ( status ) ? "OK" : status ) ; }	values . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	unit.Name.ToString().Equals("")	0.0983606557377049	6	55	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( unit . Name . ToString ( ) . Equals ( "" ) ) ; return new CounterMetric ( ) ; }	unit . Name . ToString ( ) . Equals ( "" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.IsWarnEnabled(Metrics.Logging.ILog logger)	logger != null	1	21	0	public static bool IsWarnEnabled ( this ILog logger ) { if ( logger != null ) ; GuardAgainstNullLogger ( logger ) ; return logger . Log ( LogLevel . Warn , null ) ; }	logger != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Bytes != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Bytes != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items != null	0.852459016393443	52	9	public MeterValue Scale ( TimeUnit unit ) { if ( Items != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Mean >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Mean >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Mean >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Bytes.Equals(unit)	0.327868852459016	20	41	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Bytes . Equals ( unit ) ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Bytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.LastValue <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . LastValue <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . LastValue <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Mean >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Mean >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Mean >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Calls != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Calls != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	histograms != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( histograms != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	histograms != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Mean >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Mean >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Mean >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Healthy(System.String message, System.Object[] values)	values != null	0.825	33	7	public static HealthCheckResult Healthy ( string message , params object [ ] values ) { if ( values != null ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( true , string . IsNullOrWhiteSpace ( status ) ? "OK" : status ) ; }	values != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Calls.Equals(unit)	0.0983606557377049	6	55	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.Meters != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . Meters != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . Meters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x >= 0	0.0103092783505155	1	96	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x >= 0 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.All(x => x != null)	0.80327868852459	49	12	public MeterValue Scale ( TimeUnit unit ) { if ( Items . All ( x => x != null ) ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.Update(System.Int64 value, System.String userValue)	alpha >= 0	1	78	0	public void Update ( long value , string userValue = null ) { if ( alpha >= 0 ) ; Update ( value , userValue , this . clock . Seconds ) ; }	alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName)	contextName.ToString().Equals("Owin")	0.116279069767442	10	76	public MetricsContext Context ( string contextName ) { if ( contextName . ToString ( ) . Equals ( "Owin" ) ) ; return this . Context ( contextName , c => CreateChildContextInstance ( contextName ) ) ; }	contextName . ToString ( ) . Equals ( "Owin" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Max >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Max >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Max >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Commands != null	0.983606557377049	60	1	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Commands != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Unhealthy(System.String message, System.Object[] values)	message != null	1	31	0	public static HealthCheckResult Unhealthy ( string message , params object [ ] values ) { if ( message != null ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( false , string . IsNullOrWhiteSpace ( status ) ? "FAILED" : status ) ; }	message != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Mean >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Mean >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Mean >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	histograms.metrics != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( histograms . metrics != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	histograms . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Commands >= 0	0.0163934426229508	1	60	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Commands >= 0 ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Reporters\MetricsReports.cs	Metrics.Reports.MetricsReports.StopAndClearAllReports()	healthStatus != null	1	44	0	public void StopAndClearAllReports ( ) { if ( healthStatus != null ) ; this . reports . ForEach ( r => r . Dispose ( ) ) ; this . reports . Clear ( ) ; }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Errors != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Errors != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Mean >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Mean >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Mean >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Unhealthy(System.String message, System.Object[] values)	message.ToString().Equals("FAILED")	0.548387096774194	17	14	public static HealthCheckResult Unhealthy ( string message , params object [ ] values ) { if ( message . ToString ( ) . Equals ( "FAILED" ) ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( false , string . IsNullOrWhiteSpace ( status ) ? "FAILED" : status ) ; }	message . ToString ( ) . Equals ( "FAILED" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.Timers != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . Timers != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . Timers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Item.All(x => x != null)	0.80327868852459	49	12	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Item . All ( x => x != null ) ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Item . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Events != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Events != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	meters != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( meters != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	meters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Items != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Items != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Reporters\MetricsReports.cs	Metrics.Reports.MetricsReports.StopAndClearAllReports()	metricsDataProvider != null	1	44	0	public void StopAndClearAllReports ( ) { if ( metricsDataProvider != null ) ; this . reports . ForEach ( r => r . Dispose ( ) ) ; this . reports . Clear ( ) ; }	metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.KiloBytes != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . KiloBytes != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Median >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Median >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Median >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Item.Count == 1	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Item . Count == 1 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Item . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.Update(System.Int64 value, System.String userValue)	clock != null	1	78	0	public void Update ( long value , string userValue = null ) { if ( clock != null ) ; Update ( value , userValue , this . clock . Seconds ) ; }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.MegaBytes != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . MegaBytes != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Max <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Max <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Max <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Reporters\MetricsReports.cs	Metrics.Reports.MetricsReports.StopAndClearAllReports()	reports != null	1	44	0	public void StopAndClearAllReports ( ) { if ( reports != null ) ; this . reports . ForEach ( r => r . Dispose ( ) ) ; this . reports . Clear ( ) ; }	reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Unhealthy(System.String message, System.Object[] values)	message.ToString().Equals("message")	0.225806451612903	7	24	public static HealthCheckResult Unhealthy ( string message , params object [ ] values ) { if ( message . ToString ( ) . Equals ( "message" ) ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( false , string . IsNullOrWhiteSpace ( status ) ? "FAILED" : status ) ; }	message . ToString ( ) . Equals ( "message" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName)	contextName.ToString().Equals("")	0.0465116279069767	4	82	public MetricsContext Context ( string contextName ) { if ( contextName . ToString ( ) . Equals ( "" ) ) ; return this . Context ( contextName , c => CreateChildContextInstance ( contextName ) ) ; }	contextName . ToString ( ) . Equals ( "" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.UserValue == null	0.865979381443299	84	13	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . UserValue == null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . UserValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Median >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Median >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Median >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	contextData.Timestamp != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( contextData . Timestamp != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	contextData . Timestamp != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Item.Count == Count	0.19672131147541	12	49	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Item . Count == Count ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Item . Count == Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	meters.metrics != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( meters . metrics != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	meters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Reporters\MetricsReports.cs	Metrics.Reports.MetricsReports.Dispose()	healthStatus != null	1	44	0	public void Dispose ( ) { if ( healthStatus != null ) ; StopAndClearAllReports ( ) ; }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.None != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . None != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Median >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Median >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Median >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	Metrics.MetricsConfig.GlobalyDisabledMetrics == false	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( Metrics . MetricsConfig . GlobalyDisabledMetrics == false ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	Metrics . MetricsConfig . GlobalyDisabledMetrics == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.None.Equals(unit)	0.0983606557377049	6	55	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . None . Equals ( unit ) ) ; return new CounterMetric ( ) ; }	Metrics . Unit . None . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Unhealthy(System.String message, System.Object[] values)	values.Count == 1	1	31	0	public static HealthCheckResult Unhealthy ( string message , params object [ ] values ) { if ( values . Count == 1 ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( false , string . IsNullOrWhiteSpace ( status ) ? "FAILED" : status ) ; }	values . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Reporters\MetricsReports.cs	Metrics.Reports.MetricsReports.Dispose()	metricsDataProvider != null	1	44	0	public void Dispose ( ) { if ( metricsDataProvider != null ) ; StopAndClearAllReports ( ) ; }	metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Percent != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Percent != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Reporters\MetricsReports.cs	Metrics.Reports.MetricsReports.Dispose()	reports != null	1	44	0	public void Dispose ( ) { if ( reports != null ) ; StopAndClearAllReports ( ) ; }	reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Percent.All(x => x >= 0)	0.80327868852459	49	12	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Percent . All ( x => x >= 0 ) ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Percent . All ( x => x >= 0 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Max >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Max >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Max >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	timers != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( timers != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	timers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Median >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Median >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Median >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Requests != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Requests != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.Update(System.Int64 value, System.String userValue)	count != null	1	78	0	public void Update ( long value , string userValue = null ) { if ( count != null ) ; Update ( value , userValue , this . clock . Seconds ) ; }	count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Unhealthy(System.String message, System.Object[] values)	values != null	0.32258064516129	10	21	public static HealthCheckResult Unhealthy ( string message , params object [ ] values ) { if ( values != null ) ; var status = string . Format ( message , values ) ; return new HealthCheckResult ( false , string . IsNullOrWhiteSpace ( status ) ? "FAILED" : status ) ; }	values != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	version != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( version != null ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	version != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Percent.Count == 1	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Percent . Count == 1 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Percent . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Median >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Median >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Median >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Requests.Equals(unit)	0.213114754098361	13	48	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Requests . Equals ( unit ) ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Requests . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	childContexts != null	1	86	0	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( childContexts != null ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Percent.Count == Count	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Percent . Count == Count ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Percent . Count == Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Results != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Results != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	Metrics.MetricsConfig.log != null	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( Metrics . MetricsConfig . log != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	Metrics . MetricsConfig . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	timers.metrics != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( timers . metrics != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	timers . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildCounter(System.String name, Metrics.Unit unit)	Metrics.Unit.Threads != null	1	61	0	public CounterImplementation BuildCounter ( string name , Unit unit ) { if ( Metrics . Unit . Threads != null ) ; return new CounterMetric ( ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.Unhealthy(System.Exception exception)	exception != null	1	5	0	public static HealthCheckResult Unhealthy ( Exception exception ) { if ( exception != null ) ; var status = string . Format ( "EXCEPTION:{0}-{1}" , exception . GetType ( ) . Name , exception . Message ) ; return HealthCheckResult . Unhealthy ( status + Environment . NewLine + FormatStackTrace ( exception ) ) ; }	exception != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Median >= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Median >= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Median >= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Value.All(x => x != null)	0.80327868852459	49	12	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Value . All ( x => x != null ) ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Value . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	name != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( name != null ) ; return new MeterMetric ( ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.Update(System.Int64 value, System.String userValue)	count.value == 0	0.307692307692308	24	54	public void Update ( long value , string userValue = null ) { if ( count . value == 0 ) ; Update ( value , userValue , this . clock . Seconds ) ; }	count . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.UserValue != null	0.0103092783505155	1	96	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . UserValue != null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . UserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	context != null	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( context != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	context != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.Debug(Metrics.Logging.ILog logger, System.Func`1<System.String> messageFunc)	logger != null	0.983333333333333	59	1	public static void Debug ( this ILog logger , Func < string > messageFunc ) { if ( logger != null ) ; GuardAgainstNullLogger ( logger ) ; logger . Log ( LogLevel . Debug , messageFunc ) ; }	logger != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	isDisabled == false	1	86	0	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( isDisabled == false ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Value.Count == 1	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Value . Count == 1 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Value . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Min >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Min >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Min >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.FormatStackTrace(System.Exception exception, System.Int32 indent)	exception != null	1	5	0	private static string FormatStackTrace ( Exception exception , int indent = 2 ) { if ( exception != null ) ; StringBuilder builder = new StringBuilder ( ) ; var aggregate = exception as AggregateException ; var pad = new string ( '' , indent * 2 ) ; if ( aggregate != null ) { builder . AppendFormat ( "{0}{1}:{2}" + Environment . NewLine , pad , exception . GetType ( ) . Name , exception . Message ) ; foreach ( var inner in aggregate . InnerExceptions ) { builder . AppendLine ( FormatStackTrace ( inner , indent + 2 ) ) ; } } else { builder . AppendFormat ( "{0}{1}:{2}" + Environment . NewLine , pad , exception . GetType ( ) . Name , exception . Message ) ; if ( exception . StackTrace != null ) { var stackLines = exception . StackTrace . Split ( '\n' ) . Where ( l => ! string . IsNullOrWhiteSpace ( l ) ) . Select ( l => string . Concat ( pad , l . Trim ( ) ) ) ; builder . AppendLine ( string . Join ( Environment . NewLine , stackLines ) ) ; } else { builder . AppendLine ( string . Concat ( pad , "[NoStacktrace]" ) ) ; } if ( exception . InnerException != null ) { builder . AppendLine ( FormatStackTrace ( exception . InnerException , indent + 2 ) ) ; } } return builder . ToString ( ) ; }	exception != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	name != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( name != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.String version)	version.ToString().Equals("1")	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , string version ) { if ( version . ToString ( ) . Equals ( "1" ) ) ; return FromContext ( contextData , Enumerable . Empty < EnvironmentEntry > ( ) , version ) ; }	version . ToString ( ) . Equals ( "1" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.MaxUserValue != null	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . MaxUserValue != null ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . MaxUserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Items.Value.Count == Count	0.19672131147541	12	49	public MeterValue Scale ( TimeUnit unit ) { if ( Items . Value . Count == Count ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Items . Value . Count == Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	name.ToString().Equals("HTTP Request Errors")	0.25	17	51	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( name . ToString ( ) . Equals ( "HTTPRequestErrors" ) ) ; return new MeterMetric ( ) ; }	name . ToString ( ) . Equals ( "HTTPRequestErrors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	name.ToString().Equals("Test")	0.117647058823529	8	60	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return new MeterMetric ( ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Min >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Min >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Min >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	name.ToString().Equals("Metrics Errors")	0.147058823529412	10	58	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( name . ToString ( ) . Equals ( "MetricsErrors" ) ) ; return new MeterMetric ( ) ; }	name . ToString ( ) . Equals ( "MetricsErrors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	valueProvider != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( valueProvider != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	valueProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	metricsBuilder != null	1	86	0	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( metricsBuilder != null ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\HealthCheckResult.cs	Metrics.HealthCheckResult.FormatStackTrace(System.Exception exception, System.Int32 indent)	indent >= 0	1	5	0	private static string FormatStackTrace ( Exception exception , int indent = 2 ) { if ( indent >= 0 ) ; StringBuilder builder = new StringBuilder ( ) ; var aggregate = exception as AggregateException ; var pad = new string ( '' , indent * 2 ) ; if ( aggregate != null ) { builder . AppendFormat ( "{0}{1}:{2}" + Environment . NewLine , pad , exception . GetType ( ) . Name , exception . Message ) ; foreach ( var inner in aggregate . InnerExceptions ) { builder . AppendLine ( FormatStackTrace ( inner , indent + 2 ) ) ; } } else { builder . AppendFormat ( "{0}{1}:{2}" + Environment . NewLine , pad , exception . GetType ( ) . Name , exception . Message ) ; if ( exception . StackTrace != null ) { var stackLines = exception . StackTrace . Split ( '\n' ) . Where ( l => ! string . IsNullOrWhiteSpace ( l ) ) . Select ( l => string . Concat ( pad , l . Trim ( ) ) ) ; builder . AppendLine ( string . Join ( Environment . NewLine , stackLines ) ) ; } else { builder . AppendLine ( string . Concat ( pad , "[NoStacktrace]" ) ) ; } if ( exception . InnerException != null ) { builder . AppendLine ( FormatStackTrace ( exception . InnerException , indent + 2 ) ) ; } } return builder . ToString ( ) ; }	indent >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Value == 0	0.0206185567010309	2	95	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Value == 0 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	healthStatus != null	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( healthStatus != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Min >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Min >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Min >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	MeanRate == 1	0.737704918032787	45	16	public MeterValue Scale ( TimeUnit unit ) { if ( MeanRate == 1 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	MeanRate == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	isDisabled == false	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( isDisabled == false ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	unit != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( unit != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.MaxUserValue.ToString().Equals("5")	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . MaxUserValue . ToString ( ) . Equals ( "5" ) ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . MaxUserValue . ToString ( ) . Equals ( "5" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	registry != null	1	86	0	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( registry != null ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.Update(System.Int64 value, System.String userValue)	count.value >= 0	1	78	0	public void Update ( long value , string userValue = null ) { if ( count . value >= 0 ) ; Update ( value , userValue , this . clock . Seconds ) ; }	count . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	unit != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( unit != null ) ; return new MeterMetric ( ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Value == 10000000	0.0103092783505155	1	96	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Value == 10000000 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value == 10000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.Debug(Metrics.Logging.ILog logger, System.Func`1<System.String> messageFunc)	logger >= 0	0.0166666666666667	1	59	public static void Debug ( this ILog logger , Func < string > messageFunc ) { if ( logger >= 0 ) ; GuardAgainstNullLogger ( logger ) ; logger . Log ( LogLevel . Debug , messageFunc ) ; }	logger >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.ChildMetrics != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . ChildMetrics != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . ChildMetrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Mean >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Mean >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Mean >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Min >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Min >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Min >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	OneMinuteRate >= 0	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( OneMinuteRate >= 0 ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	OneMinuteRate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	unit.Name != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( unit . Name != null ) ; return new MeterMetric ( ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Min >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Min >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Min >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Min <= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Min <= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Min <= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( unit . Name != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	contextName != null	0.872093023255814	75	11	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( contextName != null ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	contextName != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener == null	0.8	40	10	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener == null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	unit.Name.ToString().Equals("Errors")	0.794117647058823	54	14	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( unit . Name . ToString ( ) . Equals ( "Errors" ) ) ; return new MeterMetric ( ) ; }	unit . Name . ToString ( ) . Equals ( "Errors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.Update(System.Int64 value, System.String userValue)	count.value <= 0	0.307692307692308	24	54	public void Update ( long value , string userValue = null ) { if ( count . value <= 0 ) ; Update ( value , userValue , this . clock . Seconds ) ; }	count . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.Context != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . Context != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . Context != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	contextName.ToString().Equals("NancyFx")	0.27906976744186	24	62	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( contextName . ToString ( ) . Equals ( "NancyFx" ) ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	contextName . ToString ( ) . Equals ( "NancyFx" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Value >= 1	0.804123711340206	78	19	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Value >= 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	reports != null	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( reports != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Mean <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Mean <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Mean <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	OneMinuteRate <= Count	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( OneMinuteRate <= Count ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	OneMinuteRate <= Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	unit.Name.ToString().Equals("Calls")	0.117647058823529	8	60	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return new MeterMetric ( ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.MinUserValue != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . MinUserValue != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . MinUserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Bytes != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Bytes != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile75 >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile75 >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile75 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Mean >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Mean >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Mean >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.Debug(Metrics.Logging.ILog logger, System.Func`1<System.String> messageFunc)	messageFunc != null	1	60	0	public static void Debug ( this ILog logger , Func < string > messageFunc ) { if ( messageFunc != null ) ; GuardAgainstNullLogger ( logger ) ; logger . Log ( LogLevel . Debug , messageFunc ) ; }	messageFunc != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Calls != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Calls != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Calls.Equals(unit)	0.117647058823529	8	60	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.Update(System.Int64 value, System.String userValue)	count.value <= 1	0.294871794871795	23	55	public void Update ( long value , string userValue = null ) { if ( count . value <= 1 ) ; Update ( value , userValue , this . clock . Seconds ) ; }	count . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Bytes != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.Context.ToString().Equals("test")	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . Context . ToString ( ) . Equals ( "test" ) ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . Context . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	contextName.ToString().Equals("test")	0.13953488372093	12	74	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( contextName . ToString ( ) . Equals ( "test" ) ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	contextName . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Commands != null	0.985294117647059	67	1	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Commands != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile75 >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile75 >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile75 >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	reports.healthStatus != null	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( reports . healthStatus != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	reports . healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Commands >= 0	0.0147058823529412	1	67	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Commands >= 0 ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	RateUnit != null	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( RateUnit != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	RateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Value >= 0	0.216494845360825	21	76	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Value >= 0 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Errors != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Errors != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile75 >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile75 >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile75 >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Mean >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Mean >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Mean >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Metrics.TimeUnit.Days != null	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Metrics . TimeUnit . Days != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Errors.Equals(unit)	0.794117647058823	54	14	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Errors . Equals ( unit ) ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Errors . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile75 >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile75 >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile75 >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Calls != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	contextName.ToString().Equals("Owin")	0.116279069767442	10	76	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( contextName . ToString ( ) . Equals ( "Owin" ) ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	contextName . ToString ( ) . Equals ( "Owin" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Events != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Events != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	count != null	1	23	0	public void Update ( long value , string userValue = null ) { if ( count != null ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Metrics.TimeUnit.Hours != null	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Metrics . TimeUnit . Hours != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Items != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Items != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.Update(System.Int64 value, System.String userValue)	count.value <= 1000	0.307692307692308	24	54	public void Update ( long value , string userValue = null ) { if ( count . value <= 1000 ) ; Update ( value , userValue , this . clock . Seconds ) ; }	count . value <= 1000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.KiloBytes != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . KiloBytes != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	reports.healthStatus.Equals(healthStatus)	0.833333333333333	50	10	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( reports . healthStatus . Equals ( healthStatus ) ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	reports . healthStatus . Equals ( healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile75 >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile75 >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile75 >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.MegaBytes != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . MegaBytes != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Median >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Median >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Median >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile75 >= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile75 >= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile75 >= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.Counters != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . Counters != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . Counters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.None != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . None != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	count.value >= 0	1	23	0	public void Update ( long value , string userValue = null ) { if ( count . value >= 0 ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	count . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Percent != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Percent != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	contextName.ToString().Equals("")	0.0465116279069767	4	82	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( contextName . ToString ( ) . Equals ( "" ) ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	contextName . ToString ( ) . Equals ( "" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Metrics.TimeUnit.Microseconds != null	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Metrics . TimeUnit . Microseconds != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Commands != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	reports.healthStatus.Equals(listener.healthStatus)	0.166666666666667	10	50	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( reports . healthStatus . Equals ( listener . healthStatus ) ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	reports . healthStatus . Equals ( listener . healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Value >= 10000000	0.0103092783505155	1	96	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Value >= 10000000 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value >= 10000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile75 >= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile75 >= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile75 >= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Median <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Median <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Median <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\ExponentiallyDecayingReservoir.cs	Metrics.Sampling.ExponentiallyDecayingReservoir.Update(System.Int64 value, System.String userValue)	count.value <= alpha	0.307692307692308	24	54	public void Update ( long value , string userValue = null ) { if ( count . value <= alpha ) ; Update ( value , userValue , this . clock . Seconds ) ; }	count . value <= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Requests != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Requests != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.Environment != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . Environment != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . Environment != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Metrics.TimeUnit.Milliseconds != null	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	count.value <= 1	0.826086956521739	19	4	public void Update ( long value , string userValue = null ) { if ( count . value <= 1 ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	count . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Results != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Results != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile95 >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile95 >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile95 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Errors != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	contextCreator != null	1	86	0	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( contextCreator != null ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	contextCreator != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	reports.metricsDataProvider != null	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( reports . metricsDataProvider != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	reports . metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Median >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Median >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Median >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Metrics.TimeUnit.Minutes != null	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Metrics . TimeUnit . Minutes != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.Unit.Threads != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . Unit . Threads != null ) ; return new MeterMetric ( ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.Gauges != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . Gauges != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . Gauges != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile95 >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile95 >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile95 >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	rateUnit != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( rateUnit != null ) ; return new MeterMetric ( ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Events != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Metrics.TimeUnit.Nanoseconds != null	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.Count == 3	1	23	0	public void Update ( long value , string userValue = null ) { if ( values . Count == 3 ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . Count == 3
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile95 >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile95 >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile95 >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Days != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Days != null ) ; return new MeterMetric ( ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Hours != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Hours != null ) ; return new MeterMetric ( ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile95 >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile95 >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile95 >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Median >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Median >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Median >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Metrics.TimeUnit.Seconds != null	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Metrics . TimeUnit . Seconds != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Value <= 10000000	0.0721649484536082	7	90	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Value <= 10000000 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value <= 10000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Items != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	reports.metricsDataProvider.Equals(listener.metricsDataProvider)	0.2	10	40	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( reports . metricsDataProvider . Equals ( listener . metricsDataProvider ) ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	reports . metricsDataProvider . Equals ( listener . metricsDataProvider )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLongHolder.cs	Metrics.Utils.AtomicLongHolder.SetValue(System.Int64 value)	value != null	1	7	0	public void SetValue ( long value ) { if ( value != null ) ; this . value . SetValue ( value ) ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Microseconds != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return new MeterMetric ( ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Context(System.String contextName, System.Func`2<System.String, Metrics.MetricsContext> contextCreator)	contextCreator >= 0	0.0116279069767442	1	85	public MetricsContext Context ( string contextName , Func < string , MetricsContext > contextCreator ) { if ( contextCreator >= 0 ) ; if ( this . isDisabled ) { return this ; } if ( string . IsNullOrEmpty ( contextName ) ) { return this ; } return this . childContexts . GetOrAdd ( contextName , contextCreator ) ; }	contextCreator >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Milliseconds != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return new MeterMetric ( ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.Histograms != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . Histograms != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . Histograms != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLongHolder.cs	Metrics.Utils.AtomicLongHolder.SetValue(System.Int64 value)	value.value == 1	1	7	0	public void SetValue ( long value ) { if ( value . value == 1 ) ; this . value . SetValue ( value ) ; }	value . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\Clock.cs	Metrics.Utils.Clock.FormatTimestamp(System.DateTime timestamp)	timestamp != null	1	5	0	public static string FormatTimestamp ( DateTime timestamp ) { if ( timestamp != null ) ; return timestamp . ToString ( "yyyy-MM-ddTHH:mm:ss.ffffK" , CultureInfo . InvariantCulture ) ; }	timestamp != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile95 >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile95 >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile95 >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.Contains(userValue)	0.565217391304348	13	10	public void Update ( long value , string userValue = null ) { if ( values . Contains ( userValue ) ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . Contains ( userValue )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . KiloBytes != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Minutes != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Minutes != null ) ; return new MeterMetric ( ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter != null	1	75	0	public void Increment ( ) { if ( counter != null ) ; this . counter . Increment ( ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLongHolder.cs	Metrics.Utils.AtomicLongHolder.SetValue(System.Int64 value)	value == 0	1	7	0	public void SetValue ( long value ) { if ( value == 0 ) ; this . value . SetValue ( value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	Metrics.TimeUnit.Seconds.Equals(RateUnit)	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( Metrics . TimeUnit . Seconds . Equals ( RateUnit ) ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	Metrics . TimeUnit . Seconds . Equals ( RateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	reports.reports != null	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( reports . reports != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	reports . reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Nanoseconds != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return new MeterMetric ( ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile95 >= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile95 >= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile95 >= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . MegaBytes != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values != null	1	23	0	public void Update ( long value , string userValue = null ) { if ( values != null ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\MeterValue.cs	Metrics.MetricData.MeterValue.Scale(Metrics.TimeUnit unit)	unit != null	1	61	0	public MeterValue Scale ( TimeUnit unit ) { if ( unit != null ) ; if ( unit == this . RateUnit ) { return this ; } var factor = unit . ScalingFactorFor ( TimeUnit . Seconds ) ; return new MeterValue ( this . Count , this . MeanRate * factor , this . OneMinuteRate * factor , this . FiveMinuteRate * factor , this . FifteenMinuteRate * factor , unit , this . Items . Select ( i => new SetItem ( i . Item , i . Percent , i . Value . Scale ( unit ) ) ) . ToArray ( ) ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter >= 0	0.04	3	72	public void Increment ( ) { if ( counter >= 0 ) ; this . counter . Increment ( ) ; }	counter >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Seconds != null	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Seconds != null ) ; return new MeterMetric ( ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Median >= histogram.Mean	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Median >= histogram . Mean ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Median >= histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.ShutdownContext(System.String contextName)	childContexts != null	1	10	0	public void ShutdownContext ( string contextName ) { if ( childContexts != null ) ; if ( string . IsNullOrEmpty ( contextName ) ) { throw new ArgumentException ( "contextNamemustnotbenullorempty" , contextName ) ; } MetricsContext context ; if ( this . childContexts . TryRemove ( contextName , out context ) ) { using ( context ) { } } }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildMeter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	68	0	public MeterImplementation BuildMeter ( string name , Unit unit , TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return new MeterMetric ( ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile95 >= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile95 >= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile95 >= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	httpUriPrefix != null	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( httpUriPrefix != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	httpUriPrefix != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile95 >= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile95 >= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile95 >= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	name != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( name != null ) ; return new HistogramMetric ( samplingType ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Value <= 1000000	0.0618556701030928	6	91	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Value <= 1000000 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value <= 1000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.Meters != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . Meters != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . Meters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter <= 0	0.0133333333333333	1	74	public void Increment ( ) { if ( counter <= 0 ) ; this . counter . Increment ( ) ; }	counter <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	name.ToString().Equals("HTTP JSON Size")	0.758620689655172	44	14	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( name . ToString ( ) . Equals ( "HTTPJSONSize" ) ) ; return new HistogramMetric ( samplingType ) ; }	name . ToString ( ) . Equals ( "HTTPJSONSize" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.All(x => x == null)	0.826086956521739	19	4	public void Update ( long value , string userValue = null ) { if ( values . All ( x => x == null ) ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . All ( x => x == null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	name.ToString().Equals("Test")	0.137931034482759	8	50	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return new HistogramMetric ( samplingType ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.ErrorException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	logger != null	1	24	0	public static void ErrorException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( logger != null ) ; if ( logger . IsErrorEnabled ( ) ) { logger . Log ( LogLevel . Error , message . AsFunc ( ) , exception , formatParams ) ; } }	logger != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile98 >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile98 >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile98 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	unit != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( unit != null ) ; return new HistogramMetric ( samplingType ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	httpUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/HttpEndpointCanBeDisposed/")	0.16	8	42	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/HttpEndpointCanBeDisposed/" ) ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/HttpEndpointCanBeDisposed/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.UserValue.All(x => x != null)	0.173913043478261	4	19	public void Update ( long value , string userValue = null ) { if ( values . UserValue . All ( x => x != null ) ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . UserValue . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter.value == 0	0.706666666666667	53	22	public void Increment ( ) { if ( counter . value == 0 ) ; this . counter . Increment ( ) ; }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.Timers != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . Timers != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . Timers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	count != null	1	38	0	public void Tick ( ) { if ( count != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLongHolder.cs	Metrics.Utils.AtomicLongHolder.Increment()	value != null	1	36	0	public long Increment ( ) { if ( value != null ) ; return this . value . Increment ( ) ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile98 >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile98 >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile98 >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . None != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Value <= 0	0.0206185567010309	2	95	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Value <= 0 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Min >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Min >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Min >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.ShutdownContext(System.String contextName)	isDisabled == false	1	10	0	public void ShutdownContext ( string contextName ) { if ( isDisabled == false ) ; if ( string . IsNullOrEmpty ( contextName ) ) { throw new ArgumentException ( "contextNamemustnotbenullorempty" , contextName ) ; } MetricsContext context ; if ( this . childContexts . TryRemove ( contextName , out context ) ) { using ( context ) { } } }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	count.value == 0	0.0526315789473684	2	36	public void Tick ( ) { if ( count . value == 0 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	count . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	unit.Name != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( unit . Name != null ) ; return new HistogramMetric ( samplingType ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter.value >= 0	1	75	0	public void Increment ( ) { if ( counter . value >= 0 ) ; this . counter . Increment ( ) ; }	counter . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.UserValue.All(x => x == null)	0.739130434782609	17	6	public void Update ( long value , string userValue = null ) { if ( values . UserValue . All ( x => x == null ) ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . UserValue . All ( x => x == null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Percent != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLongHolder.cs	Metrics.Utils.AtomicLongHolder.Increment()	value.value == 0	1	36	0	public long Increment ( ) { if ( value . value == 0 ) ; return this . value . Increment ( ) ; }	value . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter.value <= 1	0.16	12	63	public void Increment ( ) { if ( counter . value <= 1 ) ; this . counter . Increment ( ) ; }	counter . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	unit.Name.ToString().Equals("Kb")	0.758620689655172	44	14	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( unit . Name . ToString ( ) . Equals ( "Kb" ) ) ; return new HistogramMetric ( samplingType ) ; }	unit . Name . ToString ( ) . Equals ( "Kb" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	count.value == 1	0.105263157894737	4	34	public void Tick ( ) { if ( count . value == 1 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	count . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	unit.Name.ToString().Equals("Calls")	0.137931034482759	8	50	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return new HistogramMetric ( samplingType ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	contextData.Timestamp != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( contextData . Timestamp != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	contextData . Timestamp != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter.value <= 0	0.706666666666667	53	22	public void Increment ( ) { if ( counter . value <= 0 ) ; this . counter . Increment ( ) ; }	counter . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	httpUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/OccupiedPort/")	0.26	13	37	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/OccupiedPort/" ) ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/OccupiedPort/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.ShutdownContext(System.String contextName)	metricsBuilder != null	1	10	0	public void ShutdownContext ( string contextName ) { if ( metricsBuilder != null ) ; if ( string . IsNullOrEmpty ( contextName ) ) { throw new ArgumentException ( "contextNamemustnotbenullorempty" , contextName ) ; } MetricsContext context ; if ( this . childContexts . TryRemove ( contextName , out context ) ) { using ( context ) { } } }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Bytes != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Bytes != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.UserValue.Count == 3	1	23	0	public void Update ( long value , string userValue = null ) { if ( values . UserValue . Count == 3 ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . UserValue . Count == 3
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	count.value >= 1	0.289473684210526	11	27	public void Tick ( ) { if ( count . value >= 1 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	count . value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile98 >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile98 >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile98 >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Requests != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter.value != null	0.0933333333333333	7	68	public void Increment ( ) { if ( counter . value != null ) ; this . counter . Increment ( ) ; }	counter . value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Calls != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Calls != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLongHolder.cs	Metrics.Utils.AtomicLongHolder.Decrement()	value != null	1	9	0	public long Decrement ( ) { if ( value != null ) ; return this . value . Decrement ( ) ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Min <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Min <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Min <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile98 >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile98 >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile98 >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter.value >= counter	0.0133333333333333	1	74	public void Increment ( ) { if ( counter . value >= counter ) ; this . counter . Increment ( ) ; }	counter . value >= counter
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.ShutdownContext(System.String contextName)	registry != null	1	10	0	public void ShutdownContext ( string contextName ) { if ( registry != null ) ; if ( string . IsNullOrEmpty ( contextName ) ) { throw new ArgumentException ( "contextNamemustnotbenullorempty" , contextName ) ; } MetricsContext context ; if ( this . childContexts . TryRemove ( contextName , out context ) ) { using ( context ) { } } }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Calls.Equals(unit)	0.137931034482759	8	50	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile98 >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile98 >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile98 >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Value <= x	0.0103092783505155	1	96	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Value <= x ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Value <= x
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	counter.value <= counter	0.0133333333333333	1	74	public void Increment ( ) { if ( counter . value <= counter ) ; this . counter . Increment ( ) ; }	counter . value <= counter
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	environment != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( environment != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	environment != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Commands != null	0.982758620689655	57	1	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Commands != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	count.value >= 0	0.736842105263158	28	10	public void Tick ( ) { if ( count . value >= 0 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	count . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Commands >= 0	0.0172413793103448	1	57	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Commands >= 0 ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment()	setCounters != null	1	75	0	public void Increment ( ) { if ( setCounters != null ) ; this . counter . Increment ( ) ; }	setCounters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.Value.All(x => x == 1)	0.826086956521739	19	4	public void Update ( long value , string userValue = null ) { if ( values . Value . All ( x => x == 1 ) ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . Value . All ( x => x == 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Results != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	httpUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/sameendpoint/")	0.06	3	47	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/sameendpoint/" ) ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/sameendpoint/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Min >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Min >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Min >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Errors != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Errors != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile98 >= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile98 >= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile98 >= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLongHolder.cs	Metrics.Utils.AtomicLongHolder.Decrement()	value.value == 1	1	9	0	public long Decrement ( ) { if ( value . value == 1 ) ; return this . value . Decrement ( ) ; }	value . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.ShutdownContext(System.String contextName)	contextName != null	1	10	0	public void ShutdownContext ( string contextName ) { if ( contextName != null ) ; if ( string . IsNullOrEmpty ( contextName ) ) { throw new ArgumentException ( "contextNamemustnotbenullorempty" , contextName ) ; } MetricsContext context ; if ( this . childContexts . TryRemove ( contextName , out context ) ) { using ( context ) { } } }	contextName != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.Int64 value)	counter != null	1	9	0	public void Increment ( long value ) { if ( counter != null ) ; this . counter . Add ( value ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Weight == 1	0.0206185567010309	2	95	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Weight == 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Weight == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile98 >= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile98 >= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile98 >= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	count.value <= 0	0.0526315789473684	2	36	public void Tick ( ) { if ( count . value <= 0 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	count . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Events != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Events != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Threads != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	httpUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/DisposeMeTwice/")	0.1	5	45	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/DisposeMeTwice/" ) ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/DisposeMeTwice/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.Int64 value)	counter.value == 0	1	9	0	public void Increment ( long value ) { if ( counter . value == 0 ) ; this . counter . Add ( value ) ; }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	version != null	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( version != null ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	version != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Items != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Items != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	tags != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( tags != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile98 >= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile98 >= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile98 >= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.KiloBytes != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . KiloBytes != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.Int64 value)	setCounters != null	1	9	0	public void Increment ( long value ) { if ( setCounters != null ) ; this . counter . Add ( value ) ; }	setCounters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.ShutdownContext(System.String contextName)	contextName.ToString().Equals("test")	1	10	0	public void ShutdownContext ( string contextName ) { if ( contextName . ToString ( ) . Equals ( "test" ) ) ; if ( string . IsNullOrEmpty ( contextName ) ) { throw new ArgumentException ( "contextNamemustnotbenullorempty" , contextName ) ; } MetricsContext context ; if ( this . childContexts . TryRemove ( contextName , out context ) ) { using ( context ) { } } }	contextName . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.Value.All(x => x >= 0)	0.478260869565217	11	12	public void Update ( long value , string userValue = null ) { if ( values . Value . All ( x => x >= 0 ) ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . Value . All ( x => x >= 0 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.KiloBytes.Equals(unit)	0.758620689655172	44	14	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . KiloBytes . Equals ( unit ) ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . KiloBytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Min >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Min >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Min >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.ErrorException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	message != null	1	24	0	public static void ErrorException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( message != null ) ; if ( logger . IsErrorEnabled ( ) ) { logger . Log ( LogLevel . Error , message . AsFunc ( ) , exception , formatParams ) ; } }	message != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Weight >= 0	0.783505154639175	76	21	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Weight >= 0 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Weight >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.Int64 value)	value == 32	1	9	0	public void Increment ( long value ) { if ( value == 32 ) ; this . counter . Add ( value ) ; }	value == 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	tags.tags == null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( tags . tags == null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.FromContext(Metrics.MetricData.MetricsData contextData, System.Collections.Generic.IEnumerable`1<Metrics.MetricData.EnvironmentEntry> environment, System.String version)	version.ToString().Equals("1")	1	49	0	public static JsonMetricsContext FromContext ( MetricsData contextData , IEnumerable < EnvironmentEntry > environment , string version ) { if ( version . ToString ( ) . Equals ( "1" ) ) ; return new JsonMetricsContext { Version = version , Timestamp = contextData . Timestamp , Environment = contextData . Environment . Union ( environment ) . ToDictionary ( e => e . Name , e => e . Value ) , Context = contextData . Context , Gauges = contextData . Gauges . Select ( JsonGauge . FromGauge ) . ToArray ( ) , Counters = contextData . Counters . Select ( JsonCounter . FromCounter ) . ToArray ( ) , Meters = contextData . Meters . Select ( JsonMeter . FromMeter ) . ToArray ( ) , Histograms = contextData . Histograms . Select ( JsonHistogram . FromHistogram ) . ToArray ( ) , Timers = contextData . Timers . Select ( JsonTimer . FromTimer ) . ToArray ( ) , ChildContexts = contextData . ChildMetrics . Select ( FromContext ) . ToArray ( ) } ; }	version . ToString ( ) . Equals ( "1" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	count.value <= 1	0.315789473684211	12	26	public void Tick ( ) { if ( count . value <= 1 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	count . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.Value.All(x => x >= 1)	0.565217391304348	13	10	public void Update ( long value , string userValue = null ) { if ( values . Value . All ( x => x >= 1 ) ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . Value . All ( x => x >= 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.MegaBytes != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . MegaBytes != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	httpUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/DisposeMeOnce/")	0.18	9	41	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/DisposeMeOnce/" ) ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	httpUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/DisposeMeOnce/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	childContexts != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( childContexts != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile98 >= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile98 >= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile98 >= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement()	counter != null	1	42	0	public void Decrement ( ) { if ( counter != null ) ; this . counter . Decrement ( ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.None != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . None != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Min >= histogram.Mean	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Min >= histogram . Mean ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Min >= histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Percent != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Percent != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement()	counter.value == 1	0.476190476190476	20	22	public void Decrement ( ) { if ( counter . value == 1 ) ; this . counter . Decrement ( ) ; }	counter . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.Value.All(x => x <= 1)	0.826086956521739	19	4	public void Update ( long value , string userValue = null ) { if ( values . Value . All ( x => x <= 1 ) ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . Value . All ( x => x <= 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	isDisabled == false	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( isDisabled == false ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	maxRetries >= 0	1	50	0	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( maxRetries >= 0 ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	maxRetries >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	childContexts.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( childContexts . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	childContexts . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement()	counter.value == 0	0.19047619047619	8	34	public void Decrement ( ) { if ( counter . value == 0 ) ; this . counter . Decrement ( ) ; }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Requests != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Requests != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . MetricTags . None != null ) ; this . gauges . GetOrAdd ( name , ( ) => { MetricValueProvider < double > gauge = valueProvider ( ) ; return Tuple . Create ( gauge , new GaugeValueSource ( name , gauge , unit , tags ) ) ; } ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Weight >= 1	0.22680412371134	22	75	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Weight >= 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Weight >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Results != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Results != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement()	counter.value >= 1	0.476190476190476	20	22	public void Decrement ( ) { if ( counter . value >= 1 ) ; this . counter . Decrement ( ) ; }	counter . value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate != null	1	38	0	public void Tick ( ) { if ( m15Rate != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Min <= histogram.Median	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Min <= histogram . Median ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Min <= histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.Unit.Threads != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . Unit . Threads != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement()	counter.value >= 0	0.380952380952381	16	26	public void Decrement ( ) { if ( counter . value >= 0 ) ; this . counter . Decrement ( ) ; }	counter . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	values.Value.Count == 3	1	23	0	public void Update ( long value , string userValue = null ) { if ( values . Value . Count == 3 ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	values . Value . Count == 3
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	childContexts.childContexts.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( childContexts . childContexts . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	childContexts . childContexts . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	samplingType != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( samplingType != null ) ; return new HistogramMetric ( samplingType ) ; }	samplingType != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.SamplingType.FavourRecent != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . SamplingType . FavourRecent != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . SamplingType . FavourRecent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	metricsBuilder != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( metricsBuilder != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.SamplingType.FavourRecent.Equals(samplingType)	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . SamplingType . FavourRecent . Equals ( samplingType ) ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . SamplingType . FavourRecent . Equals ( samplingType )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	counters != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( counters != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	counters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.SamplingType.LongTerm != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . SamplingType . LongTerm != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . SamplingType . LongTerm != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	maxRetries <= listener.httpListener	0.02	1	49	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( maxRetries <= listener . httpListener ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	maxRetries <= listener . httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement()	counter.value <= 1	0.619047619047619	26	16	public void Decrement ( ) { if ( counter . value <= 1 ) ; this . counter . Decrement ( ) ; }	counter . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildHistogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType)	Metrics.SamplingType.SlidingWindow != null	1	58	0	public HistogramImplementation BuildHistogram ( string name , Unit unit , SamplingType samplingType ) { if ( Metrics . SamplingType . SlidingWindow != null ) ; return new HistogramMetric ( samplingType ) ; }	Metrics . SamplingType . SlidingWindow != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	value >= 1	1	23	0	public void Update ( long value , string userValue = null ) { if ( value >= 1 ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.alpha >= 0	1	38	0	public void Tick ( ) { if ( m15Rate . alpha >= 0 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement()	counter.value <= 0	0.404761904761905	17	25	public void Decrement ( ) { if ( counter . value <= 0 ) ; this . counter . Decrement ( ) ; }	counter . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	counters.metrics != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( counters . metrics != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	counters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	registry != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( registry != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	childContexts.counters.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( childContexts . counters . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	childContexts . counters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	name != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( name != null ) ; return new TimerMetric ( samplingType ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	name.ToString().Equals("HTTP Request")	0.758620689655172	44	14	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( name . ToString ( ) . Equals ( "HTTPRequest" ) ) ; return new TimerMetric ( samplingType ) ; }	name . ToString ( ) . Equals ( "HTTPRequest" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement()	setCounters != null	1	42	0	public void Decrement ( ) { if ( setCounters != null ) ; this . counter . Decrement ( ) ; }	setCounters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener.cts != null	0.2	10	40	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener . cts != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener . cts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	gauges != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( gauges != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	gauges != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.MinUserValue != null	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . MinUserValue != null ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . MinUserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.alpha >= count.value	0.0526315789473684	2	36	public void Tick ( ) { if ( m15Rate . alpha >= count . value ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	name.ToString().Equals("Test")	0.137931034482759	8	50	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return new TimerMetric ( samplingType ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	value >= count.value	0.304347826086957	7	16	public void Update ( long value , string userValue = null ) { if ( value >= count . value ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	value >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement(System.Int64 value)	counter != null	1	11	0	public void Decrement ( long value ) { if ( counter != null ) ; this . counter . Add ( - value ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Weight <= 1	0.0206185567010309	2	95	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Weight <= 1 ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Weight <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	unit != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( unit != null ) ; return new TimerMetric ( samplingType ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	name != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( name != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	unit.Name != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( unit . Name != null ) ; return new TimerMetric ( samplingType ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement(System.Int64 value)	counter.value == 0	1	11	0	public void Decrement ( long value ) { if ( counter . value == 0 ) ; this . counter . Add ( - value ) ; }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	childContexts.environment.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( childContexts . environment . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	childContexts . environment . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	unit.Name.ToString().Equals("Requests")	0.758620689655172	44	14	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( unit . Name . ToString ( ) . Equals ( "Requests" ) ) ; return new TimerMetric ( samplingType ) ; }	unit . Name . ToString ( ) . Equals ( "Requests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	userValue != null	0.173913043478261	4	19	public void Update ( long value , string userValue = null ) { if ( userValue != null ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	userValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	gauges.metrics != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( gauges . metrics != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	gauges . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement(System.Int64 value)	setCounters != null	1	11	0	public void Decrement ( long value ) { if ( setCounters != null ) ; this . counter . Add ( - value ) ; }	setCounters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	unit.Name.ToString().Equals("Calls")	0.137931034482759	8	50	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return new TimerMetric ( samplingType ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.alpha <= count.value	0.631578947368421	24	14	public void Tick ( ) { if ( m15Rate . alpha <= count . value ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement(System.Int64 value)	value == 32	1	11	0	public void Decrement ( long value ) { if ( value == 32 ) ; this . counter . Add ( - value ) ; }	value == 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener.healthStatus != null	0.2	10	40	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener . healthStatus != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener . healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	count >= 0	1	53	0	public double GetValue ( double quantile ) { if ( count >= 0 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	count >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.MinUserValue.ToString().Equals("8")	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . MinUserValue . ToString ( ) . Equals ( "8" ) ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . MinUserValue . ToString ( ) . Equals ( "8" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\SlidingWindowReservoir.cs	Metrics.Sampling.SlidingWindowReservoir.Update(System.Int64 value, System.String userValue)	userValue == null	0.739130434782609	17	6	public void Update ( long value , string userValue = null ) { if ( userValue == null ) ; var count = this . count . Increment ( ) ; this . values [ ( int ) ( ( count - 1 ) % values . Length ) ] = new UserValueWrapper ( value , userValue ) ; }	userValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Bytes != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Bytes != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Reset()	counter != null	1	14	0	public void Reset ( ) { if ( counter != null ) ; this . counter . SetValue ( 0L ) ; foreach ( var item in this . setCounters ) { item . Value . SetValue ( 0L ) ; } }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile99 >= Histogram.Percentile95	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile99 >= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile99 >= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	childContexts.gauges.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( childContexts . gauges . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	childContexts . gauges . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	histograms != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( histograms != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	histograms != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.initialized == false	0.289473684210526	11	27	public void Tick ( ) { if ( m15Rate . initialized == false ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Weight >= x.Value	0.0206185567010309	2	95	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Weight >= x . Value ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Weight >= x . Value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Reset()	counter.value == 1	1	14	0	public void Reset ( ) { if ( counter . value == 1 ) ; this . counter . SetValue ( 0L ) ; foreach ( var item in this . setCounters ) { item . Value . SetValue ( 0L ) ; } }	counter . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Calls != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Calls != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Calls.Equals(unit)	0.137931034482759	8	50	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Reset()	setCounters != null	1	14	0	public void Reset ( ) { if ( setCounters != null ) ; this . counter . SetValue ( 0L ) ; foreach ( var item in this . setCounters ) { item . Value . SetValue ( 0L ) ; } }	setCounters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener.healthStatus.Equals(healthStatus)	0.2	10	40	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener . healthStatus . Equals ( healthStatus ) ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener . healthStatus . Equals ( healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.String item)	counter != null	1	36	0	public void Increment ( string item ) { if ( counter != null ) ; this . Increment ( ) ; SetCounter ( item ) . Increment ( ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	childContexts.histograms.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( childContexts . histograms . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	childContexts . histograms . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	valueProvider != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( valueProvider != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	valueProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Commands != null	0.982758620689655	57	1	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Commands != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.String item)	counter.value == 0	0.694444444444444	25	11	public void Increment ( string item ) { if ( counter . value == 0 ) ; this . Increment ( ) ; SetCounter ( item ) . Increment ( ) ; }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.ErrorException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	message.ToString().Equals("Metrics: Unhandled exception in Metrics.NET Library {0} {1}")	1	24	0	public static void ErrorException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( message . ToString ( ) . Equals ( "Metrics:UnhandledexceptioninMetrics.NETLibrary{0}{1}" ) ) ; if ( logger . IsErrorEnabled ( ) ) { logger . Log ( LogLevel . Error , message . AsFunc ( ) , exception , formatParams ) ; } }	message . ToString ( ) . Equals ( "Metrics:UnhandledexceptioninMetrics.NETLibrary{0}{1}" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Commands >= 0	0.0172413793103448	1	57	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Commands >= 0 ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	maxUserValue == null	1	53	0	public double GetValue ( double quantile ) { if ( maxUserValue == null ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	maxUserValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.interval >= 0	1	38	0	public void Tick ( ) { if ( m15Rate . interval >= 0 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	histograms.metrics != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( histograms . metrics != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	histograms . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Errors != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Errors != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile75 >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile75 >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile75 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	clock != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( clock != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.String item)	counter.value >= 0	1	36	0	public void Increment ( string item ) { if ( counter . value >= 0 ) ; this . Increment ( ) ; SetCounter ( item ) . Increment ( ) ; }	counter . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	childContexts.meters.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( childContexts . meters . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	childContexts . meters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Events != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Events != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	unit != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( unit != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Weight <= x.Value	0.0927835051546392	9	88	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Weight <= x . Value ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Weight <= x . Value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.String item)	counter.value <= 1	0.333333333333333	12	24	public void Increment ( string item ) { if ( counter . value <= 1 ) ; this . Increment ( ) ; SetCounter ( item ) . Increment ( ) ; }	counter . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	counter != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( counter != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.interval >= count.value	1	38	0	public void Tick ( ) { if ( m15Rate . interval >= count . value ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Items != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Items != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	meters != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( meters != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	meters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.KiloBytes != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . KiloBytes != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.String item)	counter.value <= 0	0.694444444444444	25	11	public void Increment ( string item ) { if ( counter . value <= 0 ) ; this . Increment ( ) ; SetCounter ( item ) . Increment ( ) ; }	counter . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	counter.value == 0	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( counter . value == 0 ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	childContexts.timers.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( childContexts . timers . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	childContexts . timers . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.MegaBytes != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . MegaBytes != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener.httpListener != null	0.18	9	41	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener . httpListener != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener . httpListener != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.None != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . None != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	minUserValue == null	1	53	0	public double GetValue ( double quantile ) { if ( minUserValue == null ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	minUserValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.String item)	setCounters != null	1	36	0	public void Increment ( string item ) { if ( setCounters != null ) ; this . Increment ( ) ; SetCounter ( item ) . Increment ( ) ; }	setCounters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	histogram != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( histogram != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Percent != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Percent != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.interval >= m15Rate.alpha	1	38	0	public void Tick ( ) { if ( m15Rate . interval >= m15Rate . alpha ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Requests != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Requests != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.String item)	item != null	1	36	0	public void Increment ( string item ) { if ( item != null ) ; this . Increment ( ) ; SetCounter ( item ) . Increment ( ) ; }	item != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( unit . Name != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	meters.metrics != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( meters . metrics != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	meters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	histogram >= 0	0.0166666666666667	1	59	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( histogram >= 0 ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	histogram >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Increment(System.String item)	item.ToString().Equals("A")	0.694444444444444	25	11	public void Increment ( string item ) { if ( item . ToString ( ) . Equals ( "A" ) ) ; this . Increment ( ) ; SetCounter ( item ) . Increment ( ) ; }	item . ToString ( ) . Equals ( "A" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	counters.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( counters . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	counters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Requests.Equals(unit)	0.758620689655172	44	14	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Requests . Equals ( unit ) ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Requests . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= Histogram.Percentile95	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile75 <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile75 <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile75 <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener.httpListener >= 0	0.02	1	49	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener . httpListener >= 0 ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener . httpListener >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.Percentile999 >= Histogram.Percentile98	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . Percentile999 >= Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . Percentile999 >= Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Results != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Results != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement(System.String item)	counter != null	1	9	0	public void Decrement ( string item ) { if ( counter != null ) ; this . Decrement ( ) ; SetCounter ( item ) . Decrement ( ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	timers != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( timers != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	timers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	histogram >= counter.value	0.0166666666666667	1	59	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( histogram >= counter . value ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	histogram >= counter . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize == 16	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize == 16 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize == 16
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.rate != null	1	38	0	public void Tick ( ) { if ( m15Rate . rate != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.Unit.Threads != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . Unit . Threads != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement(System.String item)	counter.value == 1	1	9	0	public void Decrement ( string item ) { if ( counter . value == 1 ) ; this . Decrement ( ) ; SetCounter ( item ) . Decrement ( ) ; }	counter . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	x.Weight <= x	0.0103092783505155	1	96	public int Compare ( WeightedSample x , WeightedSample y ) { if ( x . Weight <= x ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	x . Weight <= x
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	rateUnit != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( rateUnit != null ) ; return new TimerMetric ( samplingType ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.TimeUnit.Days != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . TimeUnit . Days != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	meter != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( meter != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	meter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	values.Count == 5	1	53	0	public double GetValue ( double quantile ) { if ( values . Count == 5 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	values . Count == 5
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.TimeUnit.Hours != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . TimeUnit . Hours != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener.metricsDataProvider != null	0.2	10	40	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener . metricsDataProvider != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener . metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.uncounted != null	1	38	0	public void Tick ( ) { if ( m15Rate . uncounted != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement(System.String item)	setCounters != null	1	9	0	public void Decrement ( string item ) { if ( setCounters != null ) ; this . Decrement ( ) ; SetCounter ( item ) . Decrement ( ) ; }	setCounters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	counters.All(x => x != null)	1	5	0	public JsonObject ToJsonObject ( ) { if ( counters . All ( x => x != null ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	counters . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.TimeUnit.Microseconds != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration == 100000000	0.466666666666667	28	32	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration == 100000000 ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration == 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement(System.String item)	item != null	1	9	0	public void Decrement ( string item ) { if ( item != null ) ; this . Decrement ( ) ; SetCounter ( item ) . Decrement ( ) ; }	item != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	timers.metrics != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( timers . metrics != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	timers . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration == 0	0.0333333333333333	2	58	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration == 0 ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile75 >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile75 >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile75 >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.TimeUnit.Milliseconds != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.TimeUnit.Minutes != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . TimeUnit . Minutes != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Bytes != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener.prefixPath != null	0.2	10	40	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener . prefixPath != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener . prefixPath != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.Decrement(System.String item)	item.ToString().Equals("A")	1	9	0	public void Decrement ( string item ) { if ( item . ToString ( ) . Equals ( "A" ) ) ; this . Decrement ( ) ; SetCounter ( item ) . Decrement ( ) ; }	item . ToString ( ) . Equals ( "A" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m15Rate.uncounted.Equals(count)	0.315789473684211	12	26	public void Tick ( ) { if ( m15Rate . uncounted . Equals ( count ) ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m15Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration >= 100000000	0.483333333333333	29	31	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration >= 100000000 ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration >= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	values >= count	0.0188679245283019	1	52	public double GetValue ( double quantile ) { if ( values >= count ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	values >= count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.TimeUnit.Nanoseconds != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( name != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.TimeUnit.Seconds != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . TimeUnit . Seconds != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	counters.items.All(x => x != null)	1	5	0	public JsonObject ToJsonObject ( ) { if ( counters . items . All ( x => x != null ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	counters . items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return new TimerMetric ( samplingType ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.SetCounter(System.String item)	counter != null	1	36	0	private AtomicLongHolder SetCounter ( string item ) { if ( counter != null ) ; return this . setCounters . GetOrAdd ( item , v => new AtomicLongHolder ( ) ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration >= 0	0.333333333333333	20	40	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration >= 0 ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	durationUnit != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( durationUnit != null ) ; return new TimerMetric ( samplingType ) ; }	durationUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Calls != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.WeightedSampleComparer.Compare(Metrics.Sampling.WeightedSample x, Metrics.Sampling.WeightedSample y)	y != null	1	97	0	public int Compare ( WeightedSample x , WeightedSample y ) { if ( y != null ) ; return Comparer < long > . Default . Compare ( x . Value , y . Value ) ; }	y != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate != null	1	38	0	public void Tick ( ) { if ( m1Rate != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("Active Requests")	0.285714285714286	26	65	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "ActiveRequests" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "ActiveRequests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.SetCounter(System.String item)	counter.value == 1	0.444444444444444	16	20	private AtomicLongHolder SetCounter ( string item ) { if ( counter . value == 1 ) ; return this . setCounters . GetOrAdd ( item , v => new AtomicLongHolder ( ) ) ; }	counter . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	durationUnit.Equals(Metrics.TimeUnit.Milliseconds)	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( durationUnit . Equals ( Metrics . TimeUnit . Milliseconds ) ) ; return new TimerMetric ( samplingType ) ; }	durationUnit . Equals ( Metrics . TimeUnit . Milliseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener.processingTask != null	0.14	7	43	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener . processingTask != null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener . processingTask != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.Percentile95	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile75 >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile75 >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile75 >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	samplingType != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( samplingType != null ) ; return new TimerMetric ( samplingType ) ; }	samplingType != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.SetCounter(System.String item)	counter.value >= 1	0.75	27	9	private AtomicLongHolder SetCounter ( string item ) { if ( counter . value >= 1 ) ; return this . setCounters . GetOrAdd ( item , v => new AtomicLongHolder ( ) ) ; }	counter . value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration >= 1	0.3	18	42	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration >= 1 ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.Percentile98	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.SamplingType.FavourRecent != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . SamplingType . FavourRecent != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . SamplingType . FavourRecent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	counters.items.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( counters . items . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	counters . items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.SamplingType.FavourRecent.Equals(samplingType)	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . SamplingType . FavourRecent . Equals ( samplingType ) ) ; return new TimerMetric ( samplingType ) ; }	Metrics . SamplingType . FavourRecent . Equals ( samplingType )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.SampleSize >= Histogram.Percentile99	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . SampleSize >= Histogram . Percentile99 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . SampleSize >= Histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.SetCounter(System.String item)	counter.value >= 0	0.5	18	18	private AtomicLongHolder SetCounter ( string item ) { if ( counter . value >= 0 ) ; return this . setCounters . GetOrAdd ( item , v => new AtomicLongHolder ( ) ) ; }	counter . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration <= 100000000	0.683333333333333	41	19	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration <= 100000000 ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration <= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.SamplingType.LongTerm != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . SamplingType . LongTerm != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . SamplingType . LongTerm != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("test")	0.0989010989010989	9	82	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "test" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.SamplingType samplingType)	Metrics.SamplingType.SlidingWindow != null	1	58	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , SamplingType samplingType ) { if ( Metrics . SamplingType . SlidingWindow != null ) ; return new TimerMetric ( samplingType ) ; }	Metrics . SamplingType . SlidingWindow != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.alpha >= 0	1	38	0	public void Tick ( ) { if ( m1Rate . alpha >= 0 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	values != null	0.320754716981132	17	36	public double GetValue ( double quantile ) { if ( values != null ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	values != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.SetCounter(System.String item)	counter.value <= 1	0.694444444444444	25	11	private AtomicLongHolder SetCounter ( string item ) { if ( counter . value <= 1 ) ; return this . setCounters . GetOrAdd ( item , v => new AtomicLongHolder ( ) ) ; }	counter . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	name != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( name != null ) ; return new TimerMetric ( histogram ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithHttpEndpoint(System.String httpUriPrefix, System.Int32 maxRetries)	listener.processingTask == null	0.06	3	47	public MetricsConfig WithHttpEndpoint ( string httpUriPrefix , int maxRetries = 3 ) { if ( listener . processingTask == null ) ; if ( ! isDisabled ) { var retries = maxRetries ; do { try { using ( this . listener ) { } this . listener = new MetricsHttpListener ( httpUriPrefix , this . context . DataProvider , this . healthStatus ) ; this . listener . Start ( ) ; if ( retries != maxRetries ) { log . InfoFormat ( "HttpListenerstartedsuccessfullyafter{0}retries" , maxRetries - retries ) ; } retries = 0 ; } catch ( Exception x ) { retries -- ; if ( retries > 0 ) { log . WarnException ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" , x , maxRetries - retries , retries ) ; Thread . Sleep ( 1000 * ( maxRetries - retries ) ) ; } else { MetricsErrorHandler . Handle ( x , string . Format ( "UnabletostartHTTPListener.Retried{0}times,givingup..." , maxRetries ) ) ; } } } while ( retries > 0 ) ; } return this ; }	listener . processingTask == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration <= 0	0.0333333333333333	2	58	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration <= 0 ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.021978021978022	2	89	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile75 >= histogram.Mean	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile75 >= histogram . Mean ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile75 >= histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	name.ToString().Equals("custom")	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( name . ToString ( ) . Equals ( "custom" ) ) ; return new TimerMetric ( histogram ) ; }	name . ToString ( ) . Equals ( "custom" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.alpha >= count.value	0.0526315789473684	2	36	public void Tick ( ) { if ( m1Rate . alpha >= count . value ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.SetCounter(System.String item)	setCounters != null	1	36	0	private AtomicLongHolder SetCounter ( string item ) { if ( setCounters != null ) ; return this . setCounters . GetOrAdd ( item , v => new AtomicLongHolder ( ) ) ; }	setCounters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	unit != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( unit != null ) ; return new TimerMetric ( histogram ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	unit.Name != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( unit . Name != null ) ; return new TimerMetric ( histogram ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration >= counter.value	0.366666666666667	22	38	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration >= counter . value ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration >= counter . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.ErrorException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	exception != null	1	24	0	public static void ErrorException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( exception != null ) ; if ( logger . IsErrorEnabled ( ) ) { logger . Log ( LogLevel . Error , message . AsFunc ( ) , exception , formatParams ) ; } }	exception != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.SetCounter(System.String item)	item != null	1	36	0	private AtomicLongHolder SetCounter ( string item ) { if ( item != null ) ; return this . setCounters . GetOrAdd ( item , v => new AtomicLongHolder ( ) ) ; }	item != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	environment != null	1	5	0	public JsonObject ToJsonObject ( ) { if ( environment != null ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	environment != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev >= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	unit.Name.ToString().Equals("Calls")	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return new TimerMetric ( histogram ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.alpha <= count.value	0.631578947368421	24	14	public void Tick ( ) { if ( m1Rate . alpha <= count . value ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Commands != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("counter")	0.010989010989011	1	90	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "counter" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "counter" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\CounterMetric.cs	Metrics.Core.CounterMetric.SetCounter(System.String item)	item.ToString().Equals("A")	0.694444444444444	25	11	private AtomicLongHolder SetCounter ( string item ) { if ( item . ToString ( ) . Equals ( "A" ) ) ; return this . setCounters . GetOrAdd ( item , v => new AtomicLongHolder ( ) ) ; }	item . ToString ( ) . Equals ( "A" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Bytes != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Bytes != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Calls != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Calls != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration <= histogram	0.0166666666666667	1	59	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration <= histogram ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration <= histogram
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	count == 1	0.0568181818181818	5	83	public double GetValue ( double quantile ) { if ( count == 1 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Calls.Equals(unit)	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	values.All(x => x >= 1)	1	53	0	public double GetValue ( double quantile ) { if ( values . All ( x => x >= 1 ) ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	values . All ( x => x >= 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	Metrics.MetricsConfig.GlobalyDisabledMetrics == false	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( Metrics . MetricsConfig . GlobalyDisabledMetrics == false ) ; return extension ( this . context , this . healthStatus ) ; }	Metrics . MetricsConfig . GlobalyDisabledMetrics == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Commands != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Commands != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev >= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev >= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev >= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	last != null	1	68	0	public void Update ( long value , string userValue = null ) { if ( last != null ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	last != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Errors != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Errors != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile75 >= histogram.Median	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile75 >= histogram . Median ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile75 >= histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev >= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev >= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev >= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.alpha >= m15Rate.alpha	1	38	0	public void Tick ( ) { if ( m1Rate . alpha >= m15Rate . alpha ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	gauges.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( gauges . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	gauges . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("custom")	0.010989010989011	1	90	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "custom" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "custom" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	duration != null	0.25	15	45	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( duration != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	duration != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	Metrics.MetricsConfig.log != null	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( Metrics . MetricsConfig . log != null ) ; return extension ( this . context , this . healthStatus ) ; }	Metrics . MetricsConfig . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	last.UserValue == null	0.735294117647059	50	18	public void Update ( long value , string userValue = null ) { if ( last . UserValue == null ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	last . UserValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Events != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Events != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Errors != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Items != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Items != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.KiloBytes != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . KiloBytes != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	unit != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( unit != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.MegaBytes != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . MegaBytes != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	last.Value == 0	0.588235294117647	40	28	public void Update ( long value , string userValue = null ) { if ( last . Value == 0 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	last . Value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	quantile == 1	0.188679245283019	10	43	public double GetValue ( double quantile ) { if ( quantile == 1 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	quantile == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.None != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . None != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Events != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev <= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev <= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev <= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.alpha <= m15Rate.interval	1	38	0	public void Tick ( ) { if ( m1Rate . alpha <= m15Rate . interval ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Percent != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Percent != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	last.Value >= 0	1	68	0	public void Update ( long value , string userValue = null ) { if ( last . Value >= 0 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	last . Value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev <= Histogram.Percentile95	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev <= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev <= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	Metrics.TimeUnit.Days != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( Metrics . TimeUnit . Days != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Requests != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Requests != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile75 >= histogram.Min	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile75 >= histogram . Min ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile75 >= histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	builder != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( builder != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	last.Value <= 0	0.588235294117647	40	28	public void Update ( long value , string userValue = null ) { if ( last . Value <= 0 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	last . Value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	context != null	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( context != null ) ; return extension ( this . context , this . healthStatus ) ; }	context != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	gauges.All(x => x != null)	1	5	0	public JsonObject ToJsonObject ( ) { if ( gauges . All ( x => x != null ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	gauges . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev <= Histogram.Percentile98	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev <= Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev <= Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Results != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Results != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.initialized == false	0.289473684210526	11	27	public void Tick ( ) { if ( m1Rate . initialized == false ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	count >= 1	0.159090909090909	14	74	public double GetValue ( double quantile ) { if ( count >= 1 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	count >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.Unit.Threads != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . Unit . Threads != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	last.Value <= 1000000	0.25	17	51	public void Update ( long value , string userValue = null ) { if ( last . Value <= 1000000 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	last . Value <= 1000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Items != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	Metrics.TimeUnit.Hours != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( Metrics . TimeUnit . Hours != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	rateUnit != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( rateUnit != null ) ; return new TimerMetric ( histogram ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	Metrics.TimeUnit.Microseconds != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( Metrics . TimeUnit . Microseconds != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	last.Value <= 1	0.220588235294118	15	53	public void Update ( long value , string userValue = null ) { if ( last . Value <= 1 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	last . Value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev <= Histogram.Percentile99	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev <= Histogram . Percentile99 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev <= Histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.TimeUnit.Days != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . TimeUnit . Days != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( unit != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	quantile == 0	0.0754716981132075	4	49	public double GetValue ( double quantile ) { if ( quantile == 0 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	quantile == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.TimeUnit.Hours != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . TimeUnit . Hours != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . KiloBytes != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	Metrics.TimeUnit.Milliseconds != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev <= Histogram.Percentile999	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev <= Histogram . Percentile999 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev <= Histogram . Percentile999
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	reservoir != null	1	68	0	public void Update ( long value , string userValue = null ) { if ( reservoir != null ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	reservoir != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	healthStatus != null	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( healthStatus != null ) ; return extension ( this . context , this . healthStatus ) ; }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.TimeUnit.Microseconds != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Histogram.StdDev <= Histogram.SampleSize	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Histogram . StdDev <= Histogram . SampleSize ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Histogram . StdDev <= Histogram . SampleSize
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.interval >= 0	1	38	0	public void Tick ( ) { if ( m1Rate . interval >= 0 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value == 100000000	0.264705882352941	18	50	public void Update ( long value , string userValue = null ) { if ( value == 100000000 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value == 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	gauges.value.All(x => x >= 0)	1	5	0	public JsonObject ToJsonObject ( ) { if ( gauges . value . All ( x => x >= 0 ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	gauges . value . All ( x => x >= 0 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.TimeUnit.Milliseconds != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( unit . Name != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	Metrics.TimeUnit.Milliseconds.Equals(unit)	0.116666666666667	7	53	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( Metrics . TimeUnit . Milliseconds . Equals ( unit ) ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	Metrics . TimeUnit . Milliseconds . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value == 0	0.0588235294117647	4	64	public void Update ( long value , string userValue = null ) { if ( value == 0 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile95 >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile95 >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile95 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.TimeUnit.Minutes != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . TimeUnit . Minutes != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value == 1	0.0441176470588235	3	65	public void Update ( long value , string userValue = null ) { if ( value == 1 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.TimeUnit.Nanoseconds != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	Metrics.TimeUnit.Minutes != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( Metrics . TimeUnit . Minutes != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value >= 100000000	0.264705882352941	18	50	public void Update ( long value , string userValue = null ) { if ( value >= 100000000 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value >= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . MegaBytes != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.TimeUnit.Seconds != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . TimeUnit . Seconds != null ) ; return new TimerMetric ( histogram ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("ActiveRequests")	0.285714285714286	26	65	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "ActiveRequests" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "ActiveRequests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return new TimerMetric ( histogram ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	isDisabled == false	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( isDisabled == false ) ; return extension ( this . context , this . healthStatus ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	Metrics.TimeUnit.Nanoseconds != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.interval >= count.value	1	38	0	public void Tick ( ) { if ( m1Rate . interval >= count . value ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value >= 0	0.441176470588235	30	38	public void Update ( long value , string userValue = null ) { if ( value >= 0 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	gauges.value.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( gauges . value . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	gauges . value . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	quantile >= 0	0.830188679245283	44	9	public double GetValue ( double quantile ) { if ( quantile >= 0 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	quantile >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	durationUnit != null	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( durationUnit != null ) ; return new TimerMetric ( histogram ) ; }	durationUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("")	0.010989010989011	1	90	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	count >= 0	0.852272727272727	75	13	public double GetValue ( double quantile ) { if ( count >= 0 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	count >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	durationUnit.Equals(Metrics.TimeUnit.Milliseconds)	1	6	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( durationUnit . Equals ( Metrics . TimeUnit . Milliseconds ) ) ; return new TimerMetric ( histogram ) ; }	durationUnit . Equals ( Metrics . TimeUnit . Milliseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value >= 1	0.264705882352941	18	50	public void Update ( long value , string userValue = null ) { if ( value >= 1 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile95 <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile95 <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile95 <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	Metrics.TimeUnit.Nanoseconds.Equals(unit)	0.75	45	15	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( Metrics . TimeUnit . Nanoseconds . Equals ( unit ) ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	Metrics . TimeUnit . Nanoseconds . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	histogram != null	0.833333333333333	5	1	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( histogram != null ) ; return new TimerMetric ( histogram ) ; }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	listener == null	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( listener == null ) ; return extension ( this . context , this . healthStatus ) ; }	listener == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value >= 1000000	0.147058823529412	10	58	public void Update ( long value , string userValue = null ) { if ( value >= 1000000 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value >= 1000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . None != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Core.HistogramImplementation histogram)	histogram >= 0	0.166666666666667	1	5	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , HistogramImplementation histogram ) { if ( histogram >= 0 ) ; return new TimerMetric ( histogram ) ; }	histogram >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count <= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count <= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count <= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	Metrics.TimeUnit.Seconds != null	1	60	0	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( Metrics . TimeUnit . Seconds != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.interval >= m15Rate.alpha	1	38	0	public void Tick ( ) { if ( m1Rate . interval >= m15Rate . alpha ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value <= 100000000	0.632352941176471	43	25	public void Update ( long value , string userValue = null ) { if ( value <= 100000000 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value <= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	name != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( name != null ) ; return new TimerMetric ( reservoir ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count <= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count <= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count <= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Requests")	0.021978021978022	2	89	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "Requests" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "Requests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value <= 10000000	0.176470588235294	12	56	public void Update ( long value , string userValue = null ) { if ( value <= 10000000 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value <= 10000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	name.ToString().Equals("custom")	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( name . ToString ( ) . Equals ( "custom" ) ) ; return new TimerMetric ( reservoir ) ; }	name . ToString ( ) . Equals ( "custom" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	histograms.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( histograms . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	histograms . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	userValue == null	0.75	45	15	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( userValue == null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	userValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count <= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count <= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count <= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.interval == m15Rate.interval	1	38	0	public void Tick ( ) { if ( m1Rate . interval == m15Rate . interval ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	reports != null	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( reports != null ) ; return extension ( this . context , this . healthStatus ) ; }	reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	unit != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( unit != null ) ; return new TimerMetric ( reservoir ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value <= 0	0.0588235294117647	4	64	public void Update ( long value , string userValue = null ) { if ( value <= 0 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Percent != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	unit.Name != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( unit . Name != null ) ; return new TimerMetric ( reservoir ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile95 >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile95 >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile95 >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	unit.Name.ToString().Equals("Calls")	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return new TimerMetric ( reservoir ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count <= Histogram.Percentile95	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count <= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count <= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Record(System.Int64 duration, Metrics.TimeUnit unit, System.String userValue)	userValue != null	0.116666666666667	7	53	public void Record ( long duration , TimeUnit unit , string userValue = null ) { if ( userValue != null ) ; var nanos = unit . ToNanoseconds ( duration ) ; if ( nanos >= 0 ) { this . histogram . Update ( nanos , userValue ) ; this . meter . Mark ( ) ; } }	userValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value <= 1	0.0735294117647059	5	63	public void Update ( long value , string userValue = null ) { if ( value <= 1 ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Bytes != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Bytes != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count <= Histogram.Percentile98	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count <= Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count <= Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	quantile >= 1	0.188679245283019	10	43	public double GetValue ( double quantile ) { if ( quantile >= 1 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	quantile >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Calls != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Calls != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value >= last.Value	0.514705882352941	35	33	public void Update ( long value , string userValue = null ) { if ( value >= last . Value ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value >= last . Value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.interval >= m1Rate.alpha	1	38	0	public void Tick ( ) { if ( m1Rate . interval >= m1Rate . alpha ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.ErrorException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	formatParams.Count == 2	1	24	0	public static void ErrorException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( formatParams . Count == 2 ) ; if ( logger . IsErrorEnabled ( ) ) { logger . Log ( LogLevel . Error , message . AsFunc ( ) , exception , formatParams ) ; } }	formatParams . Count == 2
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Action action, System.String userValue)	clock != null	1	10	0	public void Time ( Action action , string userValue = null ) { if ( clock != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("bytes")	0.0769230769230769	7	84	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "bytes" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "bytes" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Calls.Equals(unit)	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count <= Histogram.Percentile99	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count <= Histogram . Percentile99 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count <= Histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	histograms.All(x => x != null)	1	5	0	public JsonObject ToJsonObject ( ) { if ( histograms . All ( x => x != null ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	histograms . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Requests != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	value != null	0.220588235294118	15	53	public void Update ( long value , string userValue = null ) { if ( value != null ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Commands != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Commands != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	reports.healthStatus != null	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( reports . healthStatus != null ) ; return extension ( this . context , this . healthStatus ) ; }	reports . healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Errors != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Errors != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count <= Histogram.Percentile999	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count <= Histogram . Percentile999 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count <= Histogram . Percentile999
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Update(System.Int64 value, System.String userValue)	userValue == null	0.735294117647059	50	18	public void Update ( long value , string userValue = null ) { if ( userValue == null ) ; this . last = new UserValueWrapper ( value , userValue ) ; this . reservoir . Update ( value , userValue ) ; }	userValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Events != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Events != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.rate != null	1	38	0	public void Tick ( ) { if ( m1Rate . rate != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Action action, System.String userValue)	counter != null	1	10	0	public void Time ( Action action , string userValue = null ) { if ( counter != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count <= Histogram.SampleSize	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count <= Histogram . SampleSize ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count <= Histogram . SampleSize
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Items != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Items != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Reset()	last != null	1	16	0	public void Reset ( ) { if ( last != null ) ; this . last = new UserValueWrapper ( ) ; this . reservoir . Reset ( ) ; }	last != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.KiloBytes != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . KiloBytes != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.032967032967033	3	88	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	count <= 1	0.102272727272727	9	79	public double GetValue ( double quantile ) { if ( count <= 1 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	count <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Results != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Count <= Histogram.StdDev	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Count <= Histogram . StdDev ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Count <= Histogram . StdDev
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	meters.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( meters . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	meters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.MegaBytes != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . MegaBytes != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile95 >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile95 >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile95 >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	reports.healthStatus.Equals(healthStatus)	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( reports . healthStatus . Equals ( healthStatus ) ) ; return extension ( this . context , this . healthStatus ) ; }	reports . healthStatus . Equals ( healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Reset()	last.UserValue == null	1	16	0	public void Reset ( ) { if ( last . UserValue == null ) ; this . last = new UserValueWrapper ( ) ; this . reservoir . Reset ( ) ; }	last . UserValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Action action, System.String userValue)	counter.value == 0	1	10	0	public void Time ( Action action , string userValue = null ) { if ( counter . value == 0 ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Bytes != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.None != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . None != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.rate.Equals(m15Rate.rate)	0.815789473684211	31	7	public void Tick ( ) { if ( m1Rate . rate . Equals ( m15Rate . rate ) ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . rate . Equals ( m15Rate . rate )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	quantile <= 1	0.283018867924528	15	38	public double GetValue ( double quantile ) { if ( quantile <= 1 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	quantile <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Percent != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Percent != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Reset()	last.Value == 100000000	0.5625	9	7	public void Reset ( ) { if ( last . Value == 100000000 ) ; this . last = new UserValueWrapper ( ) ; this . reservoir . Reset ( ) ; }	last . Value == 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Threads != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Action action, System.String userValue)	histogram != null	1	10	0	public void Time ( Action action , string userValue = null ) { if ( histogram != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Requests != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Requests != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.uncounted != null	1	38	0	public void Tick ( ) { if ( m1Rate . uncounted != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	reports.metricsDataProvider != null	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( reports . metricsDataProvider != null ) ; return extension ( this . context , this . healthStatus ) ; }	reports . metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Reset()	last.Value >= 0	0.5	8	8	public void Reset ( ) { if ( last . Value >= 0 ) ; this . last = new UserValueWrapper ( ) ; this . reservoir . Reset ( ) ; }	last . Value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Bytes.Equals(unit)	0.0769230769230769	7	84	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Bytes . Equals ( unit ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Bytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate >= Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	meters.All(x => x != null)	1	5	0	public JsonObject ToJsonObject ( ) { if ( meters . All ( x => x != null ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	meters . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Action action, System.String userValue)	meter != null	1	10	0	public void Time ( Action action , string userValue = null ) { if ( meter != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	meter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Results != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Results != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Reset()	last.Value >= 100000000	0.5625	9	7	public void Reset ( ) { if ( last . Value >= 100000000 ) ; this . last = new UserValueWrapper ( ) ; this . reservoir . Reset ( ) ; }	last . Value >= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Reset()	last.Value <= 100000000	0.625	10	6	public void Reset ( ) { if ( last . Value <= 100000000 ) ; this . last = new UserValueWrapper ( ) ; this . reservoir . Reset ( ) ; }	last . Value <= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.Unit.Threads != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . Unit . Threads != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.uncounted.Equals(m15Rate.uncounted)	0.76	38	12	public void Tick ( ) { if ( m1Rate . uncounted . Equals ( m15Rate . uncounted ) ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . uncounted . Equals ( m15Rate . uncounted )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile95 >= histogram.Mean	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile95 >= histogram . Mean ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile95 >= histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Calls != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.Reset()	reservoir != null	1	16	0	public void Reset ( ) { if ( reservoir != null ) ; this . last = new UserValueWrapper ( ) ; this . reservoir . Reset ( ) ; }	reservoir != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	tags != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( tags != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Action action, System.String userValue)	action != null	1	10	0	public void Time ( Action action , string userValue = null ) { if ( action != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	action != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate == Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate == Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate == Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	quantile <= 0	0.0754716981132075	4	49	public double GetValue ( double quantile ) { if ( quantile <= 0 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	quantile <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	reports.reports != null	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( reports . reports != null ) ; return extension ( this . context , this . healthStatus ) ; }	reports . reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	rateUnit != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( rateUnit != null ) ; return new TimerMetric ( reservoir ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.SamplingTypeToReservoir(Metrics.SamplingType samplingType)	samplingType != null	1	80	0	private static Reservoir SamplingTypeToReservoir ( SamplingType samplingType ) { if ( samplingType != null ) ; switch ( samplingType ) { case SamplingType . FavourRecent : return new ExponentiallyDecayingReservoir ( ) ; case SamplingType . LongTerm : return new UniformReservoir ( ) ; case SamplingType . SlidingWindow : return new SlidingWindowReservoir ( ) ; } throw new InvalidOperationException ( "Samplingtypenotimplemented" + samplingType . ToString ( ) ) ; }	samplingType != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Action action, System.String userValue)	userValue == null	1	10	0	public void Time ( Action action , string userValue = null ) { if ( userValue == null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	userValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.TimeUnit.Days != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . TimeUnit . Days != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.SamplingTypeToReservoir(Metrics.SamplingType samplingType)	Metrics.SamplingType.FavourRecent != null	1	80	0	private static Reservoir SamplingTypeToReservoir ( SamplingType samplingType ) { if ( Metrics . SamplingType . FavourRecent != null ) ; switch ( samplingType ) { case SamplingType . FavourRecent : return new ExponentiallyDecayingReservoir ( ) ; case SamplingType . LongTerm : return new UniformReservoir ( ) ; case SamplingType . SlidingWindow : return new SlidingWindowReservoir ( ) ; } throw new InvalidOperationException ( "Samplingtypenotimplemented" + samplingType . ToString ( ) ) ; }	Metrics . SamplingType . FavourRecent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.032967032967033	3	88	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.TimeUnit.Hours != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . TimeUnit . Hours != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.SamplingTypeToReservoir(Metrics.SamplingType samplingType)	Metrics.SamplingType.FavourRecent.Equals(samplingType)	1	80	0	private static Reservoir SamplingTypeToReservoir ( SamplingType samplingType ) { if ( Metrics . SamplingType . FavourRecent . Equals ( samplingType ) ) ; switch ( samplingType ) { case SamplingType . FavourRecent : return new ExponentiallyDecayingReservoir ( ) ; case SamplingType . LongTerm : return new UniformReservoir ( ) ; case SamplingType . SlidingWindow : return new SlidingWindowReservoir ( ) ; } throw new InvalidOperationException ( "Samplingtypenotimplemented" + samplingType . ToString ( ) ) ; }	Metrics . SamplingType . FavourRecent . Equals ( samplingType )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m1Rate.uncounted.Equals(count)	0.24	12	38	public void Tick ( ) { if ( m1Rate . uncounted . Equals ( count ) ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m1Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Func`1<T> action, System.String userValue)	clock != null	1	10	0	public T Time < T > ( Func < T > action , string userValue = null ) { if ( clock != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; return action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	meters.items.All(x => x != null)	1	5	0	public JsonObject ToJsonObject ( ) { if ( meters . items . All ( x => x != null ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	meters . items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	maxUserValue == null	0.795454545454545	70	18	public double GetValue ( double quantile ) { if ( maxUserValue == null ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	maxUserValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.SamplingTypeToReservoir(Metrics.SamplingType samplingType)	Metrics.SamplingType.LongTerm != null	1	80	0	private static Reservoir SamplingTypeToReservoir ( SamplingType samplingType ) { if ( Metrics . SamplingType . LongTerm != null ) ; switch ( samplingType ) { case SamplingType . FavourRecent : return new ExponentiallyDecayingReservoir ( ) ; case SamplingType . LongTerm : return new UniformReservoir ( ) ; case SamplingType . SlidingWindow : return new SlidingWindowReservoir ( ) ; } throw new InvalidOperationException ( "Samplingtypenotimplemented" + samplingType . ToString ( ) ) ; }	Metrics . SamplingType . LongTerm != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.TimeUnit.Microseconds != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.WithConfigExtension(System.Func`3<Metrics.MetricsContext, System.Func`1<Metrics.HealthStatus>, T> extension)	extension != null	1	68	0	public T WithConfigExtension < T > ( Func < MetricsContext , Func < HealthStatus > , T > extension ) { if ( extension != null ) ; return extension ( this . context , this . healthStatus ) ; }	extension != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	tags.tags == null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( tags . tags == null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.TimeUnit.Milliseconds != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile95 >= histogram.Median	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile95 >= histogram . Median ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile95 >= histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\HistogramMetric.cs	Metrics.Core.HistogramMetric.SamplingTypeToReservoir(Metrics.SamplingType samplingType)	Metrics.SamplingType.SlidingWindow != null	1	80	0	private static Reservoir SamplingTypeToReservoir ( SamplingType samplingType ) { if ( Metrics . SamplingType . SlidingWindow != null ) ; switch ( samplingType ) { case SamplingType . FavourRecent : return new ExponentiallyDecayingReservoir ( ) ; case SamplingType . LongTerm : return new UniformReservoir ( ) ; case SamplingType . SlidingWindow : return new SlidingWindowReservoir ( ) ; } throw new InvalidOperationException ( "Samplingtypenotimplemented" + samplingType . ToString ( ) ) ; }	Metrics . SamplingType . SlidingWindow != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Func`1<T> action, System.String userValue)	counter != null	1	10	0	public T Time < T > ( Func < T > action , string userValue = null ) { if ( counter != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; return action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.978021978021978	89	2	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Commands != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.TimeUnit.Minutes != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . TimeUnit . Minutes != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate != null	1	38	0	public void Tick ( ) { if ( m5Rate != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	Metrics.MetricsConfig.GlobalyDisabledMetrics == false	1	44	0	public void Dispose ( ) { if ( Metrics . MetricsConfig . GlobalyDisabledMetrics == false ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	Metrics . MetricsConfig . GlobalyDisabledMetrics == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.Percentile95	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Func`1<T> action, System.String userValue)	counter.value == 0	1	10	0	public T Time < T > ( Func < T > action , string userValue = null ) { if ( counter . value == 0 ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; return action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	quantile <= count	1	53	0	public double GetValue ( double quantile ) { if ( quantile <= count ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	quantile <= count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.Percentile98	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeMeasuringContext.cs	Metrics.Utils.TimeMeasuringContext.Dispose()	action != null	1	48	0	public void Dispose ( ) { if ( action != null ) ; if ( this . disposed ) { return ; } this . disposed = true ; this . action ( this . clock . Nanoseconds - this . start ) ; }	action != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.TimeUnit.Nanoseconds != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.021978021978022	2	89	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Commands >= 0 ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Func`1<T> action, System.String userValue)	histogram != null	1	10	0	public T Time < T > ( Func < T > action , string userValue = null ) { if ( histogram != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; return action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	meters.items.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( meters . items . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	meters . items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	Metrics.MetricsConfig.log != null	1	44	0	public void Dispose ( ) { if ( Metrics . MetricsConfig . log != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	Metrics . MetricsConfig . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.alpha >= 0	1	38	0	public void Tick ( ) { if ( m5Rate . alpha >= 0 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeMeasuringContext.cs	Metrics.Utils.TimeMeasuringContext.Dispose()	clock != null	1	48	0	public void Dispose ( ) { if ( clock != null ) ; if ( this . disposed ) { return ; } this . disposed = true ; this . action ( this . clock . Nanoseconds - this . start ) ; }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.TimeUnit.Seconds != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . TimeUnit . Seconds != null ) ; return new TimerMetric ( reservoir ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile95 >= histogram.Min	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile95 >= histogram . Min ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile95 >= histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.Percentile99	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . Percentile99 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeMeasuringContext.cs	Metrics.Utils.TimeMeasuringContext.Dispose()	disposed == false	0.916666666666667	44	4	public void Dispose ( ) { if ( disposed == false ) ; if ( this . disposed ) { return ; } this . disposed = true ; this . action ( this . clock . Nanoseconds - this . start ) ; }	disposed == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return new TimerMetric ( reservoir ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Func`1<T> action, System.String userValue)	meter != null	1	10	0	public T Time < T > ( Func < T > action , string userValue = null ) { if ( meter != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; return action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	meter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Errors != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.Percentile999	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . Percentile999 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . Percentile999
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	durationUnit != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( durationUnit != null ) ; return new TimerMetric ( reservoir ) ; }	durationUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeMeasuringContext.cs	Metrics.Utils.TimeMeasuringContext.Dispose()	start == 0	1	48	0	public void Dispose ( ) { if ( start == 0 ) ; if ( this . disposed ) { return ; } this . disposed = true ; this . action ( this . clock . Nanoseconds - this . start ) ; }	start == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Func`1<T> action, System.String userValue)	action != null	1	10	0	public T Time < T > ( Func < T > action , string userValue = null ) { if ( action != null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; return action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	action != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.alpha >= count.value	0.0526315789473684	2	36	public void Tick ( ) { if ( m5Rate . alpha >= count . value ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	durationUnit.Equals(Metrics.TimeUnit.Milliseconds)	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( durationUnit . Equals ( Metrics . TimeUnit . Milliseconds ) ) ; return new TimerMetric ( reservoir ) ; }	durationUnit . Equals ( Metrics . TimeUnit . Milliseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<System.Double> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	14	0	public void Gauge ( string name , Func < double > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . MetricTags . None != null ) ; this . Gauge ( name , ( ) => this . metricsBuilder . BuildGauge ( name , unit , valueProvider ) , unit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.SampleSize	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . SampleSize ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . SampleSize
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsBuilder.cs	Metrics.Core.DefaultMetricsBuilder.BuildTimer(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.Sampling.Reservoir reservoir)	reservoir != null	1	5	0	public TimerImplementation BuildTimer ( string name , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , Reservoir reservoir ) { if ( reservoir != null ) ; return new TimerMetric ( reservoir ) ; }	reservoir != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	timers.Count == 1	1	5	0	public JsonObject ToJsonObject ( ) { if ( timers . Count == 1 ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	timers . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FifteenMinuteRate <= Histogram.StdDev	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FifteenMinuteRate <= Histogram . StdDev ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FifteenMinuteRate <= Histogram . StdDev
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	sourceUnit != null	1	100	0	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( sourceUnit != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	sourceUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Time(System.Func`1<T> action, System.String userValue)	userValue == null	1	10	0	public T Time < T > ( Func < T > action , string userValue = null ) { if ( userValue == null ) ; var start = this . clock . Nanoseconds ; try { counter . Increment ( ) ; return action ( ) ; } finally { counter . Decrement ( ) ; Record ( this . clock . Nanoseconds - start , TimeUnit . Nanoseconds , userValue ) ; } }	userValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Events != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	context != null	1	44	0	public void Dispose ( ) { if ( context != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	context != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	Metrics.TimeUnit.Days != null	1	100	0	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( Metrics . TimeUnit . Days != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformSnapshot.cs	Metrics.Sampling.UniformSnapshot.GetValue(System.Double quantile)	quantile <= values	0.0188679245283019	1	52	public double GetValue ( double quantile ) { if ( quantile <= values ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } double pos = quantile * ( values . Length + 1 ) ; int index = ( int ) pos ; if ( index < 1 ) { return values [ 0 ] ; } if ( index >= values . Length ) { return values [ values . Length - 1 ] ; } double lower = values [ index - 1 ] ; double upper = values [ index ] ; return lower + ( pos - Math . Floor ( pos ) ) * ( upper - lower ) ; }	quantile <= values
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	Metrics.TimeUnit.Hours != null	1	100	0	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( Metrics . TimeUnit . Hours != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.alpha <= count.value	0.631578947368421	24	14	public void Tick ( ) { if ( m5Rate . alpha <= count . value ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.String userValue)	clock != null	1	43	0	public TimerContext NewContext ( string userValue = null ) { if ( clock != null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , ( t ) => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; } ) ; }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile95 >= histogram.Percentile75	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile95 >= histogram . Percentile75 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile95 >= histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	maxUserValue != null	0.0681818181818182	6	82	public double GetValue ( double quantile ) { if ( maxUserValue != null ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	maxUserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate >= Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Items != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	childContexts != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( childContexts != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	Metrics.TimeUnit.Microseconds != null	1	100	0	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( Metrics . TimeUnit . Microseconds != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	healthStatus != null	1	44	0	public void Dispose ( ) { if ( healthStatus != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonObject()	timers.All(x => x != null)	1	5	0	public JsonObject ToJsonObject ( ) { if ( timers . All ( x => x != null ) ) ; return new JsonObject ( ToJsonProperties ( ) ) ; }	timers . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.ErrorException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	formatParams != null	0.333333333333333	8	16	public static void ErrorException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( formatParams != null ) ; if ( logger . IsErrorEnabled ( ) ) { logger . Log ( LogLevel . Error , message . AsFunc ( ) , exception , formatParams ) ; } }	formatParams != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . KiloBytes != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.String userValue)	counter != null	1	43	0	public TimerContext NewContext ( string userValue = null ) { if ( counter != null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , ( t ) => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; } ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	Metrics.TimeUnit.Milliseconds != null	1	100	0	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	isDisabled == false	1	44	0	public void Dispose ( ) { if ( isDisabled == false ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . MegaBytes != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	Metrics.TimeUnit.Minutes != null	1	100	0	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( Metrics . TimeUnit . Minutes != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.String userValue)	counter.value == 0	1	43	0	public TimerContext NewContext ( string userValue = null ) { if ( counter . value == 0 ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , ( t ) => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; } ) ; }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	childContexts.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( childContexts . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	childContexts . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile98 >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile98 >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile98 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.alpha >= m15Rate.alpha	1	38	0	public void Tick ( ) { if ( m5Rate . alpha >= m15Rate . alpha ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds != null	1	100	0	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	listener != null	0.795454545454545	35	9	public void Dispose ( ) { if ( listener != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	listener != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . None != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	isDisabled == false	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( isDisabled == false ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	alpha >= 0	1	97	0	public void Update ( long value ) { if ( alpha >= 0 ) ; uncounted . Add ( value ) ; }	alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.String userValue)	histogram != null	1	43	0	public TimerContext NewContext ( string userValue = null ) { if ( histogram != null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , ( t ) => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; } ) ; }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	Metrics.TimeUnit.Seconds != null	1	100	0	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( Metrics . TimeUnit . Seconds != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	childContexts.childContexts.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( childContexts . childContexts . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	childContexts . childContexts . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.alpha <= m15Rate.interval	1	38	0	public void Tick ( ) { if ( m5Rate . alpha <= m15Rate . interval ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	initialized == false	0.793814432989691	77	20	public void Update ( long value ) { if ( initialized == false ) ; uncounted . Add ( value ) ; }	initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	Metrics.TimeUnit.Seconds.Equals(sourceUnit)	0.02	2	98	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( Metrics . TimeUnit . Seconds . Equals ( sourceUnit ) ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	Metrics . TimeUnit . Seconds . Equals ( sourceUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	targetUnit != null	1	100	0	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( targetUnit != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	targetUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.None.Equals(unit)	0.010989010989011	1	90	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . None . Equals ( unit ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . None . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	metricsBuilder != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( metricsBuilder != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	minUserValue == null	0.795454545454545	70	18	public double GetValue ( double quantile ) { if ( minUserValue == null ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	minUserValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile98 <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile98 <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile98 <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	listener.cts != null	1	44	0	public void Dispose ( ) { if ( listener . cts != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	listener . cts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.alpha <= m1Rate.alpha	1	38	0	public void Tick ( ) { if ( m5Rate . alpha <= m1Rate . alpha ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . alpha <= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	interval >= 0	1	97	0	public void Update ( long value ) { if ( interval >= 0 ) ; uncounted . Add ( value ) ; }	interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.String userValue)	meter != null	1	43	0	public TimerContext NewContext ( string userValue = null ) { if ( meter != null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , ( t ) => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; } ) ; }	meter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Percent != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.Percentile95	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	childContexts.counters.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( childContexts . counters . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	childContexts . counters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.alpha <= m1Rate.interval	1	38	0	public void Tick ( ) { if ( m5Rate . alpha <= m1Rate . interval ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . alpha <= m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	targetUnit.Equals(Metrics.TimeUnit.Nanoseconds)	0.02	2	98	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( targetUnit . Equals ( Metrics . TimeUnit . Nanoseconds ) ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	targetUnit . Equals ( Metrics . TimeUnit . Nanoseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile98 >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile98 >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile98 >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.initialized == false	0.289473684210526	11	27	public void Tick ( ) { if ( m5Rate . initialized == false ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.ErrorException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	formatParams.All(x => x != null)	1	24	0	public static void ErrorException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( formatParams . All ( x => x != null ) ) ; if ( logger . IsErrorEnabled ( ) ) { logger . Log ( LogLevel . Error , message . AsFunc ( ) , exception , formatParams ) ; } }	formatParams . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	childContexts.environment.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( childContexts . environment . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	childContexts . environment . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.Percentile98	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.String userValue)	userValue == null	1	43	0	public TimerContext NewContext ( string userValue = null ) { if ( userValue == null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , ( t ) => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; } ) ; }	userValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	value != null	0.58	58	42	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( value != null ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	registry != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( registry != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile98 >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile98 >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile98 >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	interval >= alpha	1	97	0	public void Update ( long value ) { if ( interval >= alpha ) ; uncounted . Add ( value ) ; }	interval >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	minUserValue != null	0.0681818181818182	6	82	public double GetValue ( double quantile ) { if ( minUserValue != null ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	minUserValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	childContexts.gauges.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( childContexts . gauges . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	childContexts . gauges . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Requests != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	listener.healthStatus != null	1	44	0	public void Dispose ( ) { if ( listener . healthStatus != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	listener . healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.Action`1<System.TimeSpan> finalAction, System.String userValue)	clock != null	1	6	0	public TimerContext NewContext ( Action < TimeSpan > finalAction , string userValue = null ) { if ( clock != null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , t => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; finalAction ( TimeSpan . FromMilliseconds ( TimeUnit . Nanoseconds . ToMilliseconds ( t ) ) ) ; } ) ; }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	value >= 0	0.91	91	9	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( value >= 0 ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	rate != null	1	97	0	public void Update ( long value ) { if ( rate != null ) ; uncounted . Add ( value ) ; }	rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.Percentile99	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . Percentile99 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	value >= 1	0.1	10	90	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( value >= 1 ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.interval >= 0	1	38	0	public void Tick ( ) { if ( m5Rate . interval >= 0 ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	value <= 100000000	0.19	19	81	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( value <= 100000000 ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	value <= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.Percentile999	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . Percentile999 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . Percentile999
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights.Count == 5	0.238636363636364	21	67	public double GetValue ( double quantile ) { if ( normWeights . Count == 5 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights . Count == 5
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.SampleSize	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . SampleSize ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . SampleSize
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	name != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( name != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	value <= 1000000000	0.16	16	84	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( value <= 1000000000 ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	value <= 1000000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile98 >= histogram.Mean	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile98 >= histogram . Mean ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile98 >= histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.Action`1<System.TimeSpan> finalAction, System.String userValue)	counter != null	1	6	0	public TimerContext NewContext ( Action < TimeSpan > finalAction , string userValue = null ) { if ( counter != null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , t => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; finalAction ( TimeSpan . FromMilliseconds ( TimeUnit . Nanoseconds . ToMilliseconds ( t ) ) ) ; } ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Requests.Equals(unit)	0.021978021978022	2	89	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Requests . Equals ( unit ) ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Requests . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	rate.value == 0	0.793814432989691	77	20	public void Update ( long value ) { if ( rate . value == 0 ) ; uncounted . Add ( value ) ; }	rate . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	childContexts.histograms.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( childContexts . histograms . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	childContexts . histograms . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Results != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	listener.healthStatus.Equals(healthStatus)	1	44	0	public void Dispose ( ) { if ( listener . healthStatus . Equals ( healthStatus ) ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	listener . healthStatus . Equals ( healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Convert(Metrics.TimeUnit sourceUnit, Metrics.TimeUnit targetUnit, System.Int64 value)	value <= 100	0.01	1	99	public static long Convert ( this TimeUnit sourceUnit , TimeUnit targetUnit , long value ) { if ( value <= 100 ) ; if ( sourceUnit == targetUnit ) { return value ; } return System . Convert . ToInt64 ( value * sourceUnit . ScalingFactorFor ( targetUnit ) ) ; }	value <= 100
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Histogram.StdDev	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Histogram . StdDev ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Histogram . StdDev
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.Action`1<System.TimeSpan> finalAction, System.String userValue)	counter.value == 0	1	6	0	public TimerContext NewContext ( Action < TimeSpan > finalAction , string userValue = null ) { if ( counter . value == 0 ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , t => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; finalAction ( TimeSpan . FromMilliseconds ( TimeUnit . Nanoseconds . ToMilliseconds ( t ) ) ) ; } ) ; }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.interval >= count.value	1	38	0	public void Tick ( ) { if ( m5Rate . interval >= count . value ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.Action`1<System.TimeSpan> finalAction, System.String userValue)	histogram != null	1	6	0	public TimerContext NewContext ( Action < TimeSpan > finalAction , string userValue = null ) { if ( histogram != null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , t => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; finalAction ( TimeSpan . FromMilliseconds ( TimeUnit . Nanoseconds . ToMilliseconds ( t ) ) ) ; } ) ; }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.FiveMinuteRate <= Rate.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . FiveMinuteRate <= Rate . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . FiveMinuteRate <= Rate . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	unit != null	1	100	0	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( unit != null ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	childContexts.meters.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( childContexts . meters . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	childContexts . meters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items.Count == 1	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items . Count == 1 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Days != null	1	100	0	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Days != null ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile98 >= histogram.Median	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile98 >= histogram . Median ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile98 >= histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	childContexts.timers.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( childContexts . timers . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	childContexts . timers . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	rate.value >= 0	1	97	0	public void Update ( long value ) { if ( rate . value >= 0 ) ; uncounted . Add ( value ) ; }	rate . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Hours != null	1	100	0	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Hours != null ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	listener.httpListener != null	1	44	0	public void Dispose ( ) { if ( listener . httpListener != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	listener . httpListener != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Threads != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.Action`1<System.TimeSpan> finalAction, System.String userValue)	meter != null	1	6	0	public TimerContext NewContext ( Action < TimeSpan > finalAction , string userValue = null ) { if ( meter != null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , t => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; finalAction ( TimeSpan . FromMilliseconds ( TimeUnit . Nanoseconds . ToMilliseconds ( t ) ) ) ; } ) ; }	meter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights.Count == 2	0.0681818181818182	6	82	public double GetValue ( double quantile ) { if ( normWeights . Count == 2 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights . Count == 2
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Microseconds != null	1	100	0	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.interval >= m15Rate.alpha	1	38	0	public void Tick ( ) { if ( m5Rate . interval >= m15Rate . alpha ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items.Count == Histogram.Percentile95	0.489795918367347	24	25	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items . Count == Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items . Count == Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	valueProvider != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( valueProvider != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	valueProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	listener.metricsDataProvider != null	1	44	0	public void Dispose ( ) { if ( listener . metricsDataProvider != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	listener . metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.Action`1<System.TimeSpan> finalAction, System.String userValue)	finalAction != null	1	6	0	public TimerContext NewContext ( Action < TimeSpan > finalAction , string userValue = null ) { if ( finalAction != null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , t => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; finalAction ( TimeSpan . FromMilliseconds ( TimeUnit . Nanoseconds . ToMilliseconds ( t ) ) ) ; } ) ; }	finalAction != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items.Count == Histogram.Percentile98	0.244897959183673	12	37	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items . Count == Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items . Count == Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Milliseconds != null	1	100	0	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile98 >= histogram.Min	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile98 >= histogram . Min ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile98 >= histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Milliseconds.Equals(unit)	0.07	7	93	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Milliseconds . Equals ( unit ) ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	Metrics . TimeUnit . Milliseconds . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.NewContext(System.Action`1<System.TimeSpan> finalAction, System.String userValue)	userValue == null	1	6	0	public TimerContext NewContext ( Action < TimeSpan > finalAction , string userValue = null ) { if ( userValue == null ) ; counter . Increment ( ) ; return new TimeMeasuringContext ( this . clock , t => { counter . Decrement ( ) ; Record ( t , TimeUnit . Nanoseconds , userValue ) ; finalAction ( TimeSpan . FromMilliseconds ( TimeUnit . Nanoseconds . ToMilliseconds ( t ) ) ) ; } ) ; }	userValue == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	rate.value <= 0	0.793814432989691	77	20	public void Update ( long value ) { if ( rate . value <= 0 ) ; uncounted . Add ( value ) ; }	rate . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	counters.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( counters . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	counters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	tags != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( tags != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile98 >= histogram.Percentile75	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile98 >= histogram . Percentile75 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile98 >= histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Minutes != null	1	100	0	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Minutes != null ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items.Count == Histogram.Percentile75	0.26530612244898	13	36	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items . Count == Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items . Count == Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights.Count == 1028	0.113636363636364	10	78	public double GetValue ( double quantile ) { if ( normWeights . Count == 1028 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights . Count == 1028
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.interval == m15Rate.interval	1	38	0	public void Tick ( ) { if ( m5Rate . interval == m15Rate . interval ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	unit != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( unit != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	tags.tags == null	0.945054945054945	86	5	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( tags . tags == null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	counters.All(x => x != null)	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( counters . All ( x => x != null ) ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	counters . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Reset()	clock != null	1	10	0	public void Reset ( ) { if ( clock != null ) ; this . meter . Reset ( ) ; this . histogram . Reset ( ) ; }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	listener.prefixPath != null	1	44	0	public void Dispose ( ) { if ( listener . prefixPath != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	listener . prefixPath != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds != null	1	100	0	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	tags.tags.Count == 1	0.0879120879120879	8	83	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( tags . tags . Count == 1 ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	tags . tags . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Reset()	counter != null	1	10	0	public void Reset ( ) { if ( counter != null ) ; this . meter . Reset ( ) ; this . histogram . Reset ( ) ; }	counter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Seconds != null	1	100	0	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Seconds != null ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.interval >= m1Rate.alpha	1	38	0	public void Tick ( ) { if ( m5Rate . interval >= m1Rate . alpha ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	rate.value <= alpha	1	97	0	public void Update ( long value ) { if ( rate . value <= alpha ) ; uncounted . Add ( value ) ; }	rate . value <= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= ActiveSessions	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	rate.value <= interval	1	97	0	public void Update ( long value ) { if ( rate . value <= interval ) ; uncounted . Add ( value ) ; }	rate . value <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile98 >= histogram.Percentile95	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile98 >= histogram . Percentile95 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile98 >= histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.interval == m1Rate.interval	1	38	0	public void Tick ( ) { if ( m5Rate . interval == m1Rate . interval ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . interval == m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Seconds.Equals(unit)	0.35	35	65	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Seconds . Equals ( unit ) ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	Metrics . TimeUnit . Seconds . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	uncounted != null	1	97	0	public void Update ( long value ) { if ( uncounted != null ) ; uncounted . Add ( value ) ; }	uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.659340659340659	60	31	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . MetricTags . empty != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( unit . Name != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	value >= 1	0.71	71	29	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( value >= 1 ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights.Count == 1	0.102272727272727	9	79	public double GetValue ( double quantile ) { if ( normWeights . Count == 1 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	listener.processingTask != null	0.681818181818182	30	14	public void Dispose ( ) { if ( listener . processingTask != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	listener . processingTask != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	counters.items.All(x => x != null)	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( counters . items . All ( x => x != null ) ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	counters . items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	value >= 0	0.3	30	70	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( value >= 0 ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	listener.processingTask == null	0.159090909090909	7	37	public void Dispose ( ) { if ( listener . processingTask == null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	listener . processingTask == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Reset()	counter.value == 0	1	10	0	public void Reset ( ) { if ( counter . value == 0 ) ; this . meter . Reset ( ) ; this . histogram . Reset ( ) ; }	counter . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Count	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.interval >= m5Rate.alpha	1	38	0	public void Tick ( ) { if ( m5Rate . interval >= m5Rate . alpha ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . interval >= m5Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	reports != null	1	44	0	public void Dispose ( ) { if ( reports != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 100000000	0.26	26	74	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( value <= 100000000 ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	value <= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Counter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	91	0	public Counter Counter < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : CounterImplementation { if ( Metrics . MetricTags . None != null ) ; return this . counters . GetOrAdd ( name , ( ) => { T counter = builder ( ) ; return Tuple . Create ( ( Counter ) counter , new CounterValueSource ( name , counter , unit , tags ) ) ; } ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Reset()	histogram != null	1	10	0	public void Reset ( ) { if ( histogram != null ) ; this . meter . Reset ( ) ; this . histogram . Reset ( ) ; }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Bytes != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.rate != null	1	38	0	public void Tick ( ) { if ( m5Rate . rate != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	counters.items.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( counters . items . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	counters . items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 100	0.01	1	99	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( value <= 100 ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	value <= 100
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	uncounted.value == 0	0.402061855670103	39	58	public void Update ( long value ) { if ( uncounted . value == 0 ) ; uncounted . Add ( value ) ; }	uncounted . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	uncounted.value >= 0	1	97	0	public void Update ( long value ) { if ( uncounted . value >= 0 ) ; uncounted . Add ( value ) ; }	uncounted . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Tick()	m5Rate.uncounted != null	1	38	0	public void Tick ( ) { if ( m5Rate . uncounted != null ) ; this . m1Rate . Tick ( ) ; this . m5Rate . Tick ( ) ; this . m15Rate . Tick ( ) ; }	m5Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\TimerMetric.cs	Metrics.Core.TimerMetric.Reset()	meter != null	1	10	0	public void Reset ( ) { if ( meter != null ) ; this . meter . Reset ( ) ; this . histogram . Reset ( ) ; }	meter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToNanoseconds(Metrics.TimeUnit unit, System.Int64 value)	value != null	0.08	8	92	public static long ToNanoseconds ( this TimeUnit unit , long value ) { if ( value != null ) ; return Convert ( unit , TimeUnit . Nanoseconds , value ) ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.LastValue	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	uncounted.value <= 0	0.402061855670103	39	58	public void Update ( long value ) { if ( uncounted . value <= 0 ) ; uncounted . Add ( value ) ; }	uncounted . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	unit != null	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( unit != null ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights.Count == 50	0.0113636363636364	1	87	public double GetValue ( double quantile ) { if ( normWeights . Count == 50 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights . Count == 50
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	reports.healthStatus != null	1	44	0	public void Dispose ( ) { if ( reports . healthStatus != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	reports . healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Calls != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Days != null	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Days != null ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	count != null	1	96	0	public void Mark ( long count ) { if ( count != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Max	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	counters != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( counters != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	counters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	count.value == 0	0.291666666666667	28	68	public void Mark ( long count ) { if ( count . value == 0 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	count . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	count != null	1	10	0	public void Update ( long value , string userValue = null ) { if ( count != null ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Hours != null	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Hours != null ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Microseconds != null	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	environment != null	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( environment != null ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	environment != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Mean	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Commands != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Milliseconds != null	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	uncounted.value <= 1	0.494845360824742	48	49	public void Update ( long value ) { if ( uncounted . value <= 1 ) ; uncounted . Add ( value ) ; }	uncounted . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights != null	0.738636363636364	65	23	public double GetValue ( double quantile ) { if ( normWeights != null ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	count.value >= 0	1	10	0	public void Update ( long value , string userValue = null ) { if ( count . value >= 0 ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	count . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	counters.metrics != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( counters . metrics != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	counters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	reports.healthStatus.Equals(healthStatus)	0.505747126436782	44	43	public void Dispose ( ) { if ( reports . healthStatus . Equals ( healthStatus ) ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	reports . healthStatus . Equals ( healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	count.value >= 0	1	96	0	public void Mark ( long count ) { if ( count . value >= 0 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	count . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	gauges.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( gauges . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	gauges . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Minutes != null	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Minutes != null ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Errors != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Median	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 >= histogram.Mean	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 >= histogram . Mean ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 >= histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	gauges.All(x => x != null)	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( gauges . All ( x => x != null ) ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	gauges . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.WarnException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	logger != null	1	21	0	public static void WarnException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( logger != null ) ; if ( logger . IsWarnEnabled ( ) ) { logger . Log ( LogLevel . Warn , message . AsFunc ( ) , exception , formatParams ) ; } }	logger != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds != null	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	count.value <= 1	1	10	0	public void Update ( long value , string userValue = null ) { if ( count . value <= 1 ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	count . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 >= histogram.Median	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 >= histogram . Median ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 >= histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Seconds != null	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Seconds != null ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	uncounted.value <= alpha	0.402061855670103	39	58	public void Update ( long value ) { if ( uncounted . value <= alpha ) ; uncounted . Add ( value ) ; }	uncounted . value <= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights >= 0	0.0113636363636364	1	87	public double GetValue ( double quantile ) { if ( normWeights >= 0 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	uncounted.value <= interval	1	97	0	public void Update ( long value ) { if ( uncounted . value <= interval ) ; uncounted . Add ( value ) ; }	uncounted . value <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	gauges.value.All(x => x >= 0)	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( gauges . value . All ( x => x >= 0 ) ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	gauges . value . All ( x => x >= 0 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Min	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	gauges != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( gauges != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	gauges != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Events != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	values.Count == 100	1	10	0	public void Update ( long value , string userValue = null ) { if ( values . Count == 100 ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	values . Count == 100
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	uncounted.value >= rate.value	0.0309278350515464	3	94	public void Update ( long value ) { if ( uncounted . value >= rate . value ) ; uncounted . Add ( value ) ; }	uncounted . value >= rate . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	count.value <= 0	0.291666666666667	28	68	public void Mark ( long count ) { if ( count . value <= 0 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	count . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	reports.healthStatus.Equals(listener.healthStatus)	0.505747126436782	44	43	public void Dispose ( ) { if ( reports . healthStatus . Equals ( listener . healthStatus ) ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	reports . healthStatus . Equals ( listener . healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights >= count	0.0113636363636364	1	87	public double GetValue ( double quantile ) { if ( normWeights >= count ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights >= count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	value >= 0	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( value >= 0 ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	values != null	1	10	0	public void Update ( long value , string userValue = null ) { if ( values != null ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	values != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	count.value <= 1	0.354166666666667	34	62	public void Mark ( long count ) { if ( count . value <= 1 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	count . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	reports.metricsDataProvider != null	1	44	0	public void Dispose ( ) { if ( reports . metricsDataProvider != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	reports . metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMicroseconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 10000	1	7	0	public static long ToMicroseconds ( this TimeUnit unit , long value ) { if ( value <= 10000 ) ; return Convert ( unit , TimeUnit . Microseconds , value ) ; }	value <= 10000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	uncounted.value <= rate.value	0.0618556701030928	6	91	public void Update ( long value ) { if ( uncounted . value <= rate . value ) ; uncounted . Add ( value ) ; }	uncounted . value <= rate . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Percentile75	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	gauges.value.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( gauges . value . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	gauges . value . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	gauges.metrics != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( gauges . metrics != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	gauges . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 >= histogram.Min	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 >= histogram . Min ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 >= histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Items != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	unit != null	1	31	0	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( unit != null ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate != null	1	96	0	public void Mark ( long count ) { if ( m15Rate != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	values.All(x => x == null)	1	10	0	public void Update ( long value , string userValue = null ) { if ( values . All ( x => x == null ) ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	values . All ( x => x == null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate.alpha >= 0	1	96	0	public void Mark ( long count ) { if ( m15Rate . alpha >= 0 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	reports.metricsDataProvider.Equals(listener.metricsDataProvider)	1	44	0	public void Dispose ( ) { if ( reports . metricsDataProvider . Equals ( listener . metricsDataProvider ) ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	reports . metricsDataProvider . Equals ( listener . metricsDataProvider )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . KiloBytes != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights.All(x => x == 1)	0.363636363636364	32	56	public double GetValue ( double quantile ) { if ( normWeights . All ( x => x == 1 ) ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights . All ( x => x == 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	value == 1	0.618556701030928	60	37	public void Update ( long value ) { if ( value == 1 ) ; uncounted . Add ( value ) ; }	value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Days != null	1	31	0	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Days != null ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	histograms.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( histograms . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	histograms . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . MegaBytes != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Percentile95	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.WarnException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	message != null	1	21	0	public static void WarnException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( message != null ) ; if ( logger . IsWarnEnabled ( ) ) { logger . Log ( LogLevel . Warn , message . AsFunc ( ) , exception , formatParams ) ; } }	message != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	values.UserValue.All(x => x != null)	1	10	0	public void Update ( long value , string userValue = null ) { if ( values . UserValue . All ( x => x != null ) ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	values . UserValue . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.Dispose()	reports.reports != null	1	44	0	public void Dispose ( ) { if ( reports . reports != null ) ; this . reports . Dispose ( ) ; using ( this . listener ) { } this . listener = null ; }	reports . reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	values.UserValue.Count == 100	1	10	0	public void Update ( long value , string userValue = null ) { if ( values . UserValue . Count == 100 ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	values . UserValue . Count == 100
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 >= histogram.Percentile75	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 >= histogram . Percentile75 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 >= histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Hours != null	1	31	0	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Hours != null ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights.All(x => x >= 0)	0.897727272727273	79	9	public double GetValue ( double quantile ) { if ( normWeights . All ( x => x >= 0 ) ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights . All ( x => x >= 0 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	histograms != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( histograms != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	histograms != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	values.Value.All(x => x >= 0)	1	10	0	public void Update ( long value , string userValue = null ) { if ( values . Value . All ( x => x >= 0 ) ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	values . Value . All ( x => x >= 0 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Microseconds != null	1	31	0	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . None != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Percentile98	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	normWeights.All(x => x >= 1)	0.102272727272727	9	79	public double GetValue ( double quantile ) { if ( normWeights . All ( x => x >= 1 ) ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	normWeights . All ( x => x >= 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate.alpha >= count.value	0.291666666666667	28	68	public void Mark ( long count ) { if ( m15Rate . alpha >= count . value ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 >= histogram.Percentile95	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 >= histogram . Percentile95 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 >= histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	Metrics.MetricsConfig.GlobalyDisabledMetrics == false	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( Metrics . MetricsConfig . GlobalyDisabledMetrics == false ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	Metrics . MetricsConfig . GlobalyDisabledMetrics == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Milliseconds != null	1	31	0	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Percent != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	value >= 1	0.938144329896907	91	6	public void Update ( long value ) { if ( value >= 1 ) ; uncounted . Add ( value ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate.initialized == false	0.71875	69	27	public void Mark ( long count ) { if ( m15Rate . initialized == false ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	histograms.All(x => x != null)	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( histograms . All ( x => x != null ) ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	histograms . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	values.Value.Count == 100	1	10	0	public void Update ( long value , string userValue = null ) { if ( values . Value . Count == 100 ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	values . Value . Count == 100
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	Metrics.MetricsConfig.log != null	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( Metrics . MetricsConfig . log != null ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	Metrics . MetricsConfig . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Percentile99	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Percentile99 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	histograms.metrics != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( histograms . metrics != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	histograms . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Minutes != null	1	31	0	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Minutes != null ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	meters.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( meters . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	meters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.Percentile999	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . Percentile999 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . Percentile999
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	quantiles.All(x => x >= 0)	1	88	0	public double GetValue ( double quantile ) { if ( quantiles . All ( x => x >= 0 ) ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	quantiles . All ( x => x >= 0 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	value >= -1	0.154639175257732	15	82	public void Update ( long value ) { if ( value >= - 1 ) ; uncounted . Add ( value ) ; }	value >= - 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Requests != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile99 >= histogram.Percentile98	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile99 >= histogram . Percentile98 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile99 >= histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.WarnException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	message.ToString().Equals("Unable to start HTTP Listener. Sleeping for {0} sec and retrying {1} more times")	1	21	0	public static void WarnException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( message . ToString ( ) . Equals ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" ) ) ; if ( logger . IsWarnEnabled ( ) ) { logger . Log ( LogLevel . Warn , message . AsFunc ( ) , exception , formatParams ) ; } }	message . ToString ( ) . Equals ( "UnabletostartHTTPListener.Sleepingfor{0}secandretrying{1}moretimes" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	value >= 1	1	10	0	public void Update ( long value , string userValue = null ) { if ( value >= 1 ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	meters != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( meters != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	meters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.SampleSize	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . SampleSize ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . SampleSize
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate.interval >= 0	1	96	0	public void Mark ( long count ) { if ( m15Rate . interval >= 0 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Minutes.Equals(unit)	0.580645161290323	18	13	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Minutes . Equals ( unit ) ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	Metrics . TimeUnit . Minutes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\WeightedSnapshot.cs	Metrics.Sampling.WeightedSnapshot.GetValue(System.Double quantile)	quantile >= 0	1	88	0	public double GetValue ( double quantile ) { if ( quantile >= 0 ) ; if ( quantile < 0.0 || quantile > 1.0 || double . IsNaN ( quantile ) ) { throw new ArgumentException ( string . Format ( "{0}isnotin[0..1]" , quantile ) ) ; } if ( this . Size == 0 ) { return 0 ; } int posx = Array . BinarySearch ( this . quantiles , quantile ) ; if ( posx < 0 ) { posx = ~ posx - 1 ; } if ( posx < 1 ) { return this . values [ 0 ] ; } if ( posx >= this . values . Length ) { return values [ values . Length - 1 ] ; } return values [ posx ] ; }	quantile >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Results != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	context != null	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( context != null ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	context != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	value >= count.value	1	10	0	public void Update ( long value , string userValue = null ) { if ( value >= count . value ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	value >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	value >= 0	0.587628865979381	57	40	public void Update ( long value ) { if ( value >= 0 ) ; uncounted . Add ( value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	Metrics.MetricsErrorHandler.errorMeter != null	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( Metrics . MetricsErrorHandler . errorMeter != null ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	Metrics . MetricsErrorHandler . errorMeter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	healthStatus != null	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( healthStatus != null ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	value <= 1	0.649484536082474	63	34	public void Update ( long value ) { if ( value <= 1 ) ; uncounted . Add ( value ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds != null	1	31	0	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	meters.All(x => x != null)	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( meters . All ( x => x != null ) ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	meters . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Histogram.StdDev	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Histogram . StdDev ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Histogram . StdDev
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	Metrics.MetricsErrorHandler.handler != null	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( Metrics . MetricsErrorHandler . handler != null ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	Metrics . MetricsErrorHandler . handler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Threads != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Sampling\UniformReservoir.cs	Metrics.Sampling.UniformReservoir.Update(System.Int64 value, System.String userValue)	userValue != null	1	10	0	public void Update ( long value , string userValue = null ) { if ( userValue != null ) ; long c = this . count . Increment ( ) ; if ( c <= this . values . Length ) { values [ ( int ) c - 1 ] = new UserValueWrapper ( value , userValue ) ; } else { long r = NextLong ( c ) ; if ( r < values . Length ) { values [ ( int ) r ] = new UserValueWrapper ( value , userValue ) ; } } }	userValue != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate.interval >= count.value	1	96	0	public void Mark ( long count ) { if ( m15Rate . interval >= count . value ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	meters.metrics != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( meters . metrics != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	meters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	Metrics.MetricsErrorHandler.IsMono == false	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( Metrics . MetricsErrorHandler . IsMono == false ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	Metrics . MetricsErrorHandler . IsMono == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	tags != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( tags != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	Metrics.MetricsErrorHandler.log != null	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( Metrics . MetricsErrorHandler . log != null ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	Metrics . MetricsErrorHandler . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds.Equals(unit)	0.129032258064516	4	27	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Nanoseconds . Equals ( unit ) ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	Metrics . TimeUnit . Nanoseconds . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	isDisabled == false	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( isDisabled == false ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	value >= alpha	0.948453608247423	92	5	public void Update ( long value ) { if ( value >= alpha ) ; uncounted . Add ( value ) ; }	value >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	meters.items.All(x => x != null)	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( meters . items . All ( x => x != null ) ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	meters . items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Rate.Count	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Rate . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Rate . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	listener == null	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( listener == null ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	listener == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	handlers != null	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( handlers != null ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	handlers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Seconds != null	1	31	0	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Seconds != null ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	handlers.m_headList != null	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( handlers . m_headList != null ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	handlers . m_headList != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	tags.tags == null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( tags . tags == null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate.interval >= m15Rate.alpha	1	96	0	public void Mark ( long count ) { if ( m15Rate . interval >= m15Rate . alpha ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	timers != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( timers != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	timers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	meters.items.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( meters . items . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	meters . items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	value == 1	0.580645161290323	18	13	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( value == 1 ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	handlers.m_locals != null	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( handlers . m_locals != null ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	handlers . m_locals != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	timers.metrics != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( timers . metrics != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	timers . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.WarnException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	exception != null	1	21	0	public static void WarnException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( exception != null ) ; if ( logger . IsWarnEnabled ( ) ) { logger . Log ( LogLevel . Warn , message . AsFunc ( ) , exception , formatParams ) ; } }	exception != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items >= Rate.FifteenMinuteRate	0.0204081632653061	1	48	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items >= Rate . FifteenMinuteRate ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items >= Rate . FifteenMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	handlers.m_needSync == false	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( handlers . m_needSync == false ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	handlers . m_needSync == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	value <= interval	1	97	0	public void Update ( long value ) { if ( value <= interval ) ; uncounted . Add ( value ) ; }	value <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	value == 100000000	0.129032258064516	4	27	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( value == 100000000 ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	value == 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	reports != null	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( reports != null ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= histogram.Mean	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= histogram . Mean ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate.rate != null	1	96	0	public void Mark ( long count ) { if ( m15Rate . rate != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	timers.Count == 1	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( timers . Count == 1 ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	timers . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	handlers.m_serializationArray == null	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( handlers . m_serializationArray == null ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	handlers . m_serializationArray == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	value >= 1	0.741935483870968	23	8	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( value >= 1 ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Gauge(System.String name, System.Func`1<Metrics.MetricData.MetricValueProvider`1<System.Double>> valueProvider, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	14	0	public void Gauge ( string name , Func < MetricValueProvider < double > > valueProvider , Unit unit , MetricTags tags ) { if ( Metrics . MetricTags . None != null ) ; this . registry . Gauge ( name , valueProvider , unit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("Errors")	0.227272727272727	20	68	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name . ToString ( ) . Equals ( "Errors" ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "Errors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	value >= rate.value	0.247422680412371	24	73	public void Update ( long value ) { if ( value >= rate . value ) ; uncounted . Add ( value ) ; }	value >= rate . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonMetricsContext.cs	Metrics.Json.JsonMetricsContext.ToJsonProperties()	timers.All(x => x != null)	1	5	0	private IEnumerable < JsonProperty > ToJsonProperties ( ) { if ( timers . All ( x => x != null ) ) ; if ( ! string . IsNullOrEmpty ( this . Version ) ) { yield return new JsonProperty ( "Version" , this . Version ) ; } if ( this . Timestamp != default ( DateTime ) ) { yield return new JsonProperty ( "Timestamp" , Clock . FormatTimestamp ( this . Timestamp ) ) ; } if ( this . Environment . Count > 0 ) { yield return new JsonProperty ( "Environment" , this . Environment . Select ( e => new JsonProperty ( e . Key , e . Value ) ) ) ; } if ( ! string . IsNullOrEmpty ( this . Context ) ) { yield return new JsonProperty ( "Context" , this . Context ) ; } if ( this . Gauges . Length > 0 ) { yield return new JsonProperty ( "Gauges" , this . Gauges . Select ( g => g . ToJsonObject ( ) ) ) ; } if ( this . Counters . Length > 0 ) { yield return new JsonProperty ( "Counters" , this . Counters . Select ( c => c . ToJsonObject ( ) ) ) ; } if ( this . Meters . Length > 0 ) { yield return new JsonProperty ( "Meters" , this . Meters . Select ( m => m . ToJsonObject ( ) ) ) ; } if ( this . Histograms . Length > 0 ) { yield return new JsonProperty ( "Histograms" , this . Histograms . Select ( h => h . ToJsonObject ( ) ) ) ; } if ( this . Timers . Length > 0 ) { yield return new JsonProperty ( "Timers" , this . Timers . Select ( t => t . ToJsonTimer ( ) ) ) ; } if ( this . ChildContexts . Length > 0 ) { yield return new JsonProperty ( "ChildContexts" , this . ChildContexts . Select ( c => c . ToJsonObject ( ) ) ) ; } }	timers . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	value >= 0	0.258064516129032	8	23	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( value >= 0 ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("HTTP Request Errors")	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name . ToString ( ) . Equals ( "HTTPRequestErrors" ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "HTTPRequestErrors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	reports.healthStatus != null	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( reports . healthStatus != null ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	reports . healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	handlers.m_tailList != null	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( handlers . m_tailList != null ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	handlers . m_tailList != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	childContexts != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( childContexts != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.Items.All(x => x != null)	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . Items . All ( x => x != null ) ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . Items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	value >= 100000000	0.129032258064516	4	27	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( value >= 100000000 ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	value >= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Metric.cs	Metrics.Metric.GetGlobalContextName()	Metrics.Metric.config == null	1	60	0	private static string GetGlobalContextName ( ) { if ( Metrics . Metric . config == null ) ; try { var configName = ConfigurationManager . AppSettings [ "Metrics.GlobalContextName" ] ; var name = string . IsNullOrEmpty ( configName ) ? Process . GetCurrentProcess ( ) . ProcessName . Replace ( '.' , '_' ) : configName ; log . Debug ( ( ) => "Metrics:GlobalContextNamesetto" + name ) ; return name ; } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorreadingconfigvalueforMetrics.GlobalContetName" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.GlobalContextNamemustbenonemptystring" , x ) ; } }	Metrics . Metric . config == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= histogram.Median	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= histogram . Median ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("Metrics Errors")	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name . ToString ( ) . Equals ( "MetricsErrors" ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "MetricsErrors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Update(System.Int64 value)	value >= uncounted.value	0.484536082474227	47	50	public void Update ( long value ) { if ( value >= uncounted . value ) ; uncounted . Add ( value ) ; }	value >= uncounted . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	handlers.m_tailList.Equals(handlers.m_headList)	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( handlers . m_tailList . Equals ( handlers . m_headList ) ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	handlers . m_tailList . Equals ( handlers . m_headList )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate.uncounted != null	1	96	0	public void Mark ( long count ) { if ( m15Rate . uncounted != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate == 1	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate == 1 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate == Histogram.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate == Histogram . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate == Histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`1<System.Exception> handler)	handler != null	1	29	0	internal void AddHandler ( Action < Exception > handler ) { if ( handler != null ) ; AddHandler ( ( x , msg ) => handler ( x ) ) ; }	handler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	reports.healthStatus.Equals(healthStatus)	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( reports . healthStatus . Equals ( healthStatus ) ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	reports . healthStatus . Equals ( healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Metric.cs	Metrics.Metric.GetGlobalContextName()	Metrics.Metric.globalContext == null	1	60	0	private static string GetGlobalContextName ( ) { if ( Metrics . Metric . globalContext == null ) ; try { var configName = ConfigurationManager . AppSettings [ "Metrics.GlobalContextName" ] ; var name = string . IsNullOrEmpty ( configName ) ? Process . GetCurrentProcess ( ) . ProcessName . Replace ( '.' , '_' ) : configName ; log . Debug ( ( ) => "Metrics:GlobalContextNamesetto" + name ) ; return name ; } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorreadingconfigvalueforMetrics.GlobalContetName" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.GlobalContextNamemustbenonemptystring" , x ) ; } }	Metrics . Metric . globalContext == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 1	0.580645161290323	18	13	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( value <= 1 ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	Metrics.MetricsErrorHandler.errorMeter != null	1	41	0	internal void AddHandler ( Action < Exception , string > handler ) { if ( Metrics . MetricsErrorHandler . errorMeter != null ) ; handlers . Add ( handler ) ; }	Metrics . MetricsErrorHandler . errorMeter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	alpha >= 0	1	52	0	public void Tick ( ) { if ( alpha >= 0 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Metric.cs	Metrics.Metric.GetGlobalContextName()	Metrics.Metric.internalContext != null	1	60	0	private static string GetGlobalContextName ( ) { if ( Metrics . Metric . internalContext != null ) ; try { var configName = ConfigurationManager . AppSettings [ "Metrics.GlobalContextName" ] ; var name = string . IsNullOrEmpty ( configName ) ? Process . GetCurrentProcess ( ) . ProcessName . Replace ( '.' , '_' ) : configName ; log . Debug ( ( ) => "Metrics:GlobalContextNamesetto" + name ) ; return name ; } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorreadingconfigvalueforMetrics.GlobalContetName" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.GlobalContextNamemustbenonemptystring" , x ) ; } }	Metrics . Metric . internalContext != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	Metrics.MetricsErrorHandler.handler == null	0.292682926829268	12	29	internal void AddHandler ( Action < Exception , string > handler ) { if ( Metrics . MetricsErrorHandler . handler == null ) ; handlers . Add ( handler ) ; }	Metrics . MetricsErrorHandler . handler == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Metric.cs	Metrics.Metric.GetGlobalContextName()	Metrics.Metric.log != null	0.983333333333333	59	1	private static string GetGlobalContextName ( ) { if ( Metrics . Metric . log != null ) ; try { var configName = ConfigurationManager . AppSettings [ "Metrics.GlobalContextName" ] ; var name = string . IsNullOrEmpty ( configName ) ? Process . GetCurrentProcess ( ) . ProcessName . Replace ( '.' , '_' ) : configName ; log . Debug ( ( ) => "Metrics:GlobalContextNamesetto" + name ) ; return name ; } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorreadingconfigvalueforMetrics.GlobalContetName" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.GlobalContextNamemustbenonemptystring" , x ) ; } }	Metrics . Metric . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	handlers != null	1	41	0	internal void AddHandler ( Action < Exception , string > handler ) { if ( handlers != null ) ; handlers . Add ( handler ) ; }	handlers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	isDisabled == false	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( isDisabled == false ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m15Rate.uncounted.Equals(count)	0.71875	69	27	public void Mark ( long count ) { if ( m15Rate . uncounted . Equals ( count ) ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m15Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 10000000	0.290322580645161	9	22	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( value <= 10000000 ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	value <= 10000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.WarnException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	formatParams.Count == 2	1	21	0	public static void WarnException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( formatParams . Count == 2 ) ; if ( logger . IsWarnEnabled ( ) ) { logger . Log ( LogLevel . Warn , message . AsFunc ( ) , exception , formatParams ) ; } }	formatParams . Count == 2
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	reports.metricsDataProvider != null	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( reports . metricsDataProvider != null ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	reports . metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMilliseconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 100000000	0.451612903225806	14	17	public static long ToMilliseconds ( this TimeUnit unit , long value ) { if ( value <= 100000000 ) ; return Convert ( unit , TimeUnit . Milliseconds , value ) ; }	value <= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= histogram.Min	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= histogram . Min ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	handlers.m_locals != null	1	41	0	internal void AddHandler ( Action < Exception , string > handler ) { if ( handlers . m_locals != null ) ; handlers . Add ( handler ) ; }	handlers . m_locals != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	initialized == false	0.115384615384615	6	46	public void Tick ( ) { if ( initialized == false ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Metric.cs	Metrics.Metric.GetGlobalContextName()	Metrics.Metric.log >= 0	0.0166666666666667	1	59	private static string GetGlobalContextName ( ) { if ( Metrics . Metric . log >= 0 ) ; try { var configName = ConfigurationManager . AppSettings [ "Metrics.GlobalContextName" ] ; var name = string . IsNullOrEmpty ( configName ) ? Process . GetCurrentProcess ( ) . ProcessName . Replace ( '.' , '_' ) : configName ; log . Debug ( ( ) => "Metrics:GlobalContextNamesetto" + name ) ; return name ; } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorreadingconfigvalueforMetrics.GlobalContetName" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.GlobalContextNamemustbenonemptystring" , x ) ; } }	Metrics . Metric . log >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	metricsBuilder != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( metricsBuilder != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	builder != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( builder != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate != null	1	96	0	public void Mark ( long count ) { if ( m1Rate != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	unit != null	1	99	0	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( unit != null ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ApplySettingsFromConfigFile()	reports.reports != null	1	60	0	internal void ApplySettingsFromConfigFile ( ) { if ( reports . reports != null ) ; if ( ! GlobalyDisabledMetrics ) { ConfigureCsvReports ( ) ; ConfigureHttpListener ( ) ; } }	reports . reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	handlers.m_needSync == false	1	41	0	internal void AddHandler ( Action < Exception , string > handler ) { if ( handlers . m_needSync == false ) ; handlers . Add ( handler ) ; }	handlers . m_needSync == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= histogram.Percentile75	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= histogram . Percentile75 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Days != null	1	99	0	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Days != null ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	Metrics.MetricsConfig.GlobalyDisabledMetrics == false	1	60	0	private void ConfigureHttpListener ( ) { if ( Metrics . MetricsConfig . GlobalyDisabledMetrics == false ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	Metrics . MetricsConfig . GlobalyDisabledMetrics == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.Percentile95	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	interval >= 0	1	52	0	public void Tick ( ) { if ( interval >= 0 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	handlers.m_serializationArray == null	1	41	0	internal void AddHandler ( Action < Exception , string > handler ) { if ( handlers . m_serializationArray == null ) ; handlers . Add ( handler ) ; }	handlers . m_serializationArray == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Hours != null	1	99	0	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Hours != null ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	handlers.m_tailList.Equals(handlers.m_headList)	1	41	0	internal void AddHandler ( Action < Exception , string > handler ) { if ( handlers . m_tailList . Equals ( handlers . m_headList ) ) ; handlers . Add ( handler ) ; }	handlers . m_tailList . Equals ( handlers . m_headList )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.alpha >= 0	1	96	0	public void Mark ( long count ) { if ( m1Rate . alpha >= 0 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit . Name != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	Metrics.MetricsConfig.log != null	1	60	0	private void ConfigureHttpListener ( ) { if ( Metrics . MetricsConfig . log != null ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	Metrics . MetricsConfig . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Microseconds != null	1	99	0	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.Percentile98	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Bytes != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . Bytes != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	registry != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( registry != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	interval >= alpha	1	52	0	public void Tick ( ) { if ( interval >= alpha ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	interval >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.Percentile99	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . Percentile99 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	handler != null	1	41	0	internal void AddHandler ( Action < Exception , string > handler ) { if ( handler != null ) ; handlers . Add ( handler ) ; }	handler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Calls != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . Calls != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Milliseconds != null	1	99	0	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.Percentile999	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . Percentile999 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . Percentile999
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	Metrics.MetricsErrorHandler.IsMono == false	0.707317073170732	29	12	internal void AddHandler ( Action < Exception , string > handler ) { if ( Metrics . MetricsErrorHandler . IsMono == false ) ; handlers . Add ( handler ) ; }	Metrics . MetricsErrorHandler . IsMono == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Commands != null	0.985294117647059	67	1	public static Unit Custom ( string name ) { if ( Metrics . Unit . Commands != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= histogram.Percentile95	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= histogram . Percentile95 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate != null	1	52	0	public void Tick ( ) { if ( rate != null ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name.Equals(name)	0.227272727272727	20	68	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit . Name . Equals ( name ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	unit . Name . Equals ( name )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.AddHandler(System.Action`2<System.Exception, System.String> handler)	Metrics.MetricsErrorHandler.log != null	0.707317073170732	29	12	internal void AddHandler ( Action < Exception , string > handler ) { if ( Metrics . MetricsErrorHandler . log != null ) ; handlers . Add ( handler ) ; }	Metrics . MetricsErrorHandler . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.alpha >= count.value	0.291666666666667	28	68	public void Mark ( long count ) { if ( m1Rate . alpha >= count . value ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Minutes != null	1	99	0	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Minutes != null ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	context != null	1	60	0	private void ConfigureHttpListener ( ) { if ( context != null ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	context != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.SampleSize	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . SampleSize ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . SampleSize
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	Metrics.MetricsErrorHandler.errorMeter != null	1	18	0	internal void ClearHandlers ( ) { if ( Metrics . MetricsErrorHandler . errorMeter != null ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	Metrics . MetricsErrorHandler . errorMeter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Commands >= 0	0.0147058823529412	1	67	public static Unit Custom ( string name ) { if ( Metrics . Unit . Commands >= 0 ) ; return new Unit ( name ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Histogram.StdDev	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Histogram . StdDev ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Histogram . StdDev
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	name != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( name != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds != null	1	99	0	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	Metrics.MetricsErrorHandler.handler != null	1	18	0	internal void ClearHandlers ( ) { if ( Metrics . MetricsErrorHandler . handler != null ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	Metrics . MetricsErrorHandler . handler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate >= 0	0.0192307692307692	1	51	public void Tick ( ) { if ( rate >= 0 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Errors != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . Errors != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Rate.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Rate . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Rate . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	Metrics.MetricsErrorHandler.IsMono == false	1	18	0	internal void ClearHandlers ( ) { if ( Metrics . MetricsErrorHandler . IsMono == false ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	Metrics . MetricsErrorHandler . IsMono == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.alpha >= m15Rate.alpha	1	96	0	public void Mark ( long count ) { if ( m1Rate . alpha >= m15Rate . alpha ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Errors")	0.840909090909091	74	14	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit . Name . ToString ( ) . Equals ( "Errors" ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "Errors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Rate.FifteenMinuteRate	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Rate . FifteenMinuteRate ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Rate . FifteenMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Events != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . Events != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	Metrics.MetricsErrorHandler.log != null	1	18	0	internal void ClearHandlers ( ) { if ( Metrics . MetricsErrorHandler . log != null ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	Metrics . MetricsErrorHandler . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds.Equals(unit)	0.94949494949495	94	5	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Nanoseconds . Equals ( unit ) ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	Metrics . TimeUnit . Nanoseconds . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate >= alpha	0.0192307692307692	1	51	public void Tick ( ) { if ( rate >= alpha ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	healthStatus != null	1	60	0	private void ConfigureHttpListener ( ) { if ( healthStatus != null ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.MeanRate <= Rate.FiveMinuteRate	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . MeanRate <= Rate . FiveMinuteRate ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . MeanRate <= Rate . FiveMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= histogram.Percentile98	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= histogram . Percentile98 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	handlers != null	1	18	0	internal void ClearHandlers ( ) { if ( handlers != null ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	handlers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Items != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . Items != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Seconds != null	1	99	0	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Seconds != null ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate >= 0	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate >= 0 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate <= interval	0.0192307692307692	1	51	public void Tick ( ) { if ( rate <= interval ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.alpha <= m15Rate.interval	1	96	0	public void Mark ( long count ) { if ( m1Rate . alpha <= m15Rate . interval ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate >= ActiveSessions	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate >= ActiveSessions ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate >= ActiveSessions
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.KiloBytes != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . KiloBytes != null ) ; return new Unit ( name ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	handlers.m_headList != null	1	18	0	internal void ClearHandlers ( ) { if ( handlers . m_headList != null ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	handlers . m_headList != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("Active Requests")	0.322222222222222	29	61	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "ActiveRequests" ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	name . ToString ( ) . Equals ( "ActiveRequests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate.value == 0	0.134615384615385	7	45	public void Tick ( ) { if ( rate . value == 0 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	value != null	0.656565656565657	65	34	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( value != null ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	isDisabled == false	1	60	0	private void ConfigureHttpListener ( ) { if ( isDisabled == false ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate == Histogram.LastValue	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate == Histogram . LastValue ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate == Histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.MegaBytes != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . MegaBytes != null ) ; return new Unit ( name ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Bytes != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	handlers.m_locals != null	1	18	0	internal void ClearHandlers ( ) { if ( handlers . m_locals != null ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	handlers . m_locals != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.None != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . None != null ) ; return new Unit ( name ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.Max	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . Max ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	value == 0	0.141414141414141	14	85	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( value == 0 ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.initialized == false	0.71875	69	27	public void Mark ( long count ) { if ( m1Rate . initialized == false ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate.value >= 0	1	52	0	public void Tick ( ) { if ( rate . value >= 0 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.Mean	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . Mean ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Percent != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . Percent != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	handlers.m_needSync == false	1	18	0	internal void ClearHandlers ( ) { if ( handlers . m_needSync == false ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	handlers . m_needSync == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Calls != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.Percentile999 >= histogram.Percentile99	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . Percentile999 >= histogram . Percentile99 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . Percentile999 >= histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.Median	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . Median ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	listener == null	1	60	0	private void ConfigureHttpListener ( ) { if ( listener == null ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	listener == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Requests != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . Requests != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	value >= 0	0.97979797979798	97	2	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( value >= 0 ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("test")	0.122222222222222	11	79	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "test" ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	name . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate.value <= 0	0.134615384615385	7	45	public void Tick ( ) { if ( rate . value <= 0 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	handlers.m_serializationArray == null	1	18	0	internal void ClearHandlers ( ) { if ( handlers . m_serializationArray == null ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	handlers . m_serializationArray == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.Min	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . Min ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Results != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . Results != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	handlers.m_tailList != null	1	18	0	internal void ClearHandlers ( ) { if ( handlers . m_tailList != null ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	handlers . m_tailList != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.Percentile75	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . Percentile75 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.interval >= 0	1	96	0	public void Mark ( long count ) { if ( m1Rate . interval >= 0 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	Metrics.Unit.Threads != null	1	68	0	public static Unit Custom ( string name ) { if ( Metrics . Unit . Threads != null ) ; return new Unit ( name ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 0	0.141414141414141	14	85	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( value <= 0 ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.Percentile95	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . Percentile95 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate.value <= alpha	1	52	0	public void Tick ( ) { if ( rate . value <= alpha ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate . value <= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.ClearHandlers()	handlers.m_tailList.Equals(handlers.m_headList)	1	18	0	internal void ClearHandlers ( ) { if ( handlers . m_tailList . Equals ( handlers . m_headList ) ) ; while ( ! this . handlers . IsEmpty ) { Action < Exception , string > item ; this . handlers . TryTake ( out item ) ; } }	handlers . m_tailList . Equals ( handlers . m_headList )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	reports != null	1	60	0	private void ConfigureHttpListener ( ) { if ( reports != null ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.Percentile98	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . Percentile98 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.988636363636364	87	1	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Commands != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	name != null	1	68	0	public static Unit Custom ( string name ) { if ( name != null ) ; return new Unit ( name ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	Metrics.MetricsErrorHandler.errorMeter != null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( Metrics . MetricsErrorHandler . errorMeter != null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	Metrics . MetricsErrorHandler . errorMeter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.Percentile99	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . Percentile99 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 100000000	0.151515151515152	15	84	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( value <= 100000000 ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	value <= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate.value <= interval	1	52	0	public void Tick ( ) { if ( rate . value <= interval ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate . value <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize == 16	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize == 16 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize == 16
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	Metrics.MetricsErrorHandler.handler != null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( Metrics . MetricsErrorHandler . handler != null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	Metrics . MetricsErrorHandler . handler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.interval >= count.value	1	96	0	public void Mark ( long count ) { if ( m1Rate . interval >= count . value ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.Percentile999	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . Percentile999 ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . Percentile999
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Unit.cs	Metrics.Unit.Custom(System.String name)	name.ToString().Equals("ActiveRequests")	0.588235294117647	40	28	public static Unit Custom ( string name ) { if ( name . ToString ( ) . Equals ( "ActiveRequests" ) ) ; return new Unit ( name ) ; }	name . ToString ( ) . Equals ( "ActiveRequests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.0222222222222222	2	88	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.0113636363636364	1	87	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Commands >= 0 ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	Metrics.MetricsErrorHandler.IsMono == false	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( Metrics . MetricsErrorHandler . IsMono == false ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	Metrics . MetricsErrorHandler . IsMono == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.SampleSize	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . SampleSize ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . SampleSize
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 10000000000	0.191919191919192	19	80	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( value <= 10000000000 ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	value <= 10000000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	rate.value <= rate	0.0192307692307692	1	51	public void Tick ( ) { if ( rate . value <= rate ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	rate . value <= rate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	reports.healthStatus != null	1	60	0	private void ConfigureHttpListener ( ) { if ( reports . healthStatus != null ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	reports . healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Histogram.StdDev	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Histogram . StdDev ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Histogram . StdDev
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	Metrics.MetricsErrorHandler.log != null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( Metrics . MetricsErrorHandler . log != null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	Metrics . MetricsErrorHandler . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action action)	token == null	1	91	0	public void Start ( TimeSpan interval , Action action ) { if ( token == null ) ; Start ( interval , t => { if ( ! t . IsCancellationRequested ) { action ( ) ; } } ) ; }	token == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Rate.Count	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Rate . Count ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Rate . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Errors != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToSeconds(Metrics.TimeUnit unit, System.Int64 value)	value <= 1000000000	0.262626262626263	26	73	public static long ToSeconds ( this TimeUnit unit , long value ) { if ( value <= 1000000000 ) ; return Convert ( unit , TimeUnit . Seconds , value ) ; }	value <= 1000000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action action)	interval != null	0.923076923076923	84	7	public void Start ( TimeSpan interval , Action action ) { if ( interval != null ) ; Start ( interval , t => { if ( ! t . IsCancellationRequested ) { action ( ) ; } } ) ; }	interval != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.WarnException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	formatParams != null	1	21	0	public static void WarnException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( formatParams != null ) ; if ( logger . IsWarnEnabled ( ) ) { logger . Log ( LogLevel . Warn , message . AsFunc ( ) , exception , formatParams ) ; } }	formatParams != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted != null	1	52	0	public void Tick ( ) { if ( uncounted != null ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.interval >= m15Rate.alpha	1	96	0	public void Mark ( long count ) { if ( m1Rate . interval >= m15Rate . alpha ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	handlers != null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( handlers != null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	handlers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.OneMinuteRate <= Rate.FifteenMinuteRate	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . OneMinuteRate <= Rate . FifteenMinuteRate ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . OneMinuteRate <= Rate . FifteenMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action action)	interval == 100000	0.032967032967033	3	88	public void Start ( TimeSpan interval , Action action ) { if ( interval == 100000 ) ; Start ( interval , t => { if ( ! t . IsCancellationRequested ) { action ( ) ; } } ) ; }	interval == 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	unit != null	1	14	0	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( unit != null ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("counter")	0.0111111111111111	1	89	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "counter" ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	name . ToString ( ) . Equals ( "counter" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.RateUnit != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . RateUnit != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . RateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	handlers.m_headList != null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( handlers . m_headList != null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	handlers . m_headList != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action action)	interval >= 0	0.736263736263736	67	24	public void Start ( TimeSpan interval , Action action ) { if ( interval >= 0 ) ; Start ( interval , t => { if ( ! t . IsCancellationRequested ) { action ( ) ; } } ) ; }	interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	reports.healthStatus.Equals(healthStatus)	1	60	0	private void ConfigureHttpListener ( ) { if ( reports . healthStatus . Equals ( healthStatus ) ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	reports . healthStatus . Equals ( healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	Rate.RateUnit.Equals(Metrics.TimeUnit.Seconds)	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( Rate . RateUnit . Equals ( Metrics . TimeUnit . Seconds ) ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	Rate . RateUnit . Equals ( Metrics . TimeUnit . Seconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value == 0	0.0192307692307692	1	51	public void Tick ( ) { if ( uncounted . value == 0 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors.Equals(unit)	0.840909090909091	74	14	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Errors . Equals ( unit ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Errors . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	rate != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( rate != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action action)	interval >= 100000	0.0879120879120879	8	83	public void Start ( TimeSpan interval , Action action ) { if ( interval >= 100000 ) ; Start ( interval , t => { if ( ! t . IsCancellationRequested ) { action ( ) ; } } ) ; }	interval >= 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Days != null	1	14	0	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Days != null ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	handlers.m_locals != null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( handlers . m_locals != null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	handlers . m_locals != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	duration != null	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( duration != null ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	duration != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action action)	interval <= 100000	0.032967032967033	3	88	public void Start ( TimeSpan interval , Action action ) { if ( interval <= 100000 ) ; Start ( interval , t => { if ( ! t . IsCancellationRequested ) { action ( ) ; } } ) ; }	interval <= 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value == 1	0.0192307692307692	1	51	public void Tick ( ) { if ( uncounted . value == 1 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.interval == m15Rate.interval	1	96	0	public void Mark ( long count ) { if ( m1Rate . interval == m15Rate . interval ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricData\TimerValue.cs	Metrics.MetricData.TimerValue.Scale(Metrics.TimeUnit rate, Metrics.TimeUnit duration)	duration.Equals(Metrics.TimeUnit.Milliseconds)	1	49	0	public TimerValue Scale ( TimeUnit rate , TimeUnit duration ) { if ( duration . Equals ( Metrics . TimeUnit . Milliseconds ) ) ; var durationFactor = this . DurationUnit . ScalingFactorFor ( duration ) ; return new TimerValue ( this . Rate . Scale ( rate ) , this . Histogram . Scale ( durationFactor ) , this . ActiveSessions , duration ) ; }	duration . Equals ( Metrics . TimeUnit . Milliseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Hours != null	1	14	0	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Hours != null ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Events != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action action)	action != null	1	91	0	public void Start ( TimeSpan interval , Action action ) { if ( action != null ) ; Start ( interval , t => { if ( ! t . IsCancellationRequested ) { action ( ) ; } } ) ; }	action != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	unit != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( unit != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	reports.metricsDataProvider != null	1	60	0	private void ConfigureHttpListener ( ) { if ( reports . metricsDataProvider != null ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	reports . metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	handlers.m_needSync == false	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( handlers . m_needSync == false ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	handlers . m_needSync == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action`1<System.Threading.CancellationToken> action)	token == null	1	96	0	public void Start ( TimeSpan interval , Action < CancellationToken > action ) { if ( token == null ) ; Start ( interval , t => { action ( t ) ; return Task . FromResult ( true ) ; } ) ; }	token == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value >= 0	1	52	0	public void Tick ( ) { if ( uncounted . value >= 0 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Microseconds != null	1	14	0	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	handlers.m_serializationArray == null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( handlers . m_serializationArray == null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	handlers . m_serializationArray == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Items != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action`1<System.Threading.CancellationToken> action)	interval != null	0.875	84	12	public void Start ( TimeSpan interval , Action < CancellationToken > action ) { if ( interval != null ) ; Start ( interval , t => { action ( t ) ; return Task . FromResult ( true ) ; } ) ; }	interval != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.interval >= m1Rate.alpha	1	96	0	public void Mark ( long count ) { if ( m1Rate . interval >= m1Rate . alpha ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Milliseconds != null	1	14	0	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action`1<System.Threading.CancellationToken> action)	interval == 100000	0.104166666666667	10	86	public void Start ( TimeSpan interval , Action < CancellationToken > action ) { if ( interval == 100000 ) ; Start ( interval , t => { action ( t ) ; return Task . FromResult ( true ) ; } ) ; }	interval == 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	handlers.m_tailList != null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( handlers . m_tailList != null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	handlers . m_tailList != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value >= 1	0.0192307692307692	1	51	public void Tick ( ) { if ( uncounted . value >= 1 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureHttpListener()	reports.reports != null	1	60	0	private void ConfigureHttpListener ( ) { if ( reports . reports != null ) ; try { var httpEndpoint = ConfigurationManager . AppSettings [ "Metrics.HttpListener.HttpUriPrefix" ] ; if ( ! string . IsNullOrEmpty ( httpEndpoint ) ) { this . WithHttpEndpoint ( httpEndpoint ) ; log . Debug ( ( ) => "Metrics:HttpListenerconfiguredat" + httpEndpoint ) ; } } catch ( Exception x ) { log . ErrorException ( "Metrics:errorconfiguringHttpListener" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.HttpListener.HttpUriPrefixmusebeavalidHttpListenerendpointprefix" , x ) ; } }	reports . reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . KiloBytes != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action`1<System.Threading.CancellationToken> action)	interval >= 0	0.541666666666667	52	44	public void Start ( TimeSpan interval , Action < CancellationToken > action ) { if ( interval >= 0 ) ; Start ( interval , t => { action ( t ) ; return Task . FromResult ( true ) ; } ) ; }	interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Minutes != null	1	14	0	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Minutes != null ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	handlers.m_tailList.Equals(handlers.m_headList)	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( handlers . m_tailList . Equals ( handlers . m_headList ) ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	handlers . m_tailList . Equals ( handlers . m_headList )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( unit . Name != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action`1<System.Threading.CancellationToken> action)	interval >= 100000	0.3125	30	66	public void Start ( TimeSpan interval , Action < CancellationToken > action ) { if ( interval >= 100000 ) ; Start ( interval , t => { action ( t ) ; return Task . FromResult ( true ) ; } ) ; }	interval >= 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value <= 1	0.288461538461538	15	37	public void Tick ( ) { if ( uncounted . value <= 1 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	exception != null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( exception != null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	exception != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.rate != null	1	96	0	public void Mark ( long count ) { if ( m1Rate . rate != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . MegaBytes != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action`1<System.Threading.CancellationToken> action)	interval <= 100000	0.104166666666667	10	86	public void Start ( TimeSpan interval , Action < CancellationToken > action ) { if ( interval <= 100000 ) ; Start ( interval , t => { action ( t ) ; return Task . FromResult ( true ) ; } ) ; }	interval <= 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	Metrics.MetricsConfig.GlobalyDisabledMetrics == false	1	60	0	private void ConfigureCsvReports ( ) { if ( Metrics . MetricsConfig . GlobalyDisabledMetrics == false ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	Metrics . MetricsConfig . GlobalyDisabledMetrics == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value <= 0	0.0192307692307692	1	51	public void Tick ( ) { if ( uncounted . value <= 0 ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	message != null	1	32	0	private void InternalHandle ( Exception exception , string message ) { if ( message != null ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	message != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds != null	1	14	0	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Action`1<System.Threading.CancellationToken> action)	action != null	1	96	0	public void Start ( TimeSpan interval , Action < CancellationToken > action ) { if ( action != null ) ; Start ( interval , t => { action ( t ) ; return Task . FromResult ( true ) ; } ) ; }	action != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("ActiveRequests")	0.322222222222222	29	61	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "ActiveRequests" ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	unit . Name . ToString ( ) . Equals ( "ActiveRequests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	message.ToString().Equals("Error while executing action scheduler.")	0.21875	7	25	private void InternalHandle ( Exception exception , string message ) { if ( message . ToString ( ) . Equals ( "Errorwhileexecutingactionscheduler." ) ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	message . ToString ( ) . Equals ( "Errorwhileexecutingactionscheduler." )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	Metrics.MetricsConfig.log != null	1	60	0	private void ConfigureCsvReports ( ) { if ( Metrics . MetricsConfig . log != null ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	Metrics . MetricsConfig . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action)	token == null	1	96	0	public void Start ( TimeSpan interval , Func < CancellationToken , Task > action ) { if ( token == null ) ; if ( interval . TotalSeconds == 0 ) { throw new ArgumentException ( "intervalmustbe>0seconds" , "interval" ) ; } if ( this . token != null ) { throw new InvalidOperationException ( "Schedulerisalreadystarted." ) ; } this . token = new CancellationTokenSource ( ) ; RunScheduler ( interval , action , this . token ) ; }	token == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value >= alpha	0.0384615384615385	2	50	public void Tick ( ) { if ( uncounted . value >= alpha ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . None != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Seconds != null	1	14	0	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Seconds != null ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.rate.Equals(m15Rate.rate)	0.75	72	24	public void Mark ( long count ) { if ( m1Rate . rate . Equals ( m15Rate . rate ) ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . rate . Equals ( m15Rate . rate )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action)	interval == 100000	0.114583333333333	11	85	public void Start ( TimeSpan interval , Func < CancellationToken , Task > action ) { if ( interval == 100000 ) ; if ( interval . TotalSeconds == 0 ) { throw new ArgumentException ( "intervalmustbe>0seconds" , "interval" ) ; } if ( this . token != null ) { throw new InvalidOperationException ( "Schedulerisalreadystarted." ) ; } this . token = new CancellationTokenSource ( ) ; RunScheduler ( interval , action , this . token ) ; }	interval == 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.InternalHandle(System.Exception exception, System.String message)	message.ToString().Equals("Unable to start HTTP Listener. Retried 3 times, giving up...")	0.53125	17	15	private void InternalHandle ( Exception exception , string message ) { if ( message . ToString ( ) . Equals ( "UnabletostartHTTPListener.Retried3times,givingup..." ) ) ; errorMeter . Mark ( ) ; foreach ( var handler in this . handlers ) { try { handler ( exception , message ) ; } catch { } } }	message . ToString ( ) . Equals ( "UnabletostartHTTPListener.Retried3times,givingup..." )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.Handle(System.Exception exception, System.String message)	Metrics.MetricsErrorHandler.errorMeter != null	1	32	0	public static void Handle ( Exception exception , string message ) { if ( Metrics . MetricsErrorHandler . errorMeter != null ) ; MetricsErrorHandler . handler . InternalHandle ( exception , message ) ; }	Metrics . MetricsErrorHandler . errorMeter != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Seconds.Equals(unit)	0.5	7	7	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Seconds . Equals ( unit ) ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	Metrics . TimeUnit . Seconds . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action)	interval >= 100000	0.479166666666667	46	50	public void Start ( TimeSpan interval , Func < CancellationToken , Task > action ) { if ( interval >= 100000 ) ; if ( interval . TotalSeconds == 0 ) { throw new ArgumentException ( "intervalmustbe>0seconds" , "interval" ) ; } if ( this . token != null ) { throw new InvalidOperationException ( "Schedulerisalreadystarted." ) ; } this . token = new CancellationTokenSource ( ) ; RunScheduler ( interval , action , this . token ) ; }	interval >= 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Percent != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value <= alpha	0.0192307692307692	1	51	public void Tick ( ) { if ( uncounted . value <= alpha ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value <= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Mean	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Mean ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.Handle(System.Exception exception, System.String message)	Metrics.MetricsErrorHandler.handler != null	1	32	0	public static void Handle ( Exception exception , string message ) { if ( Metrics . MetricsErrorHandler . handler != null ) ; MetricsErrorHandler . handler . InternalHandle ( exception , message ) ; }	Metrics . MetricsErrorHandler . handler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action)	interval >= 0	0.385416666666667	37	59	public void Start ( TimeSpan interval , Func < CancellationToken , Task > action ) { if ( interval >= 0 ) ; if ( interval . TotalSeconds == 0 ) { throw new ArgumentException ( "intervalmustbe>0seconds" , "interval" ) ; } if ( this . token != null ) { throw new InvalidOperationException ( "Schedulerisalreadystarted." ) ; } this . token = new CancellationTokenSource ( ) ; RunScheduler ( interval , action , this . token ) ; }	interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	context != null	1	60	0	private void ConfigureCsvReports ( ) { if ( context != null ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	context != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.uncounted != null	1	96	0	public void Mark ( long count ) { if ( m1Rate . uncounted != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.Handle(System.Exception exception, System.String message)	Metrics.MetricsErrorHandler.IsMono == false	1	32	0	public static void Handle ( Exception exception , string message ) { if ( Metrics . MetricsErrorHandler . IsMono == false ) ; MetricsErrorHandler . handler . InternalHandle ( exception , message ) ; }	Metrics . MetricsErrorHandler . IsMono == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToMinutes(Metrics.TimeUnit unit, System.Int64 value)	value >= 0	1	14	0	public static long ToMinutes ( this TimeUnit unit , long value ) { if ( value >= 0 ) ; return Convert ( unit , TimeUnit . Minutes , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action)	interval <= 100000	0.114583333333333	11	85	public void Start ( TimeSpan interval , Func < CancellationToken , Task > action ) { if ( interval <= 100000 ) ; if ( interval . TotalSeconds == 0 ) { throw new ArgumentException ( "intervalmustbe>0seconds" , "interval" ) ; } if ( this . token != null ) { throw new InvalidOperationException ( "Schedulerisalreadystarted." ) ; } this . token = new CancellationTokenSource ( ) ; RunScheduler ( interval , action , this . token ) ; }	interval <= 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Requests != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("bytes")	0.1	9	81	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "bytes" ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	unit . Name . ToString ( ) . Equals ( "bytes" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value <= interval	1	52	0	public void Tick ( ) { if ( uncounted . value <= interval ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.Handle(System.Exception exception, System.String message)	Metrics.MetricsErrorHandler.log != null	1	32	0	public static void Handle ( Exception exception , string message ) { if ( Metrics . MetricsErrorHandler . log != null ) ; MetricsErrorHandler . handler . InternalHandle ( exception , message ) ; }	Metrics . MetricsErrorHandler . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action)	interval != null	0.875	84	12	public void Start ( TimeSpan interval , Func < CancellationToken , Task > action ) { if ( interval != null ) ; if ( interval . TotalSeconds == 0 ) { throw new ArgumentException ( "intervalmustbe>0seconds" , "interval" ) ; } if ( this . token != null ) { throw new InvalidOperationException ( "Schedulerisalreadystarted." ) ; } this . token = new CancellationTokenSource ( ) ; RunScheduler ( interval , action , this . token ) ; }	interval != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToHours(Metrics.TimeUnit unit, System.Int64 value)	unit != null	1	7	0	public static long ToHours ( this TimeUnit unit , long value ) { if ( unit != null ) ; return Convert ( unit , TimeUnit . Hours , value ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Start(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action)	action != null	1	96	0	public void Start ( TimeSpan interval , Func < CancellationToken , Task > action ) { if ( action != null ) ; if ( interval . TotalSeconds == 0 ) { throw new ArgumentException ( "intervalmustbe>0seconds" , "interval" ) ; } if ( this . token != null ) { throw new InvalidOperationException ( "Schedulerisalreadystarted." ) ; } this . token = new CancellationTokenSource ( ) ; RunScheduler ( interval , action , this . token ) ; }	action != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.Handle(System.Exception exception, System.String message)	exception != null	1	32	0	public static void Handle ( Exception exception , string message ) { if ( exception != null ) ; MetricsErrorHandler . handler . InternalHandle ( exception , message ) ; }	exception != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Results != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	healthStatus != null	1	60	0	private void ConfigureCsvReports ( ) { if ( healthStatus != null ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value >= rate.value	0.0769230769230769	4	48	public void Tick ( ) { if ( uncounted . value >= rate . value ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value >= rate . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.uncounted.Equals(count)	0.420731707317073	69	95	public void Mark ( long count ) { if ( m1Rate . uncounted . Equals ( count ) ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToHours(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Days != null	1	7	0	public static long ToHours ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Days != null ) ; return Convert ( unit , TimeUnit . Hours , value ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.RunScheduler(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action, System.Threading.CancellationTokenSource token)	interval == 100000	0.114583333333333	11	85	private static void RunScheduler ( TimeSpan interval , Func < CancellationToken , Task > action , CancellationTokenSource token ) { if ( interval == 100000 ) ; Task . Factory . StartNew ( async ( ) => { while ( ! token . IsCancellationRequested ) { try { await Task . Delay ( interval , token . Token ) . ConfigureAwait ( false ) ; try { await action ( token . Token ) . ConfigureAwait ( false ) ; } catch ( Exception x ) { MetricsErrorHandler . Handle ( x , "Errorwhileexecutingactionscheduler." ) ; token . Cancel ( ) ; } } catch ( TaskCanceledException ) { } } } , token . Token ) ; }	interval == 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Median	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Median ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.Handle(System.Exception exception, System.String message)	message != null	1	32	0	public static void Handle ( Exception exception , string message ) { if ( message != null ) ; MetricsErrorHandler . handler . InternalHandle ( exception , message ) ; }	message != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.RunScheduler(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action, System.Threading.CancellationTokenSource token)	interval >= 100000	0.479166666666667	46	50	private static void RunScheduler ( TimeSpan interval , Func < CancellationToken , Task > action , CancellationTokenSource token ) { if ( interval >= 100000 ) ; Task . Factory . StartNew ( async ( ) => { while ( ! token . IsCancellationRequested ) { try { await Task . Delay ( interval , token . Token ) . ConfigureAwait ( false ) ; try { await action ( token . Token ) . ConfigureAwait ( false ) ; } catch ( Exception x ) { MetricsErrorHandler . Handle ( x , "Errorwhileexecutingactionscheduler." ) ; token . Cancel ( ) ; } } catch ( TaskCanceledException ) { } } } , token . Token ) ; }	interval >= 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToHours(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Hours != null	1	7	0	public static long ToHours ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Hours != null ) ; return Convert ( unit , TimeUnit . Hours , value ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("")	0.0111111111111111	1	89	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "" ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	unit . Name . ToString ( ) . Equals ( "" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Tick()	uncounted.value <= rate	0.0192307692307692	1	51	public void Tick ( ) { if ( uncounted . value <= rate ) ; long count = uncounted . GetAndReset ( ) ; double instantRate = count / interval ; if ( initialized ) { double doubleRate = rate . Get ( ) ; rate . Set ( doubleRate + alpha * ( instantRate - doubleRate ) ) ; } else { rate . Set ( instantRate ) ; initialized = true ; } }	uncounted . value <= rate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Threads != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.Handle(System.Exception exception, System.String message)	message.ToString().Equals("Error while executing action scheduler.")	0.21875	7	25	public static void Handle ( Exception exception , string message ) { if ( message . ToString ( ) . Equals ( "Errorwhileexecutingactionscheduler." ) ) ; MetricsErrorHandler . handler . InternalHandle ( exception , message ) ; }	message . ToString ( ) . Equals ( "Errorwhileexecutingactionscheduler." )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.RunScheduler(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action, System.Threading.CancellationTokenSource token)	interval >= 0	0.385416666666667	37	59	private static void RunScheduler ( TimeSpan interval , Func < CancellationToken , Task > action , CancellationTokenSource token ) { if ( interval >= 0 ) ; Task . Factory . StartNew ( async ( ) => { while ( ! token . IsCancellationRequested ) { try { await Task . Delay ( interval , token . Token ) . ConfigureAwait ( false ) ; try { await action ( token . Token ) . ConfigureAwait ( false ) ; } catch ( Exception x ) { MetricsErrorHandler . Handle ( x , "Errorwhileexecutingactionscheduler." ) ; token . Cancel ( ) ; } } catch ( TaskCanceledException ) { } } } , token . Token ) ; }	interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToHours(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Microseconds != null	1	7	0	public static long ToHours ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return Convert ( unit , TimeUnit . Hours , value ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	isDisabled == false	1	60	0	private void ConfigureCsvReports ( ) { if ( isDisabled == false ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m1Rate.uncounted.Equals(m15Rate.uncounted)	0.585365853658537	96	68	public void Mark ( long count ) { if ( m1Rate . uncounted . Equals ( m15Rate . uncounted ) ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m1Rate . uncounted . Equals ( m15Rate . uncounted )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.RunScheduler(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action, System.Threading.CancellationTokenSource token)	interval <= 100000	0.114583333333333	11	85	private static void RunScheduler ( TimeSpan interval , Func < CancellationToken , Task > action , CancellationTokenSource token ) { if ( interval <= 100000 ) ; Task . Factory . StartNew ( async ( ) => { while ( ! token . IsCancellationRequested ) { try { await Task . Delay ( interval , token . Token ) . ConfigureAwait ( false ) ; try { await action ( token . Token ) . ConfigureAwait ( false ) ; } catch ( Exception x ) { MetricsErrorHandler . Handle ( x , "Errorwhileexecutingactionscheduler." ) ; token . Cancel ( ) ; } } catch ( TaskCanceledException ) { } } } , token . Token ) ; }	interval <= 100000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsErrorHandler.cs	Metrics.MetricsErrorHandler.Handle(System.Exception exception, System.String message)	message.ToString().Equals("Unable to start HTTP Listener. Retried 3 times, giving up...")	0.53125	17	15	public static void Handle ( Exception exception , string message ) { if ( message . ToString ( ) . Equals ( "UnabletostartHTTPListener.Retried3times,givingup..." ) ) ; MetricsErrorHandler . handler . InternalHandle ( exception , message ) ; }	message . ToString ( ) . Equals ( "UnabletostartHTTPListener.Retried3times,givingup..." )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	alpha >= 0	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( alpha >= 0 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToHours(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Milliseconds != null	1	7	0	public static long ToHours ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return Convert ( unit , TimeUnit . Hours , value ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.RunScheduler(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action, System.Threading.CancellationTokenSource token)	interval != null	0.875	84	12	private static void RunScheduler ( TimeSpan interval , Func < CancellationToken , Task > action , CancellationTokenSource token ) { if ( interval != null ) ; Task . Factory . StartNew ( async ( ) => { while ( ! token . IsCancellationRequested ) { try { await Task . Delay ( interval , token . Token ) . ConfigureAwait ( false ) ; try { await action ( token . Token ) . ConfigureAwait ( false ) ; } catch ( Exception x ) { MetricsErrorHandler . Handle ( x , "Errorwhileexecutingactionscheduler." ) ; token . Cancel ( ) ; } } catch ( TaskCanceledException ) { } } } , token . Token ) ; }	interval != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	rateUnit != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( rateUnit != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Min	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Min ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToHours(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Minutes != null	1	7	0	public static long ToHours ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Minutes != null ) ; return Convert ( unit , TimeUnit . Hours , value ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.RunScheduler(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action, System.Threading.CancellationTokenSource token)	action != null	1	96	0	private static void RunScheduler ( TimeSpan interval , Func < CancellationToken , Task > action , CancellationTokenSource token ) { if ( action != null ) ; Task . Factory . StartNew ( async ( ) => { while ( ! token . IsCancellationRequested ) { try { await Task . Delay ( interval , token . Token ) . ConfigureAwait ( false ) ; try { await action ( token . Token ) . ConfigureAwait ( false ) ; } catch ( Exception x ) { MetricsErrorHandler . Handle ( x , "Errorwhileexecutingactionscheduler." ) ; token . Cancel ( ) ; } } catch ( TaskCanceledException ) { } } } , token . Token ) ; }	action != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	initialized == false	0.517241379310345	45	42	public double GetRate ( TimeUnit rateUnit ) { if ( initialized == false ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Requests")	0.0222222222222222	2	88	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Requests" ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Requests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	listener == null	1	60	0	private void ConfigureCsvReports ( ) { if ( listener == null ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	listener == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate != null	1	96	0	public void Mark ( long count ) { if ( m5Rate != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Days != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Days != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToHours(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds != null	1	7	0	public static long ToHours ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return Convert ( unit , TimeUnit . Hours , value ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.RunScheduler(System.TimeSpan interval, System.Func`2<System.Threading.CancellationToken, System.Threading.Tasks.Task> action, System.Threading.CancellationTokenSource token)	token != null	1	96	0	private static void RunScheduler ( TimeSpan interval , Func < CancellationToken , Task > action , CancellationTokenSource token ) { if ( token != null ) ; Task . Factory . StartNew ( async ( ) => { while ( ! token . IsCancellationRequested ) { try { await Task . Delay ( interval , token . Token ) . ConfigureAwait ( false ) ; try { await action ( token . Token ) . ConfigureAwait ( false ) ; } catch ( Exception x ) { MetricsErrorHandler . Handle ( x , "Errorwhileexecutingactionscheduler." ) ; token . Cancel ( ) ; } } catch ( TaskCanceledException ) { } } } , token . Token ) ; }	token != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	initialized == true	0.137931034482759	12	75	public double GetRate ( TimeUnit rateUnit ) { if ( initialized == true ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Stop()	token != null	1	46	0	public void Stop ( ) { if ( token != null ) ; if ( this . token != null ) { token . Cancel ( ) ; } }	token != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Hours != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Hours != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\ActionScheduler.cs	Metrics.Utils.ActionScheduler.Dispose()	token != null	1	46	0	public void Dispose ( ) { if ( token != null ) ; if ( this . token != null ) { this . token . Cancel ( ) ; this . token . Dispose ( ) ; } }	token != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToHours(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Seconds != null	1	7	0	public static long ToHours ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Seconds != null ) ; return Convert ( unit , TimeUnit . Hours , value ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	interval >= 0	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( interval >= 0 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	reports != null	1	60	0	private void ConfigureCsvReports ( ) { if ( reports != null ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.alpha >= 0	1	96	0	public void Mark ( long count ) { if ( m5Rate . alpha >= 0 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Percentile75	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Percentile75 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.0222222222222222	2	88	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.WarnException(Metrics.Logging.ILog logger, System.String message, System.Exception exception, System.Object[] formatParams)	formatParams.All(x => x >= 1)	1	21	0	public static void WarnException ( this ILog logger , string message , Exception exception , params object [ ] formatParams ) { if ( formatParams . All ( x => x >= 1 ) ) ; if ( logger . IsWarnEnabled ( ) ) { logger . Log ( LogLevel . Warn , message . AsFunc ( ) , exception , formatParams ) ; } }	formatParams . All ( x => x >= 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	interval >= alpha	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( interval >= alpha ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	interval >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Microseconds != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Microseconds != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToHours(Metrics.TimeUnit unit, System.Int64 value)	value >= 0	1	7	0	public static long ToHours ( this TimeUnit unit , long value ) { if ( value >= 0 ) ; return Convert ( unit , TimeUnit . Hours , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	reports.healthStatus != null	1	60	0	private void ConfigureCsvReports ( ) { if ( reports . healthStatus != null ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	reports . healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToDays(Metrics.TimeUnit unit, System.Int64 value)	unit != null	1	7	0	public static long ToDays ( this TimeUnit unit , long value ) { if ( unit != null ) ; return Convert ( unit , TimeUnit . Days , value ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( rate != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Milliseconds != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Milliseconds != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.alpha >= count.value	0.291666666666667	28	68	public void Mark ( long count ) { if ( m5Rate . alpha >= count . value ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Bytes != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToDays(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Days != null	1	7	0	public static long ToDays ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Days != null ) ; return Convert ( unit , TimeUnit . Days , value ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate >= 0	0.0114942528735632	1	86	public double GetRate ( TimeUnit rateUnit ) { if ( rate >= 0 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Percentile95	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Percentile95 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Minutes != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Minutes != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToDays(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Hours != null	1	7	0	public static long ToDays ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Hours != null ) ; return Convert ( unit , TimeUnit . Days , value ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	reports.healthStatus.Equals(healthStatus)	1	60	0	private void ConfigureCsvReports ( ) { if ( reports . healthStatus . Equals ( healthStatus ) ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	reports . healthStatus . Equals ( healthStatus )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.alpha >= m15Rate.alpha	1	96	0	public void Mark ( long count ) { if ( m5Rate . alpha >= m15Rate . alpha ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToDays(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Microseconds != null	1	7	0	public static long ToDays ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return Convert ( unit , TimeUnit . Days , value ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate >= alpha	0.0114942528735632	1	86	public double GetRate ( TimeUnit rateUnit ) { if ( rate >= alpha ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Nanoseconds != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Bytes.Equals(unit)	0.1	9	81	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Bytes . Equals ( unit ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Bytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToDays(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Milliseconds != null	1	7	0	public static long ToDays ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return Convert ( unit , TimeUnit . Days , value ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	reports.metricsDataProvider != null	1	60	0	private void ConfigureCsvReports ( ) { if ( reports . metricsDataProvider != null ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	reports . metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate <= interval	0.0114942528735632	1	86	public double GetRate ( TimeUnit rateUnit ) { if ( rate <= interval ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Seconds != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.alpha <= m15Rate.interval	1	96	0	public void Mark ( long count ) { if ( m5Rate . alpha <= m15Rate . interval ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Percentile98	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Percentile98 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToDays(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Minutes != null	1	7	0	public static long ToDays ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Minutes != null ) ; return Convert ( unit , TimeUnit . Days , value ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Calls != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate.value == 0	0.620689655172414	54	33	public double GetRate ( TimeUnit rateUnit ) { if ( rate . value == 0 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ConfigureCsvReports()	reports.reports != null	1	60	0	private void ConfigureCsvReports ( ) { if ( reports . reports != null ) ; try { var csvMetricsPath = ConfigurationManager . AppSettings [ "Metrics.CSV.Path" ] ; var csvMetricsInterval = ConfigurationManager . AppSettings [ "Metrics.CSV.Interval.Seconds" ] ; if ( ! string . IsNullOrEmpty ( csvMetricsPath ) && ! string . IsNullOrEmpty ( csvMetricsInterval ) ) { int seconds ; if ( int . TryParse ( csvMetricsInterval , out seconds ) && seconds > 0 ) { this . WithReporting ( r => r . WithCSVReports ( csvMetricsPath , TimeSpan . FromSeconds ( seconds ) ) ) ; log . Debug ( ( ) => string . Format ( "Metrics:StoringCSVreportsin{0}every{1}seconds." , csvMetricsPath , csvMetricsInterval ) ) ; } } } catch ( Exception x ) { log . ErrorException ( "Metrics:ErrorconfiguringCSVreports" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CSV.PathmusebeavalidpathandMetrics.CSV.Interval.Secondsmustbeaninteger>0" , x ) ; } }	reports . reports != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToDays(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Nanoseconds != null	1	7	0	public static long ToDays ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return Convert ( unit , TimeUnit . Days , value ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate.value >= 0	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( rate . value >= 0 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.alpha <= m1Rate.alpha	1	96	0	public void Mark ( long count ) { if ( m5Rate . alpha <= m1Rate . alpha ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . alpha <= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ReadGlobalyDisableMetricsSetting()	Metrics.MetricsConfig.GlobalyDisabledMetrics == false	1	85	0	private static bool ReadGlobalyDisableMetricsSetting ( ) { if ( Metrics . MetricsConfig . GlobalyDisabledMetrics == false ) ; try { var isDisabled = ConfigurationManager . AppSettings [ "Metrics.CompletelyDisableMetrics" ] ; if ( ! string . IsNullOrEmpty ( isDisabled ) && isDisabled . ToUpperInvariant ( ) == "TRUE" ) { return true ; } return false ; } catch ( Exception x ) { log . ErrorException ( "Metrics:Errordisablingmetricslibrary" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CompletelyDisableMetricsmustbesettotrueorfalse" , x ) ; } }	Metrics . MetricsConfig . GlobalyDisabledMetrics == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToDays(Metrics.TimeUnit unit, System.Int64 value)	Metrics.TimeUnit.Seconds != null	1	7	0	public static long ToDays ( this TimeUnit unit , long value ) { if ( Metrics . TimeUnit . Seconds != null ) ; return Convert ( unit , TimeUnit . Days , value ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	tags != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( tags != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate.value <= 0	0.620689655172414	54	33	public double GetRate ( TimeUnit rateUnit ) { if ( rate . value <= 0 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.0222222222222222	2	88	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Percentile99	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Percentile99 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\MetricsConfig.cs	Metrics.MetricsConfig.ReadGlobalyDisableMetricsSetting()	Metrics.MetricsConfig.log != null	1	85	0	private static bool ReadGlobalyDisableMetricsSetting ( ) { if ( Metrics . MetricsConfig . log != null ) ; try { var isDisabled = ConfigurationManager . AppSettings [ "Metrics.CompletelyDisableMetrics" ] ; if ( ! string . IsNullOrEmpty ( isDisabled ) && isDisabled . ToUpperInvariant ( ) == "TRUE" ) { return true ; } return false ; } catch ( Exception x ) { log . ErrorException ( "Metrics:Errordisablingmetricslibrary" , x ) ; throw new InvalidOperationException ( "InvalidMetricsConfiguration:Metrics.CompletelyDisableMetricsmustbesettotrueorfalse" , x ) ; } }	Metrics . MetricsConfig . log != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.ToDays(Metrics.TimeUnit unit, System.Int64 value)	value >= 0	1	7	0	public static long ToDays ( this TimeUnit unit , long value ) { if ( value >= 0 ) ; return Convert ( unit , TimeUnit . Days , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.alpha <= m1Rate.interval	1	96	0	public void Mark ( long count ) { if ( m5Rate . alpha <= m1Rate . interval ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . alpha <= m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	tags.tags == null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( tags . tags == null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate.value <= alpha	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( rate . value <= alpha ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate . value <= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Unit(Metrics.TimeUnit unit)	unit != null	1	49	0	public static string Unit ( this TimeUnit unit ) { if ( unit != null ) ; switch ( unit ) { case TimeUnit . Nanoseconds : return "ns" ; case TimeUnit . Microseconds : return "us" ; case TimeUnit . Milliseconds : return "ms" ; case TimeUnit . Seconds : return "s" ; case TimeUnit . Minutes : return "min" ; case TimeUnit . Hours : return "h" ; case TimeUnit . Days : return "day" ; default : throw new ArgumentOutOfRangeException ( "unit" ) ; } }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate.value <= interval	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( rate . value <= interval ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate . value <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.977777777777778	88	2	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Commands != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Unit(Metrics.TimeUnit unit)	Metrics.TimeUnit.Days != null	1	49	0	public static string Unit ( this TimeUnit unit ) { if ( Metrics . TimeUnit . Days != null ) ; switch ( unit ) { case TimeUnit . Nanoseconds : return "ns" ; case TimeUnit . Microseconds : return "us" ; case TimeUnit . Milliseconds : return "ms" ; case TimeUnit . Seconds : return "s" ; case TimeUnit . Minutes : return "min" ; case TimeUnit . Hours : return "h" ; case TimeUnit . Days : return "day" ; default : throw new ArgumentOutOfRangeException ( "unit" ) ; } }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Unit(Metrics.TimeUnit unit)	Metrics.TimeUnit.Hours != null	1	49	0	public static string Unit ( this TimeUnit unit ) { if ( Metrics . TimeUnit . Hours != null ) ; switch ( unit ) { case TimeUnit . Nanoseconds : return "ns" ; case TimeUnit . Microseconds : return "us" ; case TimeUnit . Milliseconds : return "ms" ; case TimeUnit . Seconds : return "s" ; case TimeUnit . Minutes : return "min" ; case TimeUnit . Hours : return "h" ; case TimeUnit . Days : return "day" ; default : throw new ArgumentOutOfRangeException ( "unit" ) ; } }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.initialized == false	0.71875	69	27	public void Mark ( long count ) { if ( m5Rate . initialized == false ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rate.value <= rate	0.0114942528735632	1	86	public double GetRate ( TimeUnit rateUnit ) { if ( rate . value <= rate ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rate . value <= rate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.SampleSize >= histogram.Percentile999	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . SampleSize >= histogram . Percentile999 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . SampleSize >= histogram . Percentile999
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Unit(Metrics.TimeUnit unit)	Metrics.TimeUnit.Microseconds != null	1	49	0	public static string Unit ( this TimeUnit unit ) { if ( Metrics . TimeUnit . Microseconds != null ) ; switch ( unit ) { case TimeUnit . Nanoseconds : return "ns" ; case TimeUnit . Microseconds : return "us" ; case TimeUnit . Milliseconds : return "ms" ; case TimeUnit . Seconds : return "s" ; case TimeUnit . Minutes : return "min" ; case TimeUnit . Hours : return "h" ; case TimeUnit . Days : return "day" ; default : throw new ArgumentOutOfRangeException ( "unit" ) ; } }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.75	66	22	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . MetricTags . empty != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Unit(Metrics.TimeUnit unit)	Metrics.TimeUnit.Milliseconds != null	1	49	0	public static string Unit ( this TimeUnit unit ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; switch ( unit ) { case TimeUnit . Nanoseconds : return "ns" ; case TimeUnit . Microseconds : return "us" ; case TimeUnit . Milliseconds : return "ms" ; case TimeUnit . Seconds : return "s" ; case TimeUnit . Minutes : return "min" ; case TimeUnit . Hours : return "h" ; case TimeUnit . Days : return "day" ; default : throw new ArgumentOutOfRangeException ( "unit" ) ; } }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.0222222222222222	2	88	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Commands >= 0 ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.interval >= 0	1	96	0	public void Mark ( long count ) { if ( m5Rate . interval >= 0 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Unit(Metrics.TimeUnit unit)	Metrics.TimeUnit.Minutes != null	1	49	0	public static string Unit ( this TimeUnit unit ) { if ( Metrics . TimeUnit . Minutes != null ) ; switch ( unit ) { case TimeUnit . Nanoseconds : return "ns" ; case TimeUnit . Microseconds : return "us" ; case TimeUnit . Milliseconds : return "ms" ; case TimeUnit . Seconds : return "s" ; case TimeUnit . Minutes : return "min" ; case TimeUnit . Hours : return "h" ; case TimeUnit . Days : return "day" ; default : throw new ArgumentOutOfRangeException ( "unit" ) ; } }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Meter(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	88	0	public Meter Meter < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . MetricTags . None != null ) ; return this . meters . GetOrAdd ( name , ( ) => { T meter = builder ( ) ; return Tuple . Create ( ( Meter ) meter , new MeterValueSource ( name , meter , unit , rateUnit , tags ) ) ; } ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value == 1	0.126436781609195	11	76	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value == 1 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Unit(Metrics.TimeUnit unit)	Metrics.TimeUnit.Nanoseconds != null	1	49	0	public static string Unit ( this TimeUnit unit ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; switch ( unit ) { case TimeUnit . Nanoseconds : return "ns" ; case TimeUnit . Microseconds : return "us" ; case TimeUnit . Milliseconds : return "ms" ; case TimeUnit . Seconds : return "s" ; case TimeUnit . Minutes : return "min" ; case TimeUnit . Hours : return "h" ; case TimeUnit . Days : return "day" ; default : throw new ArgumentOutOfRangeException ( "unit" ) ; } }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Errors != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\TimeUnitExtensions.cs	Metrics.Utils.TimeUnitExtensions.Unit(Metrics.TimeUnit unit)	Metrics.TimeUnit.Seconds != null	1	49	0	public static string Unit ( this TimeUnit unit ) { if ( Metrics . TimeUnit . Seconds != null ) ; switch ( unit ) { case TimeUnit . Nanoseconds : return "ns" ; case TimeUnit . Microseconds : return "us" ; case TimeUnit . Milliseconds : return "ms" ; case TimeUnit . Seconds : return "s" ; case TimeUnit . Minutes : return "min" ; case TimeUnit . Hours : return "h" ; case TimeUnit . Days : return "day" ; default : throw new ArgumentOutOfRangeException ( "unit" ) ; } }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.GuardAgainstNullLogger(Metrics.Logging.ILog logger)	logger != null	1	60	0	private static void GuardAgainstNullLogger ( ILog logger ) { if ( logger != null ) ; if ( logger == null ) { throw new ArgumentNullException ( "logger" ) ; } }	logger != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	counters != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( counters != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	counters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value == 0	0.229885057471264	20	67	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value == 0 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.interval >= count.value	1	96	0	public void Mark ( long count ) { if ( m5Rate . interval >= count . value ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev >= 0	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev >= 0 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Set(System.Double value)	value == 0	0.296875	19	45	public void Set ( double value ) { if ( value == 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Set(System.Double value)	value >= 0	1	64	0	public void Set ( double value ) { if ( value >= 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Set(System.Double value)	value <= 0	0.296875	19	45	public void Set ( double value ) { if ( value <= 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Set(System.Double value)	value == 0	0.203125	13	51	public void Set ( double value ) { if ( value == 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value >= 1	0.252873563218391	22	65	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value >= 1 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Set(System.Double value)	value >= 0	1	64	0	public void Set ( double value ) { if ( value >= 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Set(System.Double value)	value <= 0	0.203125	13	51	public void Set ( double value ) { if ( value <= 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Set(System.Double value)	value >= value	0.09375	6	58	public void Set ( double value ) { if ( value >= value ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value >= value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Events != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Get()	value == 0	0.511363636363636	45	43	public double Get ( ) { if ( value == 0 ) ; return Thread . VolatileRead ( ref this . value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Get()	value >= 0	1	88	0	public double Get ( ) { if ( value >= 0 ) ; return Thread . VolatileRead ( ref this . value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\VolatileDouble.cs	Metrics.Utils.VolatileDouble.Get()	value <= 0	0.511363636363636	45	43	public double Get ( ) { if ( value <= 0 ) ; return Thread . VolatileRead ( ref this . value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	counters.metrics != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( counters . metrics != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	counters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value >= 0	0.758620689655172	66	21	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value >= 0 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.interval >= m15Rate.alpha	1	96	0	public void Mark ( long count ) { if ( m5Rate . interval >= m15Rate . alpha ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev <= histogram.Count	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev <= histogram . Count ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev <= histogram . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value <= 1	0.333333333333333	29	58	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value <= 1 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Items != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.interval == m15Rate.interval	1	96	0	public void Mark ( long count ) { if ( m5Rate . interval == m15Rate . interval ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	gauges != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( gauges != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	gauges != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value <= 0	0.229885057471264	20	67	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value <= 0 ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . KiloBytes != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value >= alpha	0.310344827586207	27	60	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value >= alpha ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev >= histogram.LastValue	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev >= histogram . LastValue ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev >= histogram . LastValue
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	gauges.metrics != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( gauges . metrics != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	gauges . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.interval >= m1Rate.alpha	1	96	0	public void Mark ( long count ) { if ( m5Rate . interval >= m1Rate . alpha ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value <= alpha	0.229885057471264	20	67	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value <= alpha ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value <= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ParsePrefixPath(System.String listenerUriPrefix)	listenerUriPrefix != null	1	50	0	private static string ParsePrefixPath ( string listenerUriPrefix ) { if ( listenerUriPrefix != null ) ; var match = Regex . Match ( listenerUriPrefix , @"http://(?:[^/]*)(?:\:\d+)?/(.*)" ) ; if ( match . Success ) { return match . Groups [ 1 ] . Value . ToLowerInvariant ( ) ; } else { return string . Empty ; } }	listenerUriPrefix != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . MegaBytes != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value <= interval	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value <= interval ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	histograms != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( histograms != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	histograms != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.interval == m1Rate.interval	1	96	0	public void Mark ( long count ) { if ( m5Rate . interval == m1Rate . interval ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . interval == m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value >= rate.value	0.252873563218391	22	65	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value >= rate . value ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value >= rate . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev >= histogram.Max	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev >= histogram . Max ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev >= histogram . Max
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	histograms.metrics != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( histograms . metrics != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	histograms . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . None != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value <= rate.value	0.114942528735632	10	77	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value <= rate . value ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value <= rate . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.interval >= m5Rate.alpha	1	96	0	public void Mark ( long count ) { if ( m5Rate . interval >= m5Rate . alpha ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . interval >= m5Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	uncounted.value <= rate	0.0114942528735632	1	86	public double GetRate ( TimeUnit rateUnit ) { if ( uncounted . value <= rate ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	uncounted . value <= rate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	meters != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( meters != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	meters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	rateUnit != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( rateUnit != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev >= histogram.Mean	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev >= histogram . Mean ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev >= histogram . Mean
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.None.Equals(unit)	0.0111111111111111	1	89	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . None . Equals ( unit ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . None . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ParsePrefixPath(System.String listenerUriPrefix)	listenerUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/HttpEndpointCanBeDisposed/")	0.16	8	42	private static string ParsePrefixPath ( string listenerUriPrefix ) { if ( listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/HttpEndpointCanBeDisposed/" ) ) ; var match = Regex . Match ( listenerUriPrefix , @"http://(?:[^/]*)(?:\:\d+)?/(.*)" ) ; if ( match . Success ) { return match . Groups [ 1 ] . Value . ToLowerInvariant ( ) ; } else { return string . Empty ; } }	listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/HttpEndpointCanBeDisposed/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Days != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Days != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.rate != null	1	96	0	public void Mark ( long count ) { if ( m5Rate . rate != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	meters.metrics != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( meters . metrics != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	meters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Hours != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Hours != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Microseconds != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Percent != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.GuardAgainstNullLogger(Metrics.Logging.ILog logger)	logger >= 0	0.0166666666666667	1	59	private static void GuardAgainstNullLogger ( ILog logger ) { if ( logger >= 0 ) ; if ( logger == null ) { throw new ArgumentNullException ( "logger" ) ; } }	logger >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	timers != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( timers != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	timers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.rate.Equals(m15Rate.rate)	0.503496503496504	72	71	public void Mark ( long count ) { if ( m5Rate . rate . Equals ( m15Rate . rate ) ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . rate . Equals ( m15Rate . rate )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Milliseconds != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev <= histogram.Median	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev <= histogram . Median ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev <= histogram . Median
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	timers.metrics != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( timers . metrics != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	timers . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ParsePrefixPath(System.String listenerUriPrefix)	listenerUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/OccupiedPort/")	0.26	13	37	private static string ParsePrefixPath ( string listenerUriPrefix ) { if ( listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/OccupiedPort/" ) ) ; var match = Regex . Match ( listenerUriPrefix , @"http://(?:[^/]*)(?:\:\d+)?/(.*)" ) ; if ( match . Success ) { return match . Groups [ 1 ] . Value . ToLowerInvariant ( ) ; } else { return string . Empty ; } }	listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/OccupiedPort/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( name != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Minutes != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Minutes != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Requests != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("Post & Put Request Size")	0.188235294117647	16	69	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( name . ToString ( ) . Equals ( "Post&PutRequestSize" ) ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "Post&PutRequestSize" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev >= histogram.Min	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev >= histogram . Min ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev >= histogram . Min
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.rate.Equals(m1Rate.rate)	0.503496503496504	72	71	public void Mark ( long count ) { if ( m5Rate . rate . Equals ( m1Rate . rate ) ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . rate . Equals ( m1Rate . rate )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("HTTP JSON Size")	0.117647058823529	10	75	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( name . ToString ( ) . Equals ( "HTTPJSONSize" ) ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "HTTPJSONSize" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.uncounted != null	1	96	0	public void Mark ( long count ) { if ( m5Rate . uncounted != null ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ParsePrefixPath(System.String listenerUriPrefix)	listenerUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/sameendpoint/")	0.06	3	47	private static string ParsePrefixPath ( string listenerUriPrefix ) { if ( listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/sameendpoint/" ) ) ; var match = Regex . Match ( listenerUriPrefix , @"http://(?:[^/]*)(?:\:\d+)?/(.*)" ) ; if ( match . Success ) { return match . Groups [ 1 ] . Value . ToLowerInvariant ( ) ; } else { return string . Empty ; } }	listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/sameendpoint/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Requests.Equals(unit)	0.0222222222222222	2	88	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Requests . Equals ( unit ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Requests . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.AsFunc(T value)	value != null	1	32	0	private static Func < T > AsFunc < T > ( this T value ) where T : class { if ( value != null ) ; return value . Return ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev <= histogram.Percentile75	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev <= histogram . Percentile75 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev <= histogram . Percentile75
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Nanoseconds != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ParsePrefixPath(System.String listenerUriPrefix)	listenerUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/DisposeMeTwice/")	0.1	5	45	private static string ParsePrefixPath ( string listenerUriPrefix ) { if ( listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/DisposeMeTwice/" ) ) ; var match = Regex . Match ( listenerUriPrefix , @"http://(?:[^/]*)(?:\:\d+)?/(.*)" ) ; if ( match . Success ) { return match . Groups [ 1 ] . Value . ToLowerInvariant ( ) ; } else { return string . Empty ; } }	listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/DisposeMeTwice/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Seconds != null	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Seconds != null ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.0352941176470588	3	82	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Results != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.GetRate(Metrics.TimeUnit rateUnit)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	87	0	public double GetRate ( TimeUnit rateUnit ) { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return rate . Get ( ) * rateUnit . ToNanoseconds ( 1L ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	builder != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( builder != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	alpha >= 0	1	33	0	public void Reset ( ) { if ( alpha >= 0 ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . Unit . Threads != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.uncounted.Equals(count)	0.266409266409266	69	190	public void Mark ( long count ) { if ( m5Rate . uncounted . Equals ( count ) ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	builder >= 0	0.0117647058823529	1	84	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( builder >= 0 ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	builder >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	initialized == false	0.606060606060606	20	13	public void Reset ( ) { if ( initialized == false ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev <= histogram.Percentile95	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev <= histogram . Percentile95 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev <= histogram . Percentile95
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	tags != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( tags != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ParsePrefixPath(System.String listenerUriPrefix)	listenerUriPrefix.ToString().Equals("http://localhost:58888/metricstest/HttpListenerTests/DisposeMeOnce/")	0.18	9	41	private static string ParsePrefixPath ( string listenerUriPrefix ) { if ( listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/DisposeMeOnce/" ) ) ; var match = Regex . Match ( listenerUriPrefix , @"http://(?:[^/]*)(?:\:\d+)?/(.*)" ) ; if ( match . Success ) { return match . Groups [ 1 ] . Value . ToLowerInvariant ( ) ; } else { return string . Empty ; } }	listenerUriPrefix . ToString ( ) . Equals ( "http://localhost:58888/metricstest/HttpListenerTests/DisposeMeOnce/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.uncounted.Equals(m15Rate.uncounted)	0.370656370656371	96	163	public void Mark ( long count ) { if ( m5Rate . uncounted . Equals ( m15Rate . uncounted ) ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . uncounted . Equals ( m15Rate . uncounted )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( unit != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( unit . Name != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogExtensions.Return(T value)	value != null	1	32	0	private static T Return < T > ( this T value ) { if ( value != null ) ; return value ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	initialized == true	0.333333333333333	11	22	public void Reset ( ) { if ( initialized == true ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	m5Rate.uncounted.Equals(m1Rate.uncounted)	0.370656370656371	96	163	public void Mark ( long count ) { if ( m5Rate . uncounted . Equals ( m1Rate . uncounted ) ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	m5Rate . uncounted . Equals ( m1Rate . uncounted )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev <= histogram.Percentile98	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev <= histogram . Percentile98 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev <= histogram . Percentile98
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	tags.tags == null	0.944444444444444	85	5	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( tags . tags == null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	count == 1	0.6875	66	30	public void Mark ( long count ) { if ( count == 1 ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev <= histogram.Percentile99	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev <= histogram . Percentile99 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev <= histogram . Percentile99
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	count <= m15Rate.interval	1	96	0	public void Mark ( long count ) { if ( count <= m15Rate . interval ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	count <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	tags.tags.Count == 1	0.0888888888888889	8	82	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( tags . tags . Count == 1 ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	tags . tags . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("bytes")	0.317647058823529	27	58	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( unit . Name . ToString ( ) . Equals ( "bytes" ) ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "bytes" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	cts != null	1	50	0	public void Start ( ) { if ( cts != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	cts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	interval >= 0	1	33	0	public void Reset ( ) { if ( interval >= 0 ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	interval >= alpha	1	33	0	public void Reset ( ) { if ( interval >= alpha ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	interval >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	rate != null	1	33	0	public void Reset ( ) { if ( rate != null ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	count <= m1Rate.interval	1	96	0	public void Mark ( long count ) { if ( count <= m1Rate . interval ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	count <= m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Kb")	0.117647058823529	10	75	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( unit . Name . ToString ( ) . Equals ( "Kb" ) ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "Kb" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	healthStatus != null	1	50	0	public void Start ( ) { if ( healthStatus != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev <= histogram.Percentile999	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev <= histogram . Percentile999 ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev <= histogram . Percentile999
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	rate.value == 0	0.606060606060606	20	13	public void Reset ( ) { if ( rate . value == 0 ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	rate . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Mark(System.Int64 count)	count <= m5Rate.interval	1	96	0	public void Mark ( long count ) { if ( count <= m5Rate . interval ) ; this . count . Add ( count ) ; this . m1Rate . Update ( count ) ; this . m5Rate . Update ( count ) ; this . m15Rate . Update ( count ) ; }	count <= m5Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	rate.value >= 0	1	33	0	public void Reset ( ) { if ( rate . value >= 0 ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	rate . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.633333333333333	57	33	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . MetricTags . empty != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.0352941176470588	3	82	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToHistogram(Metrics.MetricData.HistogramValue histogram)	histogram.StdDev <= histogram.SampleSize	1	49	0	private static HistogramData ToHistogram ( HistogramValue histogram ) { if ( histogram . StdDev <= histogram . SampleSize ) ; return new HistogramData { LastValue = histogram . LastValue , LastUserValue = histogram . LastUserValue , Max = histogram . Max , MaxUserValue = histogram . MaxUserValue , Mean = histogram . Mean , Min = histogram . Min , MinUserValue = histogram . MinUserValue , StdDev = histogram . StdDev , Median = histogram . Median , Percentile75 = histogram . Percentile75 , Percentile95 = histogram . Percentile95 , Percentile98 = histogram . Percentile98 , Percentile99 = histogram . Percentile99 , Percentile999 = histogram . Percentile999 , SampleSize = histogram . SampleSize , } ; }	histogram . StdDev <= histogram . SampleSize
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	count != null	1	33	0	public void Reset ( ) { if ( count != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	rate.value <= 0	0.606060606060606	20	13	public void Reset ( ) { if ( rate . value <= 0 ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	rate . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	rate.value <= alpha	1	33	0	public void Reset ( ) { if ( rate . value <= alpha ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	rate . value <= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	90	0	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( Metrics . MetricTags . None != null ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate != null	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener != null	1	50	0	public void Start ( ) { if ( httpListener != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProvider.GetLogger(System.Type type)	type != null	1	85	0	public static ILog GetLogger ( Type type ) { if ( type != null ) ; return GetLogger ( type . FullName ) ; }	type != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Bytes != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	count.value == 1	0.606060606060606	20	13	public void Reset ( ) { if ( count . value == 1 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	count . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Count >= 0	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Count >= 0 ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Count >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	rate.value <= interval	1	33	0	public void Reset ( ) { if ( rate . value <= interval ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	rate . value <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Bytes.Equals(unit)	0.317647058823529	27	58	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Bytes . Equals ( unit ) ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Bytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Calls != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	count.value >= 1	0.666666666666667	22	11	public void Reset ( ) { if ( count . value >= 1 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	count . value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.FifteenMinuteRate >= 0	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . FifteenMinuteRate >= 0 ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . FifteenMinuteRate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	uncounted != null	1	33	0	public void Reset ( ) { if ( uncounted != null ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, Metrics.MetricTags tags)	tags.tags.All(x => x != null)	0.0888888888888889	8	82	public Counter Counter ( string name , Unit unit , MetricTags tags ) { if ( tags . tags . All ( x => x != null ) ) ; return this . Counter ( name , unit , ( ) => this . metricsBuilder . BuildCounter ( name , unit ) , tags ) ; }	tags . tags . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener >= 0	0.02	1	49	public void Start ( ) { if ( httpListener >= 0 ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.0352941176470588	3	82	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	count.value >= 0	0.363636363636364	12	21	public void Reset ( ) { if ( count . value >= 0 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	count . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	childContexts != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( childContexts != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	uncounted.value == 1	0.606060606060606	20	13	public void Reset ( ) { if ( uncounted . value == 1 ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	uncounted . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.988235294117647	84	1	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Commands != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_AuthenticationDelegate == null	1	50	0	public void Start ( ) { if ( httpListener . m_AuthenticationDelegate == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_AuthenticationDelegate == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.0117647058823529	1	84	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Commands >= 0 ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	count.value <= 1	0.606060606060606	20	13	public void Reset ( ) { if ( count . value <= 1 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	count . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.FiveMinuteRate >= 0	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . FiveMinuteRate >= 0 ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . FiveMinuteRate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_AuthenticationScheme != null	1	50	0	public void Start ( ) { if ( httpListener . m_AuthenticationScheme != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_AuthenticationScheme != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	uncounted.value >= 1	0.666666666666667	22	11	public void Reset ( ) { if ( uncounted . value >= 1 ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	uncounted . value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	isDisabled == false	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( isDisabled == false ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate != null	1	33	0	public void Reset ( ) { if ( m15Rate != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Errors != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	uncounted.value >= 0	0.363636363636364	12	21	public void Reset ( ) { if ( uncounted . value >= 0 ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	uncounted . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProvider.GetLogger(System.String name)	name != null	1	85	0	public static ILog GetLogger ( string name ) { if ( name != null ) ; ILogProvider logProvider = _currentLogProvider ?? ResolveLogProvider ( ) ; return logProvider == null ? new NoOpLogger ( ) : ( ILog ) new LoggerExecutionWrapper ( logProvider . GetLogger ( name ) ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.alpha >= 0	1	33	0	public void Reset ( ) { if ( m15Rate . alpha >= 0 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	uncounted.value <= 1	0.606060606060606	20	13	public void Reset ( ) { if ( uncounted . value <= 1 ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	uncounted . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.FiveMinuteRate <= rate.Count	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . FiveMinuteRate <= rate . Count ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . FiveMinuteRate <= rate . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	metricsBuilder != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( metricsBuilder != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	uncounted.value >= alpha	1	33	0	public void Reset ( ) { if ( uncounted . value >= alpha ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	uncounted . value >= alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Events != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.alpha <= count.value	1	33	0	public void Reset ( ) { if ( m15Rate . alpha <= count . value ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.initialized == false	0.606060606060606	20	13	public void Reset ( ) { if ( m15Rate . initialized == false ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Items != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items.Count == 1	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items . Count == 1 ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	uncounted.value <= interval	1	33	0	public void Reset ( ) { if ( uncounted . value <= interval ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	uncounted . value <= interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	registry != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( registry != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.initialized == true	0.333333333333333	11	22	public void Reset ( ) { if ( m15Rate . initialized == true ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_DefaultServiceNames != null	1	50	0	public void Start ( ) { if ( httpListener . m_DefaultServiceNames != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_DefaultServiceNames != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\EWMA.cs	Metrics.Utils.EWMA.Reset()	uncounted.value >= rate.value	0.363636363636364	12	21	public void Reset ( ) { if ( uncounted . value >= rate . value ) ; uncounted . SetValue ( 0L ) ; rate . Set ( 0.0 ) ; }	uncounted . value >= rate . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items >= rate.Count	0.0204081632653061	1	48	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items >= rate . Count ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items >= rate . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . KiloBytes != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value == 0	0.130434782608696	9	60	public void SetValue ( long value ) { if ( value == 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.interval >= 0	1	33	0	public void Reset ( ) { if ( m15Rate . interval >= 0 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( name != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value == 1	0.27536231884058	19	50	public void SetValue ( long value ) { if ( value == 1 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes.Equals(unit)	0.117647058823529	10	75	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . KiloBytes . Equals ( unit ) ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . KiloBytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items >= rate.FifteenMinuteRate	0.0204081632653061	1	48	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items >= rate . FifteenMinuteRate ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items >= rate . FifteenMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_DefaultServiceNames >= 0	0.02	1	49	public void Start ( ) { if ( httpListener . m_DefaultServiceNames >= 0 ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_DefaultServiceNames >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.interval >= count.value	1	33	0	public void Reset ( ) { if ( m15Rate . interval >= count . value ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value >= 0	0.695652173913043	48	21	public void SetValue ( long value ) { if ( value >= 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . MegaBytes != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name.ToString().Equals("Active Requests")	0.285714285714286	26	65	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "ActiveRequests" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	name . ToString ( ) . Equals ( "ActiveRequests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items >= rate.FiveMinuteRate	0.0204081632653061	1	48	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items >= rate . FiveMinuteRate ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items >= rate . FiveMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProvider.GetLogger(System.String name)	name.ToString().Equals("Metrics.MetricsConfig")	0.294117647058824	25	60	public static ILog GetLogger ( string name ) { if ( name . ToString ( ) . Equals ( "Metrics.MetricsConfig" ) ) ; ILogProvider logProvider = _currentLogProvider ?? ResolveLogProvider ( ) ; return logProvider == null ? new NoOpLogger ( ) : ( ILog ) new LoggerExecutionWrapper ( logProvider . GetLogger ( name ) ) ; }	name . ToString ( ) . Equals ( "Metrics.MetricsConfig" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.interval >= m15Rate.alpha	1	33	0	public void Reset ( ) { if ( m15Rate . interval >= m15Rate . alpha ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value >= 1	0.318840579710145	22	47	public void SetValue ( long value ) { if ( value >= 1 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name.ToString().Equals("test")	0.0989010989010989	9	82	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "test" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	name . ToString ( ) . Equals ( "test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items != null	0.183673469387755	9	40	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . None != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_DisconnectResults == null	1	50	0	public void Start ( ) { if ( httpListener . m_DisconnectResults == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_DisconnectResults == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value <= 0	0.130434782608696	9	60	public void SetValue ( long value ) { if ( value <= 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value <= 1	0.347826086956522	24	45	public void SetValue ( long value ) { if ( value <= 1 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value == 32	0.130434782608696	9	60	public void SetValue ( long value ) { if ( value == 32 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value == 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.rate != null	1	33	0	public void Reset ( ) { if ( m15Rate . rate != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value == 0	0.463768115942029	32	37	public void SetValue ( long value ) { if ( value == 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items.All(x => x != null)	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items . All ( x => x != null ) ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.021978021978022	2	89	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Percent != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name.ToString().Equals("counter")	0.010989010989011	1	90	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "counter" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	name . ToString ( ) . Equals ( "counter" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Requests != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_ExtendedProtectionPolicy != null	1	50	0	public void Start ( ) { if ( httpListener . m_ExtendedProtectionPolicy != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_ExtendedProtectionPolicy != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value >= 32	0.130434782608696	9	60	public void SetValue ( long value ) { if ( value >= 32 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value >= 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items.Item.All(x => x != null)	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items . Item . All ( x => x != null ) ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items . Item . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value >= 0	0.884057971014493	61	8	public void SetValue ( long value ) { if ( value >= 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.uncounted != null	1	33	0	public void Reset ( ) { if ( m15Rate . uncounted != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value <= 32	0.231884057971014	16	53	public void SetValue ( long value ) { if ( value <= 32 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value <= 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value <= 0	0.463768115942029	32	37	public void SetValue ( long value ) { if ( value <= 0 ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name.ToString().Equals("custom")	0.010989010989011	1	90	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( name . ToString ( ) . Equals ( "custom" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	name . ToString ( ) . Equals ( "custom" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.SetValue(System.Int64 value)	value <= value	0.159420289855072	11	58	public void SetValue ( long value ) { if ( value <= value ) ; Thread . VolatileWrite ( ref this . value , value ) ; }	value <= value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items.Item.Count == 1	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items . Item . Count == 1 ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items . Item . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m15Rate.uncounted.Equals(count)	0.606060606060606	20	13	public void Reset ( ) { if ( m15Rate . uncounted . Equals ( count ) ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m15Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Results != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_ExtendedProtectionSelectorDelegate == null	1	50	0	public void Start ( ) { if ( httpListener . m_ExtendedProtectionSelectorDelegate == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_ExtendedProtectionSelectorDelegate == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value == 0	0.319587628865979	31	66	public long Add ( long value ) { if ( value == 0 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( unit != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate != null	1	33	0	public void Reset ( ) { if ( m1Rate != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Threads != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items.Percent.All(x => x >= 0)	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items . Percent . All ( x => x >= 0 ) ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items . Percent . All ( x => x >= 0 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value >= 0	1	97	0	public long Add ( long value ) { if ( value >= 0 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( unit . Name != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.alpha >= 0	1	33	0	public void Reset ( ) { if ( m1Rate . alpha >= 0 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items.Percent.Count == 1	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items . Percent . Count == 1 ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items . Percent . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_ExtraSavedDigests == null	1	50	0	public void Start ( ) { if ( httpListener . m_ExtraSavedDigests == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_ExtraSavedDigests == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value <= 0	0.319587628865979	31	66	public long Add ( long value ) { if ( value <= 0 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value <= 1	0.443298969072165	43	54	public long Add ( long value ) { if ( value <= 1 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name.ToString().Equals("ActiveRequests")	0.285714285714286	26	65	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "ActiveRequests" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "ActiveRequests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	tags != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( tags != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.alpha <= count.value	1	33	0	public void Reset ( ) { if ( m1Rate . alpha <= count . value ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LoggerExecutionWrapper.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	_logger != null	1	60	0	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception = null , params object [ ] formatParameters ) { if ( _logger != null ) ; if ( messageFunc == null ) { return _logger . Log ( logLevel , null ) ; } Func < string > wrappedMessageFunc = ( ) => { try { return messageFunc ( ) ; } catch ( Exception ex ) { Log ( LogLevel . Error , ( ) => FailedToGenerateLogMessage , ex ) ; } return null ; } ; return _logger . Log ( logLevel , wrappedMessageFunc , exception , formatParameters ) ; }	_logger != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value == 1	0.494845360824742	48	49	public long Add ( long value ) { if ( value == 1 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items.Percent.Count == rate.Count	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items . Percent . Count == rate . Count ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items . Percent . Count == rate . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.alpha >= m15Rate.alpha	1	33	0	public void Reset ( ) { if ( m1Rate . alpha >= m15Rate . alpha ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value >= 1	0.855670103092783	83	14	public long Add ( long value ) { if ( value >= 1 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name.ToString().Equals("")	0.010989010989011	1	90	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value >= -1	0.154639175257732	15	82	public long Add ( long value ) { if ( value >= - 1 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value >= - 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	tags.tags == null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( tags . tags == null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value >= -32	0.391752577319588	38	59	public long Add ( long value ) { if ( value >= - 32 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value >= - 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_ExtraSavedDigestsBaking == null	1	50	0	public void Start ( ) { if ( httpListener . m_ExtraSavedDigestsBaking == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_ExtraSavedDigestsBaking == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value >= 0	0.535353535353535	53	46	public long Add ( long value ) { if ( value >= 0 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Requests")	0.021978021978022	2	89	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "Requests" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Requests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.alpha <= m15Rate.interval	1	33	0	public void Reset ( ) { if ( m1Rate . alpha <= m15Rate . interval ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items.Value.All(x => x != null)	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items . Value . All ( x => x != null ) ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items . Value . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name.ToString().Equals("bytes")	0.0769230769230769	7	84	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "bytes" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "bytes" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.initialized == false	0.606060606060606	20	13	public void Reset ( ) { if ( m1Rate . initialized == false ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_ExtraSavedDigestsTimestamp == 0	1	50	0	public void Start ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp == 0 ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_ExtraSavedDigestsTimestamp == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value <= 1	0.567010309278351	55	42	public long Add ( long value ) { if ( value <= 1 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.Items.Value.Count == 1	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . Items . Value . Count == 1 ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . Items . Value . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.initialized == true	0.333333333333333	11	22	public void Reset ( ) { if ( m1Rate . initialized == true ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.032967032967033	3	88	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value <= 32	0.11340206185567	11	86	public long Add ( long value ) { if ( value <= 32 ) ; return Interlocked . Add ( ref this . value , value ) ; }	value <= 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.MeanRate == 1	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . MeanRate == 1 ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . MeanRate == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.interval >= 0	1	33	0	public void Reset ( ) { if ( m1Rate . interval >= 0 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Add(System.Int64 value)	value >= value	0.484536082474227	47	50	public long Add ( long value ) { if ( value >= value ) ; return Interlocked . Add ( ref this . value , value ) ; }	value >= value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Increment()	value == 0	0.232323232323232	23	76	public long Increment ( ) { if ( value == 0 ) ; return Interlocked . Increment ( ref this . value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.705882352941177	60	25	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . MetricTags . empty != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Bytes != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_ExtraSavedDigestsTimestamp <= httpListener.m_DefaultServiceNames	0.02	1	49	public void Start ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp <= httpListener . m_DefaultServiceNames ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_ExtraSavedDigestsTimestamp <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Increment()	value >= 0	1	99	0	public long Increment ( ) { if ( value >= 0 ) ; return Interlocked . Increment ( ref this . value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Histogram(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	85	0	public Histogram Histogram < T > ( string name , Func < T > builder , Unit unit , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . MetricTags . None != null ) ; return this . histograms . GetOrAdd ( name , ( ) => { T histogram = builder ( ) ; return Tuple . Create ( ( Histogram ) histogram , new HistogramValueSource ( name , histogram , unit , tags ) ) ; } ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LoggerExecutionWrapper.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	logLevel != null	1	60	0	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception = null , params object [ ] formatParameters ) { if ( logLevel != null ) ; if ( messageFunc == null ) { return _logger . Log ( logLevel , null ) ; } Func < string > wrappedMessageFunc = ( ) => { try { return messageFunc ( ) ; } catch ( Exception ex ) { Log ( LogLevel . Error , ( ) => FailedToGenerateLogMessage , ex ) ; } return null ; } ; return _logger . Log ( logLevel , wrappedMessageFunc , exception , formatParameters ) ; }	logLevel != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.MeanRate <= rate.Count	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . MeanRate <= rate . Count ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . MeanRate <= rate . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Increment()	value <= 1	0.282828282828283	28	71	public long Increment ( ) { if ( value <= 1 ) ; return Interlocked . Increment ( ref this . value ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	counters != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( counters != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	counters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Bytes.Equals(unit)	0.0769230769230769	7	84	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Bytes . Equals ( unit ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Bytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Increment()	value <= 0	0.232323232323232	23	76	public long Increment ( ) { if ( value <= 0 ) ; return Interlocked . Increment ( ref this . value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.interval >= count.value	1	33	0	public void Reset ( ) { if ( m1Rate . interval >= count . value ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Increment()	value <= 1000	0.202020202020202	20	79	public long Increment ( ) { if ( value <= 1000 ) ; return Interlocked . Increment ( ref this . value ) ; }	value <= 1000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.MeanRate <= rate.FifteenMinuteRate	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . MeanRate <= rate . FifteenMinuteRate ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . MeanRate <= rate . FifteenMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_ExtraSavedDigestsTimestamp <= httpListener	0.02	1	49	public void Start ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp <= httpListener ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_ExtraSavedDigestsTimestamp <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	counters.metrics != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( counters . metrics != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	counters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Calls != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Increment()	value != null	0.0707070707070707	7	92	public long Increment ( ) { if ( value != null ) ; return Interlocked . Increment ( ref this . value ) ; }	value != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.interval >= m15Rate.alpha	1	33	0	public void Reset ( ) { if ( m1Rate . interval >= m15Rate . alpha ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Decrement()	value == 1	0.567164179104478	38	29	public long Decrement ( ) { if ( value == 1 ) ; return Interlocked . Decrement ( ref this . value ) ; }	value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	gauges != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( gauges != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	gauges != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.MeanRate <= rate.FiveMinuteRate	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . MeanRate <= rate . FiveMinuteRate ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . MeanRate <= rate . FiveMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.interval == m15Rate.interval	1	33	0	public void Reset ( ) { if ( m1Rate . interval == m15Rate . interval ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Decrement()	value == 0	0.0597014925373134	4	63	public long Decrement ( ) { if ( value == 0 ) ; return Interlocked . Decrement ( ref this . value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.032967032967033	3	88	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Decrement()	value >= 1	0.641791044776119	43	24	public long Decrement ( ) { if ( value >= 1 ) ; return Interlocked . Decrement ( ref this . value ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Decrement()	value >= 0	0.328358208955224	22	45	public long Decrement ( ) { if ( value >= 0 ) ; return Interlocked . Decrement ( ref this . value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.978021978021978	89	2	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Commands != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	gauges.metrics != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( gauges . metrics != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	gauges . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_IgnoreWriteExceptions == false	1	50	0	public void Start ( ) { if ( httpListener . m_IgnoreWriteExceptions == false ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_IgnoreWriteExceptions == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Decrement()	value <= 1	0.701492537313433	47	20	public long Decrement ( ) { if ( value <= 1 ) ; return Interlocked . Decrement ( ref this . value ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.interval >= m1Rate.alpha	1	33	0	public void Reset ( ) { if ( m1Rate . interval >= m1Rate . alpha ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.MeanRate <= rate.Items	0.0204081632653061	1	48	private static RateData ToRate ( MeterValue rate ) { if ( rate . MeanRate <= rate . Items ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . MeanRate <= rate . Items
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.Decrement()	value <= 0	0.134328358208955	9	58	public long Decrement ( ) { if ( value <= 0 ) ; return Interlocked . Decrement ( ref this . value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	histograms != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( histograms != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	histograms != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.021978021978022	2	89	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Commands >= 0 ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_InternalLock != null	1	50	0	public void Start ( ) { if ( httpListener . m_InternalLock != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_InternalLock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.OneMinuteRate >= 0	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . OneMinuteRate >= 0 ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . OneMinuteRate >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndReset()	value == 0	0.0192307692307692	1	51	public long GetAndReset ( ) { if ( value == 0 ) ; return GetAndSet ( 0L ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.rate != null	1	33	0	public void Reset ( ) { if ( m1Rate . rate != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Errors != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.rate.Equals(m15Rate.rate)	0.606060606060606	20	13	public void Reset ( ) { if ( m1Rate . rate . Equals ( m15Rate . rate ) ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . rate . Equals ( m15Rate . rate )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LoggerExecutionWrapper.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	messageFunc != null	0.466666666666667	28	32	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception = null , params object [ ] formatParameters ) { if ( messageFunc != null ) ; if ( messageFunc == null ) { return _logger . Log ( logLevel , null ) ; } Func < string > wrappedMessageFunc = ( ) => { try { return messageFunc ( ) ; } catch ( Exception ex ) { Log ( LogLevel . Error , ( ) => FailedToGenerateLogMessage , ex ) ; } return null ; } ; return _logger . Log ( logLevel , wrappedMessageFunc , exception , formatParameters ) ; }	messageFunc != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_NewestContext == 0	1	50	0	public void Start ( ) { if ( httpListener . m_NewestContext == 0 ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_NewestContext == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndReset()	value == 1	0.0192307692307692	1	51	public long GetAndReset ( ) { if ( value == 1 ) ; return GetAndSet ( 0L ) ; }	value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.OneMinuteRate <= rate.Count	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . OneMinuteRate <= rate . Count ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . OneMinuteRate <= rate . Count
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndReset()	value >= 0	1	52	0	public long GetAndReset ( ) { if ( value >= 0 ) ; return GetAndSet ( 0L ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	histograms.metrics != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( histograms . metrics != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	histograms . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndReset()	value >= 1	0.0192307692307692	1	51	public long GetAndReset ( ) { if ( value >= 1 ) ; return GetAndSet ( 0L ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Events != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndReset()	value <= 1	0.288461538461538	15	37	public long GetAndReset ( ) { if ( value <= 1 ) ; return GetAndSet ( 0L ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	meters != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( meters != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	meters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndReset()	value <= 0	0.0192307692307692	1	51	public long GetAndReset ( ) { if ( value <= 0 ) ; return GetAndSet ( 0L ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.uncounted != null	1	33	0	public void Reset ( ) { if ( m1Rate . uncounted != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_NewestContext <= httpListener.m_DefaultServiceNames	0.02	1	49	public void Start ( ) { if ( httpListener . m_NewestContext <= httpListener . m_DefaultServiceNames ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_NewestContext <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value == 0	0.0181818181818182	1	54	public long GetAndSet ( long value ) { if ( value == 0 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Items != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	meters.metrics != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( meters . metrics != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	meters . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.OneMinuteRate <= rate.FifteenMinuteRate	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . OneMinuteRate <= rate . FifteenMinuteRate ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . OneMinuteRate <= rate . FifteenMinuteRate
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value == 1	0.0181818181818182	1	54	public long GetAndSet ( long value ) { if ( value == 1 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.uncounted.Equals(count)	0.384615384615385	20	32	public void Reset ( ) { if ( m1Rate . uncounted . Equals ( count ) ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . KiloBytes != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value == 32	0.0545454545454545	3	52	public long GetAndSet ( long value ) { if ( value == 32 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value == 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value >= 0	0.963636363636364	53	2	public long GetAndSet ( long value ) { if ( value >= 0 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.OneMinuteRate <= rate.Items	0.0204081632653061	1	48	private static RateData ToRate ( MeterValue rate ) { if ( rate . OneMinuteRate <= rate . Items ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . OneMinuteRate <= rate . Items
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value >= 1	0.0363636363636364	2	53	public long GetAndSet ( long value ) { if ( value >= 1 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	timers != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( timers != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	timers != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_NewestContext <= httpListener	0.02	1	49	public void Start ( ) { if ( httpListener . m_NewestContext <= httpListener ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_NewestContext <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m1Rate.uncounted.Equals(m15Rate.uncounted)	0.634615384615385	33	19	public void Reset ( ) { if ( m1Rate . uncounted . Equals ( m15Rate . uncounted ) ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m1Rate . uncounted . Equals ( m15Rate . uncounted )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value >= 32	0.0545454545454545	3	52	public long GetAndSet ( long value ) { if ( value >= 32 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value >= 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . MegaBytes != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	timers.metrics != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( timers . metrics != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	timers . metrics != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate != null	1	33	0	public void Reset ( ) { if ( m5Rate != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	rate.RateUnit != null	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( rate . RateUnit != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	rate . RateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_OldestContext == 0	1	50	0	public void Start ( ) { if ( httpListener . m_OldestContext == 0 ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_OldestContext == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value <= 1	0.272727272727273	15	40	public long GetAndSet ( long value ) { if ( value <= 1 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	Metrics.TimeUnit.Days != null	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( Metrics . TimeUnit . Days != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( name != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value <= 0	0.0181818181818182	1	54	public long GetAndSet ( long value ) { if ( value <= 0 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . None != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.alpha >= 0	1	33	0	public void Reset ( ) { if ( m5Rate . alpha >= 0 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	Metrics.TimeUnit.Hours != null	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( Metrics . TimeUnit . Hours != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	Metrics.TimeUnit.Microseconds != null	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value <= 32	0.309090909090909	17	38	public long GetAndSet ( long value ) { if ( value <= 32 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value <= 32
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LoggerExecutionWrapper.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	exception == null	0.466666666666667	28	32	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception = null , params object [ ] formatParameters ) { if ( exception == null ) ; if ( messageFunc == null ) { return _logger . Log ( logLevel , null ) ; } Func < string > wrappedMessageFunc = ( ) => { try { return messageFunc ( ) ; } catch ( Exception ex ) { Log ( LogLevel . Error , ( ) => FailedToGenerateLogMessage , ex ) ; } return null ; } ; return _logger . Log ( logLevel , wrappedMessageFunc , exception , formatParameters ) ; }	exception == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	Metrics.TimeUnit.Milliseconds != null	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.None.Equals(unit)	0.010989010989011	1	90	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . None . Equals ( unit ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . None . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value == 0	0.872727272727273	48	7	public long GetAndSet ( long value ) { if ( value == 0 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_OldestContext <= httpListener.m_DefaultServiceNames	0.02	1	49	public void Start ( ) { if ( httpListener . m_OldestContext <= httpListener . m_DefaultServiceNames ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_OldestContext <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("Requests")	0.112359550561798	10	79	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( name . ToString ( ) . Equals ( "Requests" ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "Requests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	Metrics.TimeUnit.Minutes != null	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( Metrics . TimeUnit . Minutes != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value == 64	0.0545454545454545	3	52	public long GetAndSet ( long value ) { if ( value == 64 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value == 64
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.alpha <= count.value	1	33	0	public void Reset ( ) { if ( m5Rate . alpha <= count . value ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	Metrics.TimeUnit.Nanoseconds != null	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value >= 0	0.963636363636364	53	2	public long GetAndSet ( long value ) { if ( value >= 0 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Percent != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("HTTP Request")	0.0898876404494382	8	81	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( name . ToString ( ) . Equals ( "HTTPRequest" ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "HTTPRequest" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.alpha >= m15Rate.alpha	1	33	0	public void Reset ( ) { if ( m5Rate . alpha >= m15Rate . alpha ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	Metrics.TimeUnit.Seconds != null	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( Metrics . TimeUnit . Seconds != null ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value >= 64	0.0545454545454545	3	52	public long GetAndSet ( long value ) { if ( value >= 64 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value >= 64
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_OldestContext <= httpListener	0.02	1	49	public void Start ( ) { if ( httpListener . m_OldestContext <= httpListener ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_OldestContext <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value <= 0	0.872727272727273	48	7	public long GetAndSet ( long value ) { if ( value <= 0 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Requests != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.alpha <= m15Rate.interval	1	33	0	public void Reset ( ) { if ( m5Rate . alpha <= m15Rate . interval ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("custom")	0.0449438202247191	4	85	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( name . ToString ( ) . Equals ( "custom" ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "custom" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value <= 64	0.709090909090909	39	16	public long GetAndSet ( long value ) { if ( value <= 64 ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value <= 64
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToRate(Metrics.MetricData.MeterValue rate)	Metrics.TimeUnit.Seconds.Equals(rate.RateUnit)	1	49	0	private static RateData ToRate ( MeterValue rate ) { if ( Metrics . TimeUnit . Seconds . Equals ( rate . RateUnit ) ) ; return new RateData { MeanRate = rate . MeanRate , OneMinuteRate = rate . OneMinuteRate , FiveMinuteRate = rate . FiveMinuteRate , FifteenMinuteRate = rate . FifteenMinuteRate } ; }	Metrics . TimeUnit . Seconds . Equals ( rate . RateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Utils\AtomicLong.cs	Metrics.Utils.AtomicLong.GetAndSet(System.Int64 value)	value <= value	0.490909090909091	27	28	public long GetAndSet ( long value ) { if ( value <= value ) ; return Interlocked . Exchange ( ref this . value , value ) ; }	value <= value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.0337078651685393	3	86	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.alpha <= m1Rate.alpha	1	33	0	public void Reset ( ) { if ( m5Rate . alpha <= m1Rate . alpha ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . alpha <= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Requests.Equals(unit)	0.021978021978022	2	89	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Requests . Equals ( unit ) ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Requests . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.alpha <= m1Rate.interval	1	33	0	public void Reset ( ) { if ( m5Rate . alpha <= m1Rate . interval ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . alpha <= m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_Prefixes != null	1	50	0	public void Start ( ) { if ( httpListener . m_Prefixes != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_Prefixes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToJsonProperties(Metrics.Json.JsonTimer.RateData rate)	rate != null	1	5	0	private static IEnumerable < JsonProperty > ToJsonProperties ( RateData rate ) { if ( rate != null ) ; yield return new JsonProperty ( "MeanRate" , rate . MeanRate ) ; yield return new JsonProperty ( "OneMinuteRate" , rate . OneMinuteRate ) ; yield return new JsonProperty ( "FiveMinuteRate" , rate . FiveMinuteRate ) ; yield return new JsonProperty ( "FifteenMinuteRate" , rate . FifteenMinuteRate ) ; }	rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	builder != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( builder != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Results != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.initialized == false	0.606060606060606	20	13	public void Reset ( ) { if ( m5Rate . initialized == false ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( unit != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . Unit . Threads != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.initialized == true	0.333333333333333	11	22	public void Reset ( ) { if ( m5Rate . initialized == true ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( unit . Name != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Json\JsonTimer.cs	Metrics.Json.JsonTimer.ToJsonProperties(Metrics.Json.JsonTimer.HistogramData histogram)	histogram != null	1	5	0	private static IEnumerable < JsonProperty > ToJsonProperties ( HistogramData histogram ) { if ( histogram != null ) ; bool hasUserValues = histogram . LastUserValue != null || histogram . MinUserValue != null || histogram . MaxUserValue != null ; yield return new JsonProperty ( "LastValue" , histogram . LastValue ) ; if ( hasUserValues ) { yield return new JsonProperty ( "LastUserValue" , histogram . LastUserValue ) ; } yield return new JsonProperty ( "Min" , histogram . Min ) ; if ( hasUserValues ) { yield return new JsonProperty ( "MinUserValue" , histogram . MinUserValue ) ; } yield return new JsonProperty ( "Mean" , histogram . Mean ) ; if ( hasUserValues ) { yield return new JsonProperty ( "MaxUserValue" , histogram . MaxUserValue ) ; } yield return new JsonProperty ( "StdDev" , histogram . StdDev ) ; yield return new JsonProperty ( "Median" , histogram . Median ) ; yield return new JsonProperty ( "Percentile75" , histogram . Percentile75 ) ; yield return new JsonProperty ( "Percentile95" , histogram . Percentile95 ) ; yield return new JsonProperty ( "Percentile98" , histogram . Percentile98 ) ; yield return new JsonProperty ( "Percentile99" , histogram . Percentile99 ) ; yield return new JsonProperty ( "Percentile999" , histogram . Percentile999 ) ; yield return new JsonProperty ( "SampleSize" , histogram . SampleSize ) ; }	histogram != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_Realm == null	1	50	0	public void Start ( ) { if ( httpListener . m_Realm == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_Realm == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.interval >= 0	1	33	0	public void Reset ( ) { if ( m5Rate . interval >= 0 ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	builder != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( builder != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LoggerExecutionWrapper.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	formatParameters.Count == 1	0.466666666666667	28	32	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception = null , params object [ ] formatParameters ) { if ( formatParameters . Count == 1 ) ; if ( messageFunc == null ) { return _logger . Log ( logLevel , null ) ; } Func < string > wrappedMessageFunc = ( ) => { try { return messageFunc ( ) ; } catch ( Exception ex ) { Log ( LogLevel . Error , ( ) => FailedToGenerateLogMessage , ex ) ; } return null ; } ; return _logger . Log ( logLevel , wrappedMessageFunc , exception , formatParameters ) ; }	formatParameters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name.Equals(name)	0.112359550561798	10	79	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( unit . Name . Equals ( name ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	unit . Name . Equals ( name )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.interval >= count.value	1	33	0	public void Reset ( ) { if ( m5Rate . interval >= count . value ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	tags != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( tags != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Requests")	0.719101123595506	64	25	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( unit . Name . ToString ( ) . Equals ( "Requests" ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "Requests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_RequestHandleBound == false	1	50	0	public void Start ( ) { if ( httpListener . m_RequestHandleBound == false ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_RequestHandleBound == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.interval >= m15Rate.alpha	1	33	0	public void Reset ( ) { if ( m5Rate . interval >= m15Rate . alpha ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.0786516853932584	7	82	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	tags.tags == null	0.945054945054945	86	5	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( tags . tags == null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Bytes != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.interval == m15Rate.interval	1	33	0	public void Reset ( ) { if ( m5Rate . interval == m15Rate . interval ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_RequestQueueHandle == null	1	50	0	public void Start ( ) { if ( httpListener . m_RequestQueueHandle == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_RequestQueueHandle == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Calls != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	tags.tags.Count == 1	0.0879120879120879	8	83	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( tags . tags . Count == 1 ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	tags . tags . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.0786516853932584	7	82	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.interval >= m1Rate.alpha	1	33	0	public void Reset ( ) { if ( m5Rate . interval >= m1Rate . alpha ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.98876404494382	88	1	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Commands != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.interval == m1Rate.interval	1	33	0	public void Reset ( ) { if ( m5Rate . interval == m1Rate . interval ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . interval == m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_SavedDigests == null	1	50	0	public void Start ( ) { if ( httpListener . m_SavedDigests == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_SavedDigests == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.0112359550561798	1	88	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Commands >= 0 ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Errors != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.interval >= m5Rate.alpha	1	33	0	public void Reset ( ) { if ( m5Rate . interval >= m5Rate . alpha ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . interval >= m5Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Events != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.659340659340659	60	31	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . MetricTags . empty != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.rate != null	1	33	0	public void Reset ( ) { if ( m5Rate . rate != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Items != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_SecurityException == null	1	50	0	public void Start ( ) { if ( httpListener . m_SecurityException == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_SecurityException == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Counter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	91	0	public Counter Counter < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : CounterImplementation { if ( Metrics . MetricTags . None != null ) ; return this . registry . Counter ( name , builder , unit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.rate.Equals(m15Rate.rate)	0.48780487804878	20	21	public void Reset ( ) { if ( m5Rate . rate . Equals ( m15Rate . rate ) ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . rate . Equals ( m15Rate . rate )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . KiloBytes != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . MegaBytes != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LoggerExecutionWrapper.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	formatParameters != null	0.533333333333333	32	28	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception = null , params object [ ] formatParameters ) { if ( formatParameters != null ) ; if ( messageFunc == null ) { return _logger . Log ( logLevel , null ) ; } Func < string > wrappedMessageFunc = ( ) => { try { return messageFunc ( ) ; } catch ( Exception ex ) { Log ( LogLevel . Error , ( ) => FailedToGenerateLogMessage , ex ) ; } return null ; } ; return _logger . Log ( logLevel , wrappedMessageFunc , exception , formatParameters ) ; }	formatParameters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.rate.Equals(m1Rate.rate)	0.48780487804878	20	21	public void Reset ( ) { if ( m5Rate . rate . Equals ( m1Rate . rate ) ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . rate . Equals ( m1Rate . rate )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . None != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	childContexts != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( childContexts != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_ServerSessionHandle == null	1	50	0	public void Start ( ) { if ( httpListener . m_ServerSessionHandle == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_ServerSessionHandle == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Percent != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.uncounted != null	1	33	0	public void Reset ( ) { if ( m5Rate . uncounted != null ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Requests != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	isDisabled == false	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( isDisabled == false ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.uncounted.Equals(count)	0.238095238095238	20	64	public void Reset ( ) { if ( m5Rate . uncounted . Equals ( count ) ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests.Equals(unit)	0.719101123595506	64	25	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Requests . Equals ( unit ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Requests . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_State != null	1	50	0	public void Start ( ) { if ( httpListener . m_State != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_State != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.uncounted.Equals(m15Rate.uncounted)	0.392857142857143	33	51	public void Reset ( ) { if ( m5Rate . uncounted . Equals ( m15Rate . uncounted ) ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . uncounted . Equals ( m15Rate . uncounted )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Results != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	metricsBuilder != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( metricsBuilder != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.Reset()	m5Rate.uncounted.Equals(m1Rate.uncounted)	0.392857142857143	33	51	public void Reset ( ) { if ( m5Rate . uncounted . Equals ( m1Rate . uncounted ) ) ; this . count . SetValue ( 0 ) ; this . m1Rate . Reset ( ) ; this . m5Rate . Reset ( ) ; this . m15Rate . Reset ( ) ; }	m5Rate . uncounted . Equals ( m1Rate . uncounted )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Threads != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	count != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( count != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_TimeoutManager != null	1	50	0	public void Start ( ) { if ( httpListener . m_TimeoutManager != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_TimeoutManager != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	registry != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( registry != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	rateUnit != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( rateUnit != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	count.value == 1	0.134146341463415	11	71	public MeterValue GetValue ( double elapsed ) { if ( count . value == 1 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	count . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( name != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Days != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Days != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_UnsafeConnectionNtlmAuthentication == false	1	50	0	public void Start ( ) { if ( httpListener . m_UnsafeConnectionNtlmAuthentication == false ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_UnsafeConnectionNtlmAuthentication == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	count.value == 0	0.134146341463415	11	71	public MeterValue GetValue ( double elapsed ) { if ( count . value == 0 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	count . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("Errors")	0.227272727272727	20	68	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Errors" ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	name . ToString ( ) . Equals ( "Errors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Hours != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Hours != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	count.value >= 1	0.268292682926829	22	60	public MeterValue GetValue ( double elapsed ) { if ( count . value >= 1 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	count . value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Microseconds != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Microseconds != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LoggerExecutionWrapper.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	formatParameters.All(x => x >= 1)	0.35	21	39	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception = null , params object [ ] formatParameters ) { if ( formatParameters . All ( x => x >= 1 ) ) ; if ( messageFunc == null ) { return _logger . Log ( logLevel , null ) ; } Func < string > wrappedMessageFunc = ( ) => { try { return messageFunc ( ) ; } catch ( Exception ex ) { Log ( LogLevel . Error , ( ) => FailedToGenerateLogMessage , ex ) ; } return null ; } ; return _logger . Log ( logLevel , wrappedMessageFunc , exception , formatParameters ) ; }	formatParameters . All ( x => x >= 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("HTTP Request Errors")	0.0340909090909091	3	85	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "HTTPRequestErrors" ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	name . ToString ( ) . Equals ( "HTTPRequestErrors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Milliseconds != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Milliseconds != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_UriPrefixes != null	1	50	0	public void Start ( ) { if ( httpListener . m_UriPrefixes != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_UriPrefixes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	count.value >= 0	0.74390243902439	61	21	public MeterValue GetValue ( double elapsed ) { if ( count . value >= 0 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	count . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Minutes != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Minutes != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	count.value <= 1	0.280487804878049	23	59	public MeterValue GetValue ( double elapsed ) { if ( count . value <= 1 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	count . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("Metrics Errors")	0.0340909090909091	3	85	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "MetricsErrors" ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	name . ToString ( ) . Equals ( "MetricsErrors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Nanoseconds != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	count.value <= 0	0.134146341463415	11	71	public MeterValue GetValue ( double elapsed ) { if ( count . value <= 0 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	count . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Seconds != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.0340909090909091	3	85	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m15Rate != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_UrlGroupId == 0	1	50	0	public void Start ( ) { if ( httpListener . m_UrlGroupId == 0 ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_UrlGroupId == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( durationUnit != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	durationUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.alpha >= 0	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . alpha >= 0 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( unit != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit.Equals(Metrics.TimeUnit.Milliseconds)	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( durationUnit . Equals ( Metrics . TimeUnit . Milliseconds ) ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	durationUnit . Equals ( Metrics . TimeUnit . Milliseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.alpha >= count.value	0.134146341463415	11	71	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . alpha >= count . value ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_UrlGroupId <= httpListener.m_DefaultServiceNames	0.02	1	49	public void Start ( ) { if ( httpListener . m_UrlGroupId <= httpListener . m_DefaultServiceNames ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_UrlGroupId <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.alpha <= count.value	0.390243902439024	32	50	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . alpha <= count . value ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( tags != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( unit . Name != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags.tags == null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( tags . tags == null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.initialized == false	0.719512195121951	59	23	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . initialized == false ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name.Equals(name)	0.227272727272727	20	68	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( unit . Name . Equals ( name ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	unit . Name . Equals ( name )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_UrlGroupId <= httpListener	0.02	1	49	public void Start ( ) { if ( httpListener . m_UrlGroupId <= httpListener ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_UrlGroupId <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.initialized == true	0.0731707317073171	6	76	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . initialized == true ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.741573033707865	66	23	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . MetricTags . empty != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Errors")	0.840909090909091	74	14	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Errors" ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Errors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.interval >= 0	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . interval >= 0 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\DefaultMetricsRegistry.cs	Metrics.Core.DefaultMetricsRegistry.Timer(System.String name, System.Func`1<T> builder, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	89	0	public Timer Timer < T > ( string name , Func < T > builder , Unit unit , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . MetricTags . None != null ) ; return this . timers . GetOrAdd ( name , ( ) => { T timer = builder ( ) ; return Tuple . Create ( ( Timer ) timer , new TimerValueSource ( name , timer , unit , rateUnit , durationUnit , tags ) ) ; } ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	httpListener.m_V2Initialized == false	1	50	0	public void Start ( ) { if ( httpListener . m_V2Initialized == false ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	httpListener . m_V2Initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.interval >= count.value	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . interval >= count . value ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.0340909090909091	3	85	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LoggerExecutionWrapper.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	formatParameters.All(x => x != null)	0.4	24	36	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception = null , params object [ ] formatParameters ) { if ( formatParameters . All ( x => x != null ) ) ; if ( messageFunc == null ) { return _logger . Log ( logLevel , null ) ; } Func < string > wrappedMessageFunc = ( ) => { try { return messageFunc ( ) ; } catch ( Exception ex ) { Log ( LogLevel . Error , ( ) => FailedToGenerateLogMessage , ex ) ; } return null ; } ; return _logger . Log ( logLevel , wrappedMessageFunc , exception , formatParameters ) ; }	formatParameters . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.interval >= m15Rate.alpha	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . interval >= m15Rate . alpha ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	metricsDataProvider != null	1	50	0	public void Start ( ) { if ( metricsDataProvider != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Bytes != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.rate != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . rate != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Calls != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.uncounted != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . uncounted != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	prefixPath != null	1	50	0	public void Start ( ) { if ( prefixPath != null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	prefixPath != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m15Rate.uncounted.Equals(count)	0.878048780487805	72	10	public MeterValue GetValue ( double elapsed ) { if ( m15Rate . uncounted . Equals ( count ) ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m15Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.0340909090909091	3	85	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	prefixPath.ToString().Equals("metricstest/httplistenertests/httpendpointcanbedisposed/")	0.16	8	42	public void Start ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/httpendpointcanbedisposed/" ) ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/httpendpointcanbedisposed/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.988636363636364	87	1	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Commands != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.alpha >= 0	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . alpha >= 0 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.0113636363636364	1	87	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Commands >= 0 ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.alpha >= count.value	0.134146341463415	11	71	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . alpha >= count . value ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Errors != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	prefixPath.ToString().Equals("metricstest/httplistenertests/occupiedport/")	0.26	13	37	public void Start ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/occupiedport/" ) ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/occupiedport/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.alpha <= count.value	0.390243902439024	32	50	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . alpha <= count . value ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors.Equals(unit)	0.840909090909091	74	14	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Errors . Equals ( unit ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Errors . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.alpha >= m15Rate.alpha	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . alpha >= m15Rate . alpha ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Events != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.alpha <= m15Rate.interval	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . alpha <= m15Rate . interval ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	prefixPath.ToString().Equals("metricstest/httplistenertests/sameendpoint/")	0.06	3	47	public void Start ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/sameendpoint/" ) ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/sameendpoint/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Items != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.initialized == false	0.719512195121951	59	23	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . initialized == false ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . KiloBytes != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.initialized == true	0.0731707317073171	6	76	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . initialized == true ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.interval >= 0	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . interval >= 0 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . MegaBytes != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	prefixPath.ToString().Equals("metricstest/httplistenertests/disposemetwice/")	0.1	5	45	public void Start ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemetwice/" ) ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemetwice/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.interval >= count.value	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . interval >= count . value ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . None != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.interval >= m15Rate.alpha	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . interval >= m15Rate . alpha ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Percent != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	prefixPath.ToString().Equals("metricstest/httplistenertests/disposemeonce/")	0.18	9	41	public void Start ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemeonce/" ) ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemeonce/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.interval == m15Rate.interval	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . interval == m15Rate . interval ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Requests != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.interval >= m1Rate.alpha	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . interval >= m1Rate . alpha ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Start()	processingTask == null	1	50	0	public void Start ( ) { if ( processingTask == null ) ; this . httpListener . Start ( ) ; this . processingTask = Task . Factory . StartNew ( async ( ) => await ProcessRequests ( ) , TaskCreationOptions . LongRunning ) ; }	processingTask == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.rate != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . rate != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Results != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.rate.Equals(m15Rate.rate)	0.878048780487805	72	10	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . rate . Equals ( m15Rate . rate ) ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . rate . Equals ( m15Rate . rate )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . Unit . Threads != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.uncounted != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . uncounted != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	cts != null	1	37	0	private async Task ProcessRequests ( ) { if ( cts != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	cts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.uncounted.Equals(count)	0.470588235294118	72	81	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . uncounted . Equals ( count ) ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	rateUnit != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( rateUnit != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m1Rate.uncounted.Equals(m15Rate.uncounted)	0.535947712418301	82	71	public MeterValue GetValue ( double elapsed ) { if ( m1Rate . uncounted . Equals ( m15Rate . uncounted ) ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m1Rate . uncounted . Equals ( m15Rate . uncounted )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(System.String name)	name != null	1	85	0	public override ILog GetLogger ( string name ) { if ( name != null ) ; return new ColouredConsoleLogger ( name , ConsoleWriteLine , GetConsoleForeground , SetConsoleForeground ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Days != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Days != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.alpha >= 0	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . alpha >= 0 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	healthStatus != null	1	37	0	private async Task ProcessRequests ( ) { if ( healthStatus != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.alpha >= count.value	0.134146341463415	11	71	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . alpha >= count . value ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Hours != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Hours != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.alpha >= m15Rate.alpha	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . alpha >= m15Rate . alpha ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.alpha <= m15Rate.interval	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . alpha <= m15Rate . interval ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Microseconds != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.alpha <= m1Rate.alpha	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . alpha <= m1Rate . alpha ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . alpha <= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Milliseconds != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.alpha <= m1Rate.interval	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . alpha <= m1Rate . interval ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . alpha <= m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Minutes != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Minutes != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener >= 0	0.027027027027027	1	36	private async Task ProcessRequests ( ) { if ( httpListener >= 0 ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.interval >= 0	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . interval >= 0 ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.interval >= count.value	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . interval >= count . value ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Nanoseconds != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.interval >= m15Rate.alpha	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . interval >= m15Rate . alpha ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Seconds != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_AuthenticationDelegate == null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_AuthenticationDelegate == null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_AuthenticationDelegate == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.interval == m15Rate.interval	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . interval == m15Rate . interval ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.interval >= m1Rate.alpha	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . interval >= m1Rate . alpha ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.interval == m1Rate.interval	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . interval == m1Rate . interval ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . interval == m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_AuthenticationScheme != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_AuthenticationScheme != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_AuthenticationScheme != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	tags != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( tags != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.interval >= m5Rate.alpha	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . interval >= m5Rate . alpha ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . interval >= m5Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.rate != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . rate != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	tags.tags == null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( tags . tags == null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetValue(System.Double elapsed)	m5Rate.uncounted != null	1	82	0	public MeterValue GetValue ( double elapsed ) { if ( m5Rate . uncounted != null ) ; return new MeterValue ( this . count . Value , this . GetMeanRate ( elapsed ) , this . OneMinuteRate , this . FiveMinuteRate , this . FifteenMinuteRate , TimeUnit . Seconds ) ; }	m5Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_DefaultServiceNames != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_DefaultServiceNames != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_DefaultServiceNames != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	count != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( count != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	count.value == 1	0.134146341463415	11	71	private double GetMeanRate ( double elapsed ) { if ( count . value == 1 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	count . value == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.75	66	22	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . MetricTags . empty != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_DisconnectResults == null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_DisconnectResults == null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_DisconnectResults == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	count.value == 0	0.134146341463415	11	71	private double GetMeanRate ( double elapsed ) { if ( count . value == 0 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	count . value == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	88	0	public Meter Meter ( string name , Unit unit , TimeUnit rateUnit , MetricTags tags ) { if ( Metrics . MetricTags . None != null ) ; return this . Meter ( name , unit , ( ) => this . metricsBuilder . BuildMeter ( name , unit , rateUnit ) , rateUnit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	count.value >= 1	0.268292682926829	22	60	private double GetMeanRate ( double elapsed ) { if ( count . value >= 1 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	count . value >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.GetLogger(System.String name)	name.ToString().Equals("Metrics.MetricsConfig")	0.294117647058824	25	60	public override ILog GetLogger ( string name ) { if ( name . ToString ( ) . Equals ( "Metrics.MetricsConfig" ) ) ; return new ColouredConsoleLogger ( name , ConsoleWriteLine , GetConsoleForeground , SetConsoleForeground ) ; }	name . ToString ( ) . Equals ( "Metrics.MetricsConfig" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	count.value >= 0	0.74390243902439	61	21	private double GetMeanRate ( double elapsed ) { if ( count . value >= 0 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	count . value >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	childContexts != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( childContexts != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_ExtendedProtectionPolicy != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_ExtendedProtectionPolicy != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_ExtendedProtectionPolicy != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	count.value <= 1	0.280487804878049	23	59	private double GetMeanRate ( double elapsed ) { if ( count . value <= 1 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	count . value <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	count.value <= 0	0.134146341463415	11	71	private double GetMeanRate ( double elapsed ) { if ( count . value <= 0 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	count . value <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	isDisabled == false	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( isDisabled == false ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m15Rate != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_ExtendedProtectionSelectorDelegate == null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_ExtendedProtectionSelectorDelegate == null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_ExtendedProtectionSelectorDelegate == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.alpha >= 0	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m15Rate . alpha >= 0 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	metricsBuilder != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( metricsBuilder != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.alpha >= count.value	0.134146341463415	11	71	private double GetMeanRate ( double elapsed ) { if ( m15Rate . alpha >= count . value ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.alpha <= count.value	0.390243902439024	32	50	private double GetMeanRate ( double elapsed ) { if ( m15Rate . alpha <= count . value ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	registry != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( registry != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_ExtraSavedDigests == null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_ExtraSavedDigests == null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_ExtraSavedDigests == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.initialized == false	0.719512195121951	59	23	private double GetMeanRate ( double elapsed ) { if ( m15Rate . initialized == false ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.initialized == true	0.0731707317073171	6	76	private double GetMeanRate ( double elapsed ) { if ( m15Rate . initialized == true ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_ExtraSavedDigestsBaking == null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_ExtraSavedDigestsBaking == null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_ExtraSavedDigestsBaking == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.interval >= 0	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m15Rate . interval >= 0 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("Errors")	0.227272727272727	20	68	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name . ToString ( ) . Equals ( "Errors" ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	name . ToString ( ) . Equals ( "Errors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.interval >= count.value	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m15Rate . interval >= count . value ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("HTTP Request Errors")	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name . ToString ( ) . Equals ( "HTTPRequestErrors" ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	name . ToString ( ) . Equals ( "HTTPRequestErrors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_ExtraSavedDigestsTimestamp == 0	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp == 0 ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_ExtraSavedDigestsTimestamp == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.interval >= m15Rate.alpha	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m15Rate . interval >= m15Rate . alpha ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.rate != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m15Rate . rate != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("Metrics Errors")	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name . ToString ( ) . Equals ( "MetricsErrors" ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	name . ToString ( ) . Equals ( "MetricsErrors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.uncounted != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m15Rate . uncounted != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_ExtraSavedDigestsTimestamp <= httpListener	0.027027027027027	1	36	private async Task ProcessRequests ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp <= httpListener ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_ExtraSavedDigestsTimestamp <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m15Rate.uncounted.Equals(count)	0.878048780487805	72	10	private double GetMeanRate ( double elapsed ) { if ( m15Rate . uncounted . Equals ( count ) ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m15Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.DefaultMessageFormatter(System.String loggerName, Metrics.Logging.LogLevel level, System.Object message, System.Exception e)	loggerName != null	1	60	0	protected static string DefaultMessageFormatter ( string loggerName , LogLevel level , object message , Exception e ) { if ( loggerName != null ) ; var stringBuilder = new StringBuilder ( ) ; stringBuilder . Append ( DateTime . Now . ToString ( "yyyy-MM-ddhh:mm:ss" , CultureInfo . InvariantCulture ) ) ; stringBuilder . Append ( "" ) ; stringBuilder . Append ( ( "[" + level . ToString ( ) . ToUpper ( ) + "]" ) . PadRight ( 8 ) ) ; stringBuilder . Append ( "(" + loggerName + ")" ) ; stringBuilder . Append ( message ) ; if ( e != null ) { stringBuilder . Append ( Environment . NewLine ) . Append ( e . GetType ( ) ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . Message ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . StackTrace ) ; } return stringBuilder . ToString ( ) ; }	loggerName != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.alpha >= 0	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . alpha >= 0 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_IgnoreWriteExceptions == false	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_IgnoreWriteExceptions == false ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_IgnoreWriteExceptions == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit . Name != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.alpha >= count.value	0.134146341463415	11	71	private double GetMeanRate ( double elapsed ) { if ( m1Rate . alpha >= count . value ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_InternalLock != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_InternalLock != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_InternalLock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.alpha <= count.value	0.390243902439024	32	50	private double GetMeanRate ( double elapsed ) { if ( m1Rate . alpha <= count . value ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . alpha <= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name.Equals(name)	0.227272727272727	20	68	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit . Name . Equals ( name ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	unit . Name . Equals ( name )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.alpha >= m15Rate.alpha	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . alpha >= m15Rate . alpha ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.alpha <= m15Rate.interval	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . alpha <= m15Rate . interval ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Errors")	0.840909090909091	74	14	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit . Name . ToString ( ) . Equals ( "Errors" ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Errors" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_NewestContext == 0	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_NewestContext == 0 ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_NewestContext == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.initialized == false	0.719512195121951	59	23	private double GetMeanRate ( double elapsed ) { if ( m1Rate . initialized == false ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . initialized == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.initialized == true	0.0731707317073171	6	76	private double GetMeanRate ( double elapsed ) { if ( m1Rate . initialized == true ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_NewestContext <= httpListener	0.027027027027027	1	36	private async Task ProcessRequests ( ) { if ( httpListener . m_NewestContext <= httpListener ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_NewestContext <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.interval >= 0	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . interval >= 0 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Bytes != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.interval >= count.value	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . interval >= count . value ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Calls != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.interval >= m15Rate.alpha	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . interval >= m15Rate . alpha ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_OldestContext == 0	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_OldestContext == 0 ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_OldestContext == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.interval == m15Rate.interval	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . interval == m15Rate . interval ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.0340909090909091	3	85	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.interval >= m1Rate.alpha	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . interval >= m1Rate . alpha ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.988636363636364	87	1	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Commands != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.rate != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . rate != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_OldestContext <= httpListener	0.027027027027027	1	36	private async Task ProcessRequests ( ) { if ( httpListener . m_OldestContext <= httpListener ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_OldestContext <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.0113636363636364	1	87	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Commands >= 0 ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.rate.Equals(m15Rate.rate)	0.878048780487805	72	10	private double GetMeanRate ( double elapsed ) { if ( m1Rate . rate . Equals ( m15Rate . rate ) ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . rate . Equals ( m15Rate . rate )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Errors != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.uncounted != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m1Rate . uncounted != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.DefaultMessageFormatter(System.String loggerName, Metrics.Logging.LogLevel level, System.Object message, System.Exception e)	loggerName.ToString().Equals("Metrics.Metric")	0.466666666666667	28	32	protected static string DefaultMessageFormatter ( string loggerName , LogLevel level , object message , Exception e ) { if ( loggerName . ToString ( ) . Equals ( "Metrics.Metric" ) ) ; var stringBuilder = new StringBuilder ( ) ; stringBuilder . Append ( DateTime . Now . ToString ( "yyyy-MM-ddhh:mm:ss" , CultureInfo . InvariantCulture ) ) ; stringBuilder . Append ( "" ) ; stringBuilder . Append ( ( "[" + level . ToString ( ) . ToUpper ( ) + "]" ) . PadRight ( 8 ) ) ; stringBuilder . Append ( "(" + loggerName + ")" ) ; stringBuilder . Append ( message ) ; if ( e != null ) { stringBuilder . Append ( Environment . NewLine ) . Append ( e . GetType ( ) ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . Message ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . StackTrace ) ; } return stringBuilder . ToString ( ) ; }	loggerName . ToString ( ) . Equals ( "Metrics.Metric" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_Prefixes != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_Prefixes != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_Prefixes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors.Equals(unit)	0.840909090909091	74	14	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Errors . Equals ( unit ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Errors . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.uncounted.Equals(count)	0.470588235294118	72	81	private double GetMeanRate ( double elapsed ) { if ( m1Rate . uncounted . Equals ( count ) ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . uncounted . Equals ( count )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m1Rate.uncounted.Equals(m15Rate.uncounted)	0.535947712418301	82	71	private double GetMeanRate ( double elapsed ) { if ( m1Rate . uncounted . Equals ( m15Rate . uncounted ) ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m1Rate . uncounted . Equals ( m15Rate . uncounted )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Events != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_Realm == null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_Realm == null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_Realm == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Items != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.alpha >= 0	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . alpha >= 0 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . alpha >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . KiloBytes != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.alpha >= count.value	0.134146341463415	11	71	private double GetMeanRate ( double elapsed ) { if ( m5Rate . alpha >= count . value ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . alpha >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_RequestHandleBound == false	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_RequestHandleBound == false ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_RequestHandleBound == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.alpha >= m15Rate.alpha	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . alpha >= m15Rate . alpha ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . alpha >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . MegaBytes != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.alpha <= m15Rate.interval	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . alpha <= m15Rate . interval ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . alpha <= m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . None != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_RequestQueueHandle != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_RequestQueueHandle != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_RequestQueueHandle != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.alpha <= m1Rate.alpha	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . alpha <= m1Rate . alpha ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . alpha <= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Percent != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.alpha <= m1Rate.interval	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . alpha <= m1Rate . interval ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . alpha <= m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Requests != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.interval >= 0	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . interval >= 0 ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . interval >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_SavedDigests == null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_SavedDigests == null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_SavedDigests == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.interval >= count.value	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . interval >= count . value ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . interval >= count . value
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Results != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.interval >= m15Rate.alpha	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . interval >= m15Rate . alpha ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . interval >= m15Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . Unit . Threads != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_SecurityException == null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_SecurityException == null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_SecurityException == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.DefaultMessageFormatter(System.String loggerName, Metrics.Logging.LogLevel level, System.Object message, System.Exception e)	level != null	1	60	0	protected static string DefaultMessageFormatter ( string loggerName , LogLevel level , object message , Exception e ) { if ( level != null ) ; var stringBuilder = new StringBuilder ( ) ; stringBuilder . Append ( DateTime . Now . ToString ( "yyyy-MM-ddhh:mm:ss" , CultureInfo . InvariantCulture ) ) ; stringBuilder . Append ( "" ) ; stringBuilder . Append ( ( "[" + level . ToString ( ) . ToUpper ( ) + "]" ) . PadRight ( 8 ) ) ; stringBuilder . Append ( "(" + loggerName + ")" ) ; stringBuilder . Append ( message ) ; if ( e != null ) { stringBuilder . Append ( Environment . NewLine ) . Append ( e . GetType ( ) ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . Message ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . StackTrace ) ; } return stringBuilder . ToString ( ) ; }	level != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.interval == m15Rate.interval	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . interval == m15Rate . interval ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . interval == m15Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.interval >= m1Rate.alpha	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . interval >= m1Rate . alpha ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . interval >= m1Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	builder != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( builder != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.interval == m1Rate.interval	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . interval == m1Rate . interval ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . interval == m1Rate . interval
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_ServerSessionHandle != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_ServerSessionHandle != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_ServerSessionHandle != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	rateUnit != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( rateUnit != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.interval >= m5Rate.alpha	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . interval >= m5Rate . alpha ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . interval >= m5Rate . alpha
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Days != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Days != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.rate != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . rate != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_State != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_State != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_State != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Hours != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Hours != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.MeterWrapper.GetMeanRate(System.Double elapsed)	m5Rate.uncounted != null	1	82	0	private double GetMeanRate ( double elapsed ) { if ( m5Rate . uncounted != null ) ; if ( this . count . Value == 0 ) { return 0.0 ; } return this . count . Value / elapsed * TimeUnit . Seconds . ToNanoseconds ( 1 ) ; }	m5Rate . uncounted != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	clock != null	1	92	0	public void Mark ( ) { if ( clock != null ) ; Mark ( 1L ) ; }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Microseconds != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Microseconds != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	setMeters != null	1	92	0	public void Mark ( ) { if ( setMeters != null ) ; Mark ( 1L ) ; }	setMeters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Milliseconds != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Milliseconds != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_TimeoutManager != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_TimeoutManager != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_TimeoutManager != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	startTime == 0	0.619565217391304	57	35	public void Mark ( ) { if ( startTime == 0 ) ; Mark ( 1L ) ; }	startTime == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Minutes != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Minutes != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	startTime == 100000000	0.0108695652173913	1	91	public void Mark ( ) { if ( startTime == 100000000 ) ; Mark ( 1L ) ; }	startTime == 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_UnsafeConnectionNtlmAuthentication == false	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_UnsafeConnectionNtlmAuthentication == false ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_UnsafeConnectionNtlmAuthentication == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Nanoseconds != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	startTime >= 0	0.83695652173913	77	15	public void Mark ( ) { if ( startTime >= 0 ) ; Mark ( 1L ) ; }	startTime >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Seconds != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	startTime >= 100000000	0.0108695652173913	1	91	public void Mark ( ) { if ( startTime >= 100000000 ) ; Mark ( 1L ) ; }	startTime >= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	startTime <= 0	0.619565217391304	57	35	public void Mark ( ) { if ( startTime <= 0 ) ; Mark ( 1L ) ; }	startTime <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_UriPrefixes != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_UriPrefixes != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_UriPrefixes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	startTime <= 100000000	0.195652173913043	18	74	public void Mark ( ) { if ( startTime <= 100000000 ) ; Mark ( 1L ) ; }	startTime <= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	startTime != null	0.58695652173913	54	38	public void Mark ( ) { if ( startTime != null ) ; Mark ( 1L ) ; }	startTime != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	tags != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( tags != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_UrlGroupId != null	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_UrlGroupId != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_UrlGroupId != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	tickScheduler != null	1	92	0	public void Mark ( ) { if ( tickScheduler != null ) ; Mark ( 1L ) ; }	tickScheduler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	wrapper != null	1	92	0	public void Mark ( ) { if ( wrapper != null ) ; Mark ( 1L ) ; }	wrapper != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	tags.tags == null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( tags . tags == null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	wrapper.count != null	1	92	0	public void Mark ( ) { if ( wrapper . count != null ) ; Mark ( 1L ) ; }	wrapper . count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.DefaultMessageFormatter(System.String loggerName, Metrics.Logging.LogLevel level, System.Object message, System.Exception e)	message != null	1	60	0	protected static string DefaultMessageFormatter ( string loggerName , LogLevel level , object message , Exception e ) { if ( message != null ) ; var stringBuilder = new StringBuilder ( ) ; stringBuilder . Append ( DateTime . Now . ToString ( "yyyy-MM-ddhh:mm:ss" , CultureInfo . InvariantCulture ) ) ; stringBuilder . Append ( "" ) ; stringBuilder . Append ( ( "[" + level . ToString ( ) . ToUpper ( ) + "]" ) . PadRight ( 8 ) ) ; stringBuilder . Append ( "(" + loggerName + ")" ) ; stringBuilder . Append ( message ) ; if ( e != null ) { stringBuilder . Append ( Environment . NewLine ) . Append ( e . GetType ( ) ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . Message ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . StackTrace ) ; } return stringBuilder . ToString ( ) ; }	message != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	httpListener.m_V2Initialized == true	1	37	0	private async Task ProcessRequests ( ) { if ( httpListener . m_V2Initialized == true ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	httpListener . m_V2Initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.75	66	22	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . MetricTags . empty != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	wrapper.m15Rate != null	1	92	0	public void Mark ( ) { if ( wrapper . m15Rate != null ) ; Mark ( 1L ) ; }	wrapper . m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	wrapper.m1Rate != null	1	92	0	public void Mark ( ) { if ( wrapper . m1Rate != null ) ; Mark ( 1L ) ; }	wrapper . m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Meter(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	88	0	public Meter Meter < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , MetricTags tags ) where T : MeterImplementation { if ( Metrics . MetricTags . None != null ) ; return this . registry . Meter ( name , builder , unit , rateUnit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	metricsDataProvider != null	1	37	0	private async Task ProcessRequests ( ) { if ( metricsDataProvider != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark()	wrapper.m5Rate != null	1	92	0	public void Mark ( ) { if ( wrapper . m5Rate != null ) ; Mark ( 1L ) ; }	wrapper . m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	childContexts != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( childContexts != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	clock != null	1	96	0	public void Mark ( long count ) { if ( clock != null ) ; this . wrapper . Mark ( count ) ; }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	setMeters != null	1	96	0	public void Mark ( long count ) { if ( setMeters != null ) ; this . wrapper . Mark ( count ) ; }	setMeters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	isDisabled == false	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( isDisabled == false ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	prefixPath != null	1	37	0	private async Task ProcessRequests ( ) { if ( prefixPath != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	prefixPath != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	startTime == 0	0.677083333333333	65	31	public void Mark ( long count ) { if ( startTime == 0 ) ; this . wrapper . Mark ( count ) ; }	startTime == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	metricsBuilder != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( metricsBuilder != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	startTime == 100000000	0.0104166666666667	1	95	public void Mark ( long count ) { if ( startTime == 100000000 ) ; this . wrapper . Mark ( count ) ; }	startTime == 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	registry != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( registry != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	prefixPath.ToString().Equals("metricstest/httplistenertests/httpendpointcanbedisposed/")	0.324324324324324	12	25	private async Task ProcessRequests ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/httpendpointcanbedisposed/" ) ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/httpendpointcanbedisposed/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	startTime >= 0	0.885416666666667	85	11	public void Mark ( long count ) { if ( startTime >= 0 ) ; this . wrapper . Mark ( count ) ; }	startTime >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	startTime >= 100000000	0.0104166666666667	1	95	public void Mark ( long count ) { if ( startTime >= 100000000 ) ; this . wrapper . Mark ( count ) ; }	startTime >= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	name != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( name != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	startTime <= 0	0.677083333333333	65	31	public void Mark ( long count ) { if ( startTime <= 0 ) ; this . wrapper . Mark ( count ) ; }	startTime <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	prefixPath.ToString().Equals("metricstest/httplistenertests/sameendpoint/")	0.108108108108108	4	33	private async Task ProcessRequests ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/sameendpoint/" ) ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/sameendpoint/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	startTime <= 100000000	0.1875	18	78	public void Mark ( long count ) { if ( startTime <= 100000000 ) ; this . wrapper . Mark ( count ) ; }	startTime <= 100000000
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	name.ToString().Equals("Post & Put Request Size")	0.188235294117647	16	69	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Post&PutRequestSize" ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	name . ToString ( ) . Equals ( "Post&PutRequestSize" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	startTime != null	0.5625	54	42	public void Mark ( long count ) { if ( startTime != null ) ; this . wrapper . Mark ( count ) ; }	startTime != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	prefixPath.ToString().Equals("metricstest/httplistenertests/disposemetwice/")	0.162162162162162	6	31	private async Task ProcessRequests ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemetwice/" ) ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemetwice/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	name.ToString().Equals("HTTP JSON Size")	0.117647058823529	10	75	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "HTTPJSONSize" ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	name . ToString ( ) . Equals ( "HTTPJSONSize" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	tickScheduler != null	1	96	0	public void Mark ( long count ) { if ( tickScheduler != null ) ; this . wrapper . Mark ( count ) ; }	tickScheduler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	wrapper != null	1	96	0	public void Mark ( long count ) { if ( wrapper != null ) ; this . wrapper . Mark ( count ) ; }	wrapper != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	prefixPath.ToString().Equals("metricstest/httplistenertests/disposemeonce/")	0.297297297297297	11	26	private async Task ProcessRequests ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemeonce/" ) ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemeonce/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.0352941176470588	3	82	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.DefaultMessageFormatter(System.String loggerName, Metrics.Logging.LogLevel level, System.Object message, System.Exception e)	e == null	0.466666666666667	28	32	protected static string DefaultMessageFormatter ( string loggerName , LogLevel level , object message , Exception e ) { if ( e == null ) ; var stringBuilder = new StringBuilder ( ) ; stringBuilder . Append ( DateTime . Now . ToString ( "yyyy-MM-ddhh:mm:ss" , CultureInfo . InvariantCulture ) ) ; stringBuilder . Append ( "" ) ; stringBuilder . Append ( ( "[" + level . ToString ( ) . ToUpper ( ) + "]" ) . PadRight ( 8 ) ) ; stringBuilder . Append ( "(" + loggerName + ")" ) ; stringBuilder . Append ( message ) ; if ( e != null ) { stringBuilder . Append ( Environment . NewLine ) . Append ( e . GetType ( ) ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . Message ) ; stringBuilder . Append ( Environment . NewLine ) . Append ( e . StackTrace ) ; } return stringBuilder . ToString ( ) ; }	e == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	wrapper.count != null	1	96	0	public void Mark ( long count ) { if ( wrapper . count != null ) ; this . wrapper . Mark ( count ) ; }	wrapper . count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	wrapper.m15Rate != null	1	96	0	public void Mark ( long count ) { if ( wrapper . m15Rate != null ) ; this . wrapper . Mark ( count ) ; }	wrapper . m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.ProcessRequests()	processingTask != null	1	37	0	private async Task ProcessRequests ( ) { if ( processingTask != null ) ; while ( ! this . cts . IsCancellationRequested ) { try { var context = await this . httpListener . GetContextAsync ( ) ; try { using ( timer . NewContext ( ) ) { await ProcessRequest ( context ) . ConfigureAwait ( false ) ; context . Response . Close ( ) ; } } catch ( Exception ex ) { errors . Mark ( ) ; context . Response . StatusCode = 500 ; context . Response . StatusDescription = "InternalServerError" ; context . Response . Close ( ) ; MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } catch ( ObjectDisposedException ex ) { if ( ( ex . ObjectName == this . httpListener . GetType ( ) . FullName ) && ( this . httpListener . IsListening == false ) ) { return ; } MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } catch ( Exception ex ) { errors . Mark ( ) ; HttpListenerException httpException = ex as HttpListenerException ; if ( httpException == null || httpException . ErrorCode != 995 ) { MetricsErrorHandler . Handle ( ex , "ErrorprocessingHTTPrequest" ) ; } } } }	processingTask != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	unit != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( unit != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	wrapper.m1Rate != null	1	96	0	public void Mark ( long count ) { if ( wrapper . m1Rate != null ) ; this . wrapper . Mark ( count ) ; }	wrapper . m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	unit.Name != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( unit . Name != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	wrapper.m5Rate != null	1	96	0	public void Mark ( long count ) { if ( wrapper . m5Rate != null ) ; this . wrapper . Mark ( count ) ; }	wrapper . m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	cts != null	1	50	0	private void Stop ( ) { if ( cts != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	cts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	unit.Name.ToString().Equals("bytes")	0.317647058823529	27	58	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "bytes" ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	unit . Name . ToString ( ) . Equals ( "bytes" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	count == 1	0.6875	66	30	public void Mark ( long count ) { if ( count == 1 ) ; this . wrapper . Mark ( count ) ; }	count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	count >= 1	0.9375	90	6	public void Mark ( long count ) { if ( count >= 1 ) ; this . wrapper . Mark ( count ) ; }	count >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Kb")	0.117647058823529	10	75	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Kb" ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Kb" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	count >= -1	0.15625	15	81	public void Mark ( long count ) { if ( count >= - 1 ) ; this . wrapper . Mark ( count ) ; }	count >= - 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	healthStatus != null	1	50	0	private void Stop ( ) { if ( healthStatus != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	count <= 1	0.739583333333333	71	25	public void Mark ( long count ) { if ( count <= 1 ) ; this . wrapper . Mark ( count ) ; }	count <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.0352941176470588	3	82	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.Int64 count)	count <= startTime	0.0104166666666667	1	95	public void Mark ( long count ) { if ( count <= startTime ) ; this . wrapper . Mark ( count ) ; }	count <= startTime
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Bytes != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener != null	1	50	0	private void Stop ( ) { if ( httpListener != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	clock != null	1	23	0	public void Mark ( string item ) { if ( clock != null ) ; this . Mark ( item , 1L ) ; }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	setMeters != null	1	23	0	public void Mark ( string item ) { if ( setMeters != null ) ; this . Mark ( item , 1L ) ; }	setMeters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Bytes.Equals(unit)	0.317647058823529	27	58	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Bytes . Equals ( unit ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Bytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener >= 0	0.02	1	49	private void Stop ( ) { if ( httpListener >= 0 ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	startTime == 0	1	23	0	public void Mark ( string item ) { if ( startTime == 0 ) ; this . Mark ( item , 1L ) ; }	startTime == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Calls != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	tickScheduler != null	1	23	0	public void Mark ( string item ) { if ( tickScheduler != null ) ; this . Mark ( item , 1L ) ; }	tickScheduler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	wrapper != null	1	23	0	public void Mark ( string item ) { if ( wrapper != null ) ; this . Mark ( item , 1L ) ; }	wrapper != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.0352941176470588	3	82	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_AuthenticationDelegate == null	1	50	0	private void Stop ( ) { if ( httpListener . m_AuthenticationDelegate == null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_AuthenticationDelegate == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	wrapper.count != null	1	23	0	public void Mark ( string item ) { if ( wrapper . count != null ) ; this . Mark ( item , 1L ) ; }	wrapper . count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.988235294117647	84	1	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Commands != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	wrapper.m15Rate != null	1	23	0	public void Mark ( string item ) { if ( wrapper . m15Rate != null ) ; this . Mark ( item , 1L ) ; }	wrapper . m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.0117647058823529	1	84	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Commands >= 0 ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_AuthenticationScheme != null	1	50	0	private void Stop ( ) { if ( httpListener . m_AuthenticationScheme != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_AuthenticationScheme != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Errors != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	wrapper.m1Rate != null	1	23	0	public void Mark ( string item ) { if ( wrapper . m1Rate != null ) ; this . Mark ( item , 1L ) ; }	wrapper . m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Events != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	wrapper.m5Rate != null	1	23	0	public void Mark ( string item ) { if ( wrapper . m5Rate != null ) ; this . Mark ( item , 1L ) ; }	wrapper . m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	_getForeground != null	1	60	0	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( _getForeground != null ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	_getForeground != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_DefaultServiceNames != null	1	50	0	private void Stop ( ) { if ( httpListener . m_DefaultServiceNames != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_DefaultServiceNames != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Items != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	item != null	1	23	0	public void Mark ( string item ) { if ( item != null ) ; this . Mark ( item , 1L ) ; }	item != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item)	item.ToString().Equals("A")	0.739130434782609	17	6	public void Mark ( string item ) { if ( item . ToString ( ) . Equals ( "A" ) ) ; this . Mark ( item , 1L ) ; }	item . ToString ( ) . Equals ( "A" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . KiloBytes != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	clock != null	1	23	0	public void Mark ( string item , long count ) { if ( clock != null ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_DefaultServiceNames >= 0	0.02	1	49	private void Stop ( ) { if ( httpListener . m_DefaultServiceNames >= 0 ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_DefaultServiceNames >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes.Equals(unit)	0.117647058823529	10	75	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . KiloBytes . Equals ( unit ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . KiloBytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	setMeters != null	1	23	0	public void Mark ( string item , long count ) { if ( setMeters != null ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	setMeters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . MegaBytes != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_DisconnectResults == null	1	50	0	private void Stop ( ) { if ( httpListener . m_DisconnectResults == null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_DisconnectResults == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	startTime == 0	1	23	0	public void Mark ( string item , long count ) { if ( startTime == 0 ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	startTime == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . None != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	tickScheduler != null	1	23	0	public void Mark ( string item , long count ) { if ( tickScheduler != null ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	tickScheduler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Percent != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_ExtendedProtectionPolicy != null	1	50	0	private void Stop ( ) { if ( httpListener . m_ExtendedProtectionPolicy != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_ExtendedProtectionPolicy != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	wrapper != null	1	23	0	public void Mark ( string item , long count ) { if ( wrapper != null ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	wrapper != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Requests != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	wrapper.count != null	1	23	0	public void Mark ( string item , long count ) { if ( wrapper . count != null ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	wrapper . count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Results != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_ExtendedProtectionSelectorDelegate == null	1	50	0	private void Stop ( ) { if ( httpListener . m_ExtendedProtectionSelectorDelegate == null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_ExtendedProtectionSelectorDelegate == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	wrapper.m15Rate != null	1	23	0	public void Mark ( string item , long count ) { if ( wrapper . m15Rate != null ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	wrapper . m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . Unit . Threads != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	wrapper.m1Rate != null	1	23	0	public void Mark ( string item , long count ) { if ( wrapper . m1Rate != null ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	wrapper . m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_ExtraSavedDigests == null	1	50	0	private void Stop ( ) { if ( httpListener . m_ExtraSavedDigests == null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_ExtraSavedDigests == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	samplingType != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( samplingType != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	samplingType != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	wrapper.m5Rate != null	1	23	0	public void Mark ( string item , long count ) { if ( wrapper . m5Rate != null ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	wrapper . m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.SamplingType.FavourRecent != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . SamplingType . FavourRecent != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . SamplingType . FavourRecent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	item != null	1	23	0	public void Mark ( string item , long count ) { if ( item != null ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	item != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_ExtraSavedDigestsBaking == null	1	50	0	private void Stop ( ) { if ( httpListener . m_ExtraSavedDigestsBaking == null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_ExtraSavedDigestsBaking == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	item.ToString().Equals("A")	0.739130434782609	17	6	public void Mark ( string item , long count ) { if ( item . ToString ( ) . Equals ( "A" ) ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	item . ToString ( ) . Equals ( "A" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.SamplingType.FavourRecent.Equals(samplingType)	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . SamplingType . FavourRecent . Equals ( samplingType ) ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . SamplingType . FavourRecent . Equals ( samplingType )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	count == 1	0.739130434782609	17	6	public void Mark ( string item , long count ) { if ( count == 1 ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.SamplingType.LongTerm != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . SamplingType . LongTerm != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . SamplingType . LongTerm != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_ExtraSavedDigestsTimestamp == 0	1	50	0	private void Stop ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp == 0 ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_ExtraSavedDigestsTimestamp == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	count >= 1	0.739130434782609	17	6	public void Mark ( string item , long count ) { if ( count >= 1 ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	count >= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.SamplingType.SlidingWindow != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . SamplingType . SlidingWindow != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . SamplingType . SlidingWindow != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	_name != null	1	60	0	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( _name != null ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	_name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	count >= -1	0.304347826086957	7	16	public void Mark ( string item , long count ) { if ( count >= - 1 ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	count >= - 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Mark(System.String item, System.Int64 count)	count <= 1	1	23	0	public void Mark ( string item , long count ) { if ( count <= 1 ) ; this . Mark ( count ) ; this . setMeters . GetOrAdd ( item , v => new MeterWrapper ( ) ) . Mark ( count ) ; }	count <= 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	tags != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( tags != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_ExtraSavedDigestsTimestamp <= httpListener.m_DefaultServiceNames	0.02	1	49	private void Stop ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp <= httpListener . m_DefaultServiceNames ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_ExtraSavedDigestsTimestamp <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	clock != null	1	38	0	private void Tick ( ) { if ( clock != null ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	tags.tags == null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( tags . tags == null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	setMeters != null	1	38	0	private void Tick ( ) { if ( setMeters != null ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	setMeters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_ExtraSavedDigestsTimestamp <= httpListener	0.02	1	49	private void Stop ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp <= httpListener ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_ExtraSavedDigestsTimestamp <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	startTime == 0	0.578947368421053	22	16	private void Tick ( ) { if ( startTime == 0 ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	startTime == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	startTime >= 0	0.710526315789474	27	11	private void Tick ( ) { if ( startTime >= 0 ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	startTime >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.705882352941177	60	25	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . MetricTags . empty != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	startTime <= 0	0.578947368421053	22	16	private void Tick ( ) { if ( startTime <= 0 ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	startTime <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_IgnoreWriteExceptions == false	1	50	0	private void Stop ( ) { if ( httpListener . m_IgnoreWriteExceptions == false ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_IgnoreWriteExceptions == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	85	0	public Histogram Histogram ( string name , Unit unit , SamplingType samplingType , MetricTags tags ) { if ( Metrics . MetricTags . None != null ) ; return this . Histogram ( name , unit , ( ) => this . metricsBuilder . BuildHistogram ( name , unit , samplingType ) , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	startTime != null	0.447368421052632	17	21	private void Tick ( ) { if ( startTime != null ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	startTime != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	tickScheduler != null	1	38	0	private void Tick ( ) { if ( tickScheduler != null ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	tickScheduler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	childContexts != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( childContexts != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_InternalLock != null	1	50	0	private void Stop ( ) { if ( httpListener . m_InternalLock != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_InternalLock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	wrapper != null	1	38	0	private void Tick ( ) { if ( wrapper != null ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	wrapper != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	wrapper.count != null	1	38	0	private void Tick ( ) { if ( wrapper . count != null ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	wrapper . count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	isDisabled == false	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( isDisabled == false ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	wrapper.m15Rate != null	1	38	0	private void Tick ( ) { if ( wrapper . m15Rate != null ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	wrapper . m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_NewestContext == 0	1	50	0	private void Stop ( ) { if ( httpListener . m_NewestContext == 0 ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_NewestContext == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	wrapper.m1Rate != null	1	38	0	private void Tick ( ) { if ( wrapper . m1Rate != null ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	wrapper . m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	metricsBuilder != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( metricsBuilder != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Tick()	wrapper.m5Rate != null	1	38	0	private void Tick ( ) { if ( wrapper . m5Rate != null ) ; this . wrapper . Tick ( ) ; foreach ( var value in setMeters . Values ) { value . Tick ( ) ; } }	wrapper . m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Reset()	clock != null	1	33	0	public void Reset ( ) { if ( clock != null ) ; this . startTime = this . clock . Nanoseconds ; this . wrapper . Reset ( ) ; foreach ( var meter in this . setMeters . Values ) { meter . Reset ( ) ; } }	clock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	registry != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( registry != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_NewestContext <= httpListener.m_DefaultServiceNames	0.02	1	49	private void Stop ( ) { if ( httpListener . m_NewestContext <= httpListener . m_DefaultServiceNames ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_NewestContext <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Reset()	setMeters != null	1	33	0	public void Reset ( ) { if ( setMeters != null ) ; this . startTime = this . clock . Nanoseconds ; this . wrapper . Reset ( ) ; foreach ( var meter in this . setMeters . Values ) { meter . Reset ( ) ; } }	setMeters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( name != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Reset()	startTime == 0	1	33	0	public void Reset ( ) { if ( startTime == 0 ) ; this . startTime = this . clock . Nanoseconds ; this . wrapper . Reset ( ) ; foreach ( var meter in this . setMeters . Values ) { meter . Reset ( ) ; } }	startTime == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_NewestContext <= httpListener	0.02	1	49	private void Stop ( ) { if ( httpListener . m_NewestContext <= httpListener ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_NewestContext <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Reset()	tickScheduler != null	1	33	0	public void Reset ( ) { if ( tickScheduler != null ) ; this . startTime = this . clock . Nanoseconds ; this . wrapper . Reset ( ) ; foreach ( var meter in this . setMeters . Values ) { meter . Reset ( ) ; } }	tickScheduler != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name.ToString().Equals("Post & Put Request Size")	0.188235294117647	16	69	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( name . ToString ( ) . Equals ( "Post&PutRequestSize" ) ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	name . ToString ( ) . Equals ( "Post&PutRequestSize" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Reset()	wrapper != null	1	33	0	public void Reset ( ) { if ( wrapper != null ) ; this . startTime = this . clock . Nanoseconds ; this . wrapper . Reset ( ) ; foreach ( var meter in this . setMeters . Values ) { meter . Reset ( ) ; } }	wrapper != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	_name.ToString().Equals("Metrics.Metric")	0.466666666666667	28	32	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( _name . ToString ( ) . Equals ( "Metrics.Metric" ) ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	_name . ToString ( ) . Equals ( "Metrics.Metric" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name.ToString().Equals("HTTP JSON Size")	0.117647058823529	10	75	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( name . ToString ( ) . Equals ( "HTTPJSONSize" ) ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	name . ToString ( ) . Equals ( "HTTPJSONSize" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_OldestContext == 0	1	50	0	private void Stop ( ) { if ( httpListener . m_OldestContext == 0 ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_OldestContext == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Reset()	wrapper.count != null	1	33	0	public void Reset ( ) { if ( wrapper . count != null ) ; this . startTime = this . clock . Nanoseconds ; this . wrapper . Reset ( ) ; foreach ( var meter in this . setMeters . Values ) { meter . Reset ( ) ; } }	wrapper . count != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Reset()	wrapper.m15Rate != null	1	33	0	public void Reset ( ) { if ( wrapper . m15Rate != null ) ; this . startTime = this . clock . Nanoseconds ; this . wrapper . Reset ( ) ; foreach ( var meter in this . setMeters . Values ) { meter . Reset ( ) ; } }	wrapper . m15Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.0352941176470588	3	82	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Reset()	wrapper.m1Rate != null	1	33	0	public void Reset ( ) { if ( wrapper . m1Rate != null ) ; this . startTime = this . clock . Nanoseconds ; this . wrapper . Reset ( ) ; foreach ( var meter in this . setMeters . Values ) { meter . Reset ( ) ; } }	wrapper . m1Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_OldestContext <= httpListener.m_DefaultServiceNames	0.02	1	49	private void Stop ( ) { if ( httpListener . m_OldestContext <= httpListener . m_DefaultServiceNames ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_OldestContext <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( unit != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\MeterMetric.cs	Metrics.Core.MeterMetric.Reset()	wrapper.m5Rate != null	1	33	0	public void Reset ( ) { if ( wrapper . m5Rate != null ) ; this . startTime = this . clock . Nanoseconds ; this . wrapper . Reset ( ) ; foreach ( var meter in this . setMeters . Values ) { meter . Reset ( ) ; } }	wrapper . m5Rate != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( unit . Name != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_OldestContext <= httpListener	0.02	1	49	private void Stop ( ) { if ( httpListener . m_OldestContext <= httpListener ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_OldestContext <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name.ToString().Equals("bytes")	0.317647058823529	27	58	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( unit . Name . ToString ( ) . Equals ( "bytes" ) ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "bytes" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_Prefixes != null	1	50	0	private void Stop ( ) { if ( httpListener . m_Prefixes != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_Prefixes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Kb")	0.117647058823529	10	75	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( unit . Name . ToString ( ) . Equals ( "Kb" ) ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Kb" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.0352941176470588	3	82	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_Realm == null	1	50	0	private void Stop ( ) { if ( httpListener . m_Realm == null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_Realm == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Bytes != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_RequestHandleBound == true	0.42	21	29	private void Stop ( ) { if ( httpListener . m_RequestHandleBound == true ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_RequestHandleBound == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Bytes.Equals(unit)	0.317647058823529	27	58	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Bytes . Equals ( unit ) ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Bytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Calls != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_RequestHandleBound == false	0.36	18	32	private void Stop ( ) { if ( httpListener . m_RequestHandleBound == false ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_RequestHandleBound == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.0352941176470588	3	82	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_RequestQueueHandle != null	1	50	0	private void Stop ( ) { if ( httpListener . m_RequestQueueHandle != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_RequestQueueHandle != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.988235294117647	84	1	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Commands != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	_setForeground != null	1	60	0	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( _setForeground != null ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	_setForeground != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.0117647058823529	1	84	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Commands >= 0 ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Errors != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_SavedDigests == null	1	50	0	private void Stop ( ) { if ( httpListener . m_SavedDigests == null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_SavedDigests == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Events != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_SecurityException == null	1	50	0	private void Stop ( ) { if ( httpListener . m_SecurityException == null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_SecurityException == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Items != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . KiloBytes != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_ServerSessionHandle != null	1	50	0	private void Stop ( ) { if ( httpListener . m_ServerSessionHandle != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_ServerSessionHandle != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes.Equals(unit)	0.117647058823529	10	75	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . KiloBytes . Equals ( unit ) ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . KiloBytes . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_State != null	1	50	0	private void Stop ( ) { if ( httpListener . m_State != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_State != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . MegaBytes != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . None != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_TimeoutManager != null	1	50	0	private void Stop ( ) { if ( httpListener . m_TimeoutManager != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_TimeoutManager != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Percent != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Requests != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_UnsafeConnectionNtlmAuthentication == false	1	50	0	private void Stop ( ) { if ( httpListener . m_UnsafeConnectionNtlmAuthentication == false ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_UnsafeConnectionNtlmAuthentication == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Results != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . Unit . Threads != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_UriPrefixes != null	1	50	0	private void Stop ( ) { if ( httpListener . m_UriPrefixes != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_UriPrefixes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	builder != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( builder != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_UrlGroupId != null	0.74	37	13	private void Stop ( ) { if ( httpListener . m_UrlGroupId != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_UrlGroupId != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	builder >= 0	0.0117647058823529	1	84	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( builder >= 0 ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	builder >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	_write != null	1	60	0	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( _write != null ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	_write != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	tags != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( tags != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_UrlGroupId == 0	0.42	21	29	private void Stop ( ) { if ( httpListener . m_UrlGroupId == 0 ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_UrlGroupId == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	tags.tags == null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( tags . tags == null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_UrlGroupId >= 0	0.42	21	29	private void Stop ( ) { if ( httpListener . m_UrlGroupId >= 0 ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_UrlGroupId >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.705882352941177	60	25	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . MetricTags . empty != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_UrlGroupId <= 0	0.42	21	29	private void Stop ( ) { if ( httpListener . m_UrlGroupId <= 0 ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_UrlGroupId <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Histogram(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	85	0	public Histogram Histogram < T > ( string name , Unit unit , Func < T > builder , MetricTags tags ) where T : HistogramImplementation { if ( Metrics . MetricTags . None != null ) ; return this . registry . Histogram ( name , builder , unit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_UrlGroupId <= httpListener.m_DefaultServiceNames	0.02	1	49	private void Stop ( ) { if ( httpListener . m_UrlGroupId <= httpListener . m_DefaultServiceNames ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_UrlGroupId <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	childContexts != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( childContexts != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	isDisabled == false	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( isDisabled == false ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	httpListener.m_V2Initialized == true	1	50	0	private void Stop ( ) { if ( httpListener . m_V2Initialized == true ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	httpListener . m_V2Initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	metricsBuilder != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( metricsBuilder != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	metricsDataProvider != null	1	50	0	private void Stop ( ) { if ( metricsDataProvider != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	registry != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( registry != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( name != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	prefixPath != null	1	50	0	private void Stop ( ) { if ( prefixPath != null ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	prefixPath != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	logLevel != null	1	60	0	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( logLevel != null ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	logLevel != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("HTTP Request")	0.117647058823529	10	75	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "HTTPRequest" ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	name . ToString ( ) . Equals ( "HTTPRequest" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	prefixPath.ToString().Equals("metricstest/httplistenertests/httpendpointcanbedisposed/")	0.16	8	42	private void Stop ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/httpendpointcanbedisposed/" ) ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/httpendpointcanbedisposed/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("Requests")	0.129411764705882	11	74	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Requests" ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	name . ToString ( ) . Equals ( "Requests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	prefixPath.ToString().Equals("metricstest/httplistenertests/occupiedport/")	0.26	13	37	private void Stop ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/occupiedport/" ) ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/occupiedport/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("Test")	0.0352941176470588	3	82	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "Test" ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	name . ToString ( ) . Equals ( "Test" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	prefixPath.ToString().Equals("metricstest/httplistenertests/sameendpoint/")	0.06	3	47	private void Stop ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/sameendpoint/" ) ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/sameendpoint/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit . Name != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Stop()	prefixPath.ToString().Equals("metricstest/httplistenertests/disposemetwice/")	0.1	5	45	private void Stop ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemetwice/" ) ) ; cts . Cancel ( ) ; if ( processingTask != null && ! processingTask . IsCompleted ) { processingTask . Wait ( ) ; } if ( this . httpListener . IsListening ) { this . httpListener . Stop ( ) ; this . httpListener . Prefixes . Clear ( ) ; } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemetwice/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name.Equals(name)	0.129411764705882	11	74	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit . Name . Equals ( name ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	unit . Name . Equals ( name )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	cts != null	1	50	0	public void Dispose ( ) { if ( cts != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	cts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Requests")	0.835294117647059	71	14	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Requests" ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Requests" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	0.0352941176470588	3	82	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	healthStatus != null	1	50	0	public void Dispose ( ) { if ( healthStatus != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	healthStatus != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Bytes != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Calls != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener != null	1	50	0	public void Dispose ( ) { if ( httpListener != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	0.0352941176470588	3	82	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	0.988235294117647	84	1	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Commands != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener >= 0	0.02	1	49	public void Dispose ( ) { if ( httpListener >= 0 ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	messageFunc != null	0.466666666666667	28	32	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( messageFunc != null ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	messageFunc != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands >= 0	0.0117647058823529	1	84	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Commands >= 0 ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Commands >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Errors != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_AuthenticationDelegate == null	1	50	0	public void Dispose ( ) { if ( httpListener . m_AuthenticationDelegate == null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_AuthenticationDelegate == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Events != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_AuthenticationScheme != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_AuthenticationScheme != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_AuthenticationScheme != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Items != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . KiloBytes != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_DefaultServiceNames != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_DefaultServiceNames != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_DefaultServiceNames != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . MegaBytes != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . None != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_DefaultServiceNames >= 0	0.02	1	49	public void Dispose ( ) { if ( httpListener . m_DefaultServiceNames >= 0 ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_DefaultServiceNames >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Percent != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Requests != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_DisconnectResults == null	1	50	0	public void Dispose ( ) { if ( httpListener . m_DisconnectResults == null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_DisconnectResults == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests.Equals(unit)	0.835294117647059	71	14	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Requests . Equals ( unit ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Requests . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_ExtendedProtectionPolicy != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_ExtendedProtectionPolicy != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_ExtendedProtectionPolicy != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Results != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Threads != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_ExtendedProtectionSelectorDelegate == null	1	50	0	public void Dispose ( ) { if ( httpListener . m_ExtendedProtectionSelectorDelegate == null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_ExtendedProtectionSelectorDelegate == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	samplingType != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( samplingType != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	samplingType != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.SamplingType.FavourRecent != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . SamplingType . FavourRecent != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . SamplingType . FavourRecent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_ExtraSavedDigests == null	1	50	0	public void Dispose ( ) { if ( httpListener . m_ExtraSavedDigests == null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_ExtraSavedDigests == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	exception == null	0.466666666666667	28	32	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( exception == null ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	exception == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.SamplingType.FavourRecent.Equals(samplingType)	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . SamplingType . FavourRecent . Equals ( samplingType ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . SamplingType . FavourRecent . Equals ( samplingType )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_ExtraSavedDigestsBaking == null	1	50	0	public void Dispose ( ) { if ( httpListener . m_ExtraSavedDigestsBaking == null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_ExtraSavedDigestsBaking == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.SamplingType.LongTerm != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . SamplingType . LongTerm != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . SamplingType . LongTerm != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.SamplingType.SlidingWindow != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . SamplingType . SlidingWindow != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . SamplingType . SlidingWindow != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_ExtraSavedDigestsTimestamp == 0	1	50	0	public void Dispose ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp == 0 ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_ExtraSavedDigestsTimestamp == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	rateUnit != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( rateUnit != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Days != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Days != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_ExtraSavedDigestsTimestamp <= httpListener.m_DefaultServiceNames	0.02	1	49	public void Dispose ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp <= httpListener . m_DefaultServiceNames ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_ExtraSavedDigestsTimestamp <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Hours != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Hours != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Microseconds != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_ExtraSavedDigestsTimestamp <= httpListener	0.02	1	49	public void Dispose ( ) { if ( httpListener . m_ExtraSavedDigestsTimestamp <= httpListener ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_ExtraSavedDigestsTimestamp <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Milliseconds != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Minutes != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Minutes != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_IgnoreWriteExceptions == false	1	50	0	public void Dispose ( ) { if ( httpListener . m_IgnoreWriteExceptions == false ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_IgnoreWriteExceptions == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Nanoseconds != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_InternalLock != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_InternalLock != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_InternalLock != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Seconds != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_NewestContext == 0	1	50	0	public void Dispose ( ) { if ( httpListener . m_NewestContext == 0 ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_NewestContext == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( durationUnit != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	durationUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_NewestContext <= httpListener.m_DefaultServiceNames	0.02	1	49	public void Dispose ( ) { if ( httpListener . m_NewestContext <= httpListener . m_DefaultServiceNames ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_NewestContext <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit.Equals(Metrics.TimeUnit.Milliseconds)	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( durationUnit . Equals ( Metrics . TimeUnit . Milliseconds ) ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	durationUnit . Equals ( Metrics . TimeUnit . Milliseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	formatParameters.Count == 1	0.466666666666667	28	32	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( formatParameters . Count == 1 ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	formatParameters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( tags != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_NewestContext <= httpListener	0.02	1	49	public void Dispose ( ) { if ( httpListener . m_NewestContext <= httpListener ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_NewestContext <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags.tags == null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( tags . tags == null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_OldestContext == 0	1	50	0	public void Dispose ( ) { if ( httpListener . m_OldestContext == 0 ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_OldestContext == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty != null	0.741176470588235	63	22	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . MetricTags . empty != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . MetricTags . empty != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_OldestContext <= httpListener.m_DefaultServiceNames	0.02	1	49	public void Dispose ( ) { if ( httpListener . m_OldestContext <= httpListener . m_DefaultServiceNames ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_OldestContext <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, Metrics.SamplingType samplingType, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	85	0	public Timer Timer ( string name , Unit unit , SamplingType samplingType , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . MetricTags . None != null ) ; return this . registry . Timer ( name , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , samplingType ) , unit , rateUnit , durationUnit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_OldestContext <= httpListener	0.02	1	49	public void Dispose ( ) { if ( httpListener . m_OldestContext <= httpListener ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_OldestContext <= httpListener
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	childContexts != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( childContexts != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_Prefixes != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_Prefixes != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_Prefixes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	isDisabled == false	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( isDisabled == false ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_Realm == null	1	50	0	public void Dispose ( ) { if ( httpListener . m_Realm == null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_Realm == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	metricsBuilder != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( metricsBuilder != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	registry != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( registry != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_RequestHandleBound == false	0.44	22	28	public void Dispose ( ) { if ( httpListener . m_RequestHandleBound == false ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_RequestHandleBound == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( name != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_RequestHandleBound == true	0.36	18	32	public void Dispose ( ) { if ( httpListener . m_RequestHandleBound == true ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_RequestHandleBound == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("custom")	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( name . ToString ( ) . Equals ( "custom" ) ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	name . ToString ( ) . Equals ( "custom" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	formatParameters != null	0.533333333333333	32	28	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( formatParameters != null ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	formatParameters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_RequestQueueHandle != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_RequestQueueHandle != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_RequestQueueHandle != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( unit != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( unit . Name != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_SavedDigests == null	1	50	0	public void Dispose ( ) { if ( httpListener . m_SavedDigests == null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_SavedDigests == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_SecurityException == null	1	50	0	public void Dispose ( ) { if ( httpListener . m_SecurityException == null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_SecurityException == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Bytes != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Calls != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_ServerSessionHandle != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_ServerSessionHandle != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_ServerSessionHandle != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Commands != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_State != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_State != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_State != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Errors != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Events != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_TimeoutManager != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_TimeoutManager != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_TimeoutManager != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Items != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_UnsafeConnectionNtlmAuthentication == false	1	50	0	public void Dispose ( ) { if ( httpListener . m_UnsafeConnectionNtlmAuthentication == false ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_UnsafeConnectionNtlmAuthentication == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . KiloBytes != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . MegaBytes != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . None != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_UriPrefixes != null	1	50	0	public void Dispose ( ) { if ( httpListener . m_UriPrefixes != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_UriPrefixes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Percent != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	formatParameters.All(x => x >= 1)	0.35	21	39	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( formatParameters . All ( x => x >= 1 ) ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	formatParameters . All ( x => x >= 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Requests != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_UrlGroupId != null	0.74	37	13	public void Dispose ( ) { if ( httpListener . m_UrlGroupId != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_UrlGroupId != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Results != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . Unit . Threads != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_UrlGroupId == 0	0.42	21	29	public void Dispose ( ) { if ( httpListener . m_UrlGroupId == 0 ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_UrlGroupId == 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	builder != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( builder != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_UrlGroupId >= 0	0.42	21	29	public void Dispose ( ) { if ( httpListener . m_UrlGroupId >= 0 ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_UrlGroupId >= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	rateUnit != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( rateUnit != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Days != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Days != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_UrlGroupId <= 0	0.42	21	29	public void Dispose ( ) { if ( httpListener . m_UrlGroupId <= 0 ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_UrlGroupId <= 0
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Hours != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Hours != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Microseconds != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Microseconds != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_UrlGroupId <= httpListener.m_DefaultServiceNames	0.02	1	49	public void Dispose ( ) { if ( httpListener . m_UrlGroupId <= httpListener . m_DefaultServiceNames ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_UrlGroupId <= httpListener . m_DefaultServiceNames
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Milliseconds != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Milliseconds != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	httpListener.m_V2Initialized == true	1	50	0	public void Dispose ( ) { if ( httpListener . m_V2Initialized == true ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	httpListener . m_V2Initialized == true
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Minutes != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Minutes != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Nanoseconds != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	metricsDataProvider != null	1	50	0	public void Dispose ( ) { if ( metricsDataProvider != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	metricsDataProvider != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Seconds != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	prefixPath != null	1	50	0	public void Dispose ( ) { if ( prefixPath != null ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	prefixPath != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Log(Metrics.Logging.LogLevel logLevel, System.Func`1<System.String> messageFunc, System.Exception exception, System.Object[] formatParameters)	formatParameters.All(x => x != null)	0.4	24	36	public bool Log ( LogLevel logLevel , Func < string > messageFunc , Exception exception , params object [ ] formatParameters ) { if ( formatParameters . All ( x => x != null ) ) ; if ( messageFunc == null ) { return true ; } messageFunc = LogMessageFormatter . SimulateStructuredLogging ( messageFunc , formatParameters ) ; Write ( logLevel , messageFunc ( ) , exception ) ; return true ; }	formatParameters . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( durationUnit != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	durationUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	prefixPath.ToString().Equals("metricstest/httplistenertests/httpendpointcanbedisposed/")	0.16	8	42	public void Dispose ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/httpendpointcanbedisposed/" ) ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/httpendpointcanbedisposed/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit.Equals(Metrics.TimeUnit.Milliseconds)	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( durationUnit . Equals ( Metrics . TimeUnit . Milliseconds ) ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	durationUnit . Equals ( Metrics . TimeUnit . Milliseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	prefixPath.ToString().Equals("metricstest/httplistenertests/occupiedport/")	0.26	13	37	public void Dispose ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/occupiedport/" ) ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/occupiedport/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( tags != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	prefixPath.ToString().Equals("metricstest/httplistenertests/sameendpoint/")	0.06	3	47	public void Dispose ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/sameendpoint/" ) ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/sameendpoint/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags.tags == null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( tags . tags == null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Visualization\MetricsHttpListener.cs	Metrics.Visualization.MetricsHttpListener.Dispose()	prefixPath.ToString().Equals("metricstest/httplistenertests/disposemetwice/")	0.1	5	45	public void Dispose ( ) { if ( prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemetwice/" ) ) ; this . Stop ( ) ; this . httpListener . Close ( ) ; using ( this . cts ) { } using ( this . httpListener ) { } }	prefixPath . ToString ( ) . Equals ( "metricstest/httplistenertests/disposemetwice/" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<T> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	11	0	public Timer Timer < T > ( string name , Unit unit , Func < T > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) where T : TimerImplementation { if ( Metrics . MetricTags . None != null ) ; return this . registry . Timer ( name , builder , unit , rateUnit , durationUnit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	childContexts != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( childContexts != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	isDisabled == false	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( isDisabled == false ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	metricsBuilder != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( metricsBuilder != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	registry != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( registry != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( name != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("custom")	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "custom" ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	name . ToString ( ) . Equals ( "custom" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit . Name != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Metrics.Logging.LogLevel logLevel, System.String message, System.Exception e)	_getForeground != null	1	60	0	protected void Write ( LogLevel logLevel , string message , Exception e = null ) { if ( _getForeground != null ) ; var formattedMessage = MessageFormatter ( this . _name , logLevel , message , e ) ; int color ; if ( Colors . TryGetValue ( logLevel , out color ) ) { var originalColor = _getForeground ( ) ; try { _setForeground ( color ) ; _write ( formattedMessage ) ; } finally { _setForeground ( originalColor ) ; } } else { _write ( formattedMessage ) ; } }	_getForeground != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Bytes != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Calls != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Commands != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Errors != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Events != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Items != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . KiloBytes != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . MegaBytes != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . None != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Percent != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Requests != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Results != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Threads != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	builder != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( builder != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	rateUnit != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( rateUnit != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Metrics.Logging.LogLevel logLevel, System.String message, System.Exception e)	_name != null	1	60	0	protected void Write ( LogLevel logLevel , string message , Exception e = null ) { if ( _name != null ) ; var formattedMessage = MessageFormatter ( this . _name , logLevel , message , e ) ; int color ; if ( Colors . TryGetValue ( logLevel , out color ) ) { var originalColor = _getForeground ( ) ; try { _setForeground ( color ) ; _write ( formattedMessage ) ; } finally { _setForeground ( originalColor ) ; } } else { _write ( formattedMessage ) ; } }	_name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Days != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Days != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Hours != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Hours != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Microseconds != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Milliseconds != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Minutes != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Minutes != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Nanoseconds != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Seconds != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( durationUnit != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	durationUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit.Equals(Metrics.TimeUnit.Milliseconds)	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( durationUnit . Equals ( Metrics . TimeUnit . Milliseconds ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	durationUnit . Equals ( Metrics . TimeUnit . Milliseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( tags != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags.tags == null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( tags . tags == null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Core.HistogramImplementation> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	6	0	public Timer Timer ( string name , Unit unit , Func < HistogramImplementation > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . MetricTags . None != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	childContexts != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( childContexts != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	isDisabled == false	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( isDisabled == false ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Metrics.Logging.LogLevel logLevel, System.String message, System.Exception e)	_name.ToString().Equals("Metrics.Metric")	0.466666666666667	28	32	protected void Write ( LogLevel logLevel , string message , Exception e = null ) { if ( _name . ToString ( ) . Equals ( "Metrics.Metric" ) ) ; var formattedMessage = MessageFormatter ( this . _name , logLevel , message , e ) ; int color ; if ( Colors . TryGetValue ( logLevel , out color ) ) { var originalColor = _getForeground ( ) ; try { _setForeground ( color ) ; _write ( formattedMessage ) ; } finally { _setForeground ( originalColor ) ; } } else { _write ( formattedMessage ) ; } }	_name . ToString ( ) . Equals ( "Metrics.Metric" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	metricsBuilder != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( metricsBuilder != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	registry != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( registry != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( name != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	name.ToString().Equals("custom")	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( name . ToString ( ) . Equals ( "custom" ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	name . ToString ( ) . Equals ( "custom" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	unit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit . Name != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	unit . Name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	unit.Name.ToString().Equals("Calls")	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( unit . Name . ToString ( ) . Equals ( "Calls" ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	unit . Name . ToString ( ) . Equals ( "Calls" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Bytes != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Bytes != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Bytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Calls != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Calls != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Calls.Equals(unit)	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Calls . Equals ( unit ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Calls . Equals ( unit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Commands != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Commands != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Commands != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Errors != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Errors != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Errors != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Events != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Events != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Events != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Items != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Items != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Items != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.KiloBytes != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . KiloBytes != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . KiloBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.MegaBytes != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . MegaBytes != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . MegaBytes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Metrics.Logging.LogLevel logLevel, System.String message, System.Exception e)	_setForeground != null	1	60	0	protected void Write ( LogLevel logLevel , string message , Exception e = null ) { if ( _setForeground != null ) ; var formattedMessage = MessageFormatter ( this . _name , logLevel , message , e ) ; int color ; if ( Colors . TryGetValue ( logLevel , out color ) ) { var originalColor = _getForeground ( ) ; try { _setForeground ( color ) ; _write ( formattedMessage ) ; } finally { _setForeground ( originalColor ) ; } } else { _write ( formattedMessage ) ; } }	_setForeground != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.None != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . None != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Percent != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Percent != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Percent != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Requests != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Requests != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Requests != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Results != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Results != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Results != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.Unit.Threads != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . Unit . Threads != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . Unit . Threads != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	builder != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( builder != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	builder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	rateUnit != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( rateUnit != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	rateUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Days != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Days != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Days != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Hours != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Hours != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Hours != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Microseconds != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Microseconds != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Microseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Milliseconds != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Milliseconds != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Milliseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Minutes != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Minutes != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Minutes != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Nanoseconds != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Nanoseconds != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Nanoseconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Seconds != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Seconds != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.TimeUnit.Seconds.Equals(rateUnit)	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . TimeUnit . Seconds . Equals ( rateUnit ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . TimeUnit . Seconds . Equals ( rateUnit )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( durationUnit != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	durationUnit != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Metrics.Logging.LogLevel logLevel, System.String message, System.Exception e)	_write != null	1	60	0	protected void Write ( LogLevel logLevel , string message , Exception e = null ) { if ( _write != null ) ; var formattedMessage = MessageFormatter ( this . _name , logLevel , message , e ) ; int color ; if ( Colors . TryGetValue ( logLevel , out color ) ) { var originalColor = _getForeground ( ) ; try { _setForeground ( color ) ; _write ( formattedMessage ) ; } finally { _setForeground ( originalColor ) ; } } else { _write ( formattedMessage ) ; } }	_write != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	durationUnit.Equals(Metrics.TimeUnit.Milliseconds)	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( durationUnit . Equals ( Metrics . TimeUnit . Milliseconds ) ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	durationUnit . Equals ( Metrics . TimeUnit . Milliseconds )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( tags != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	tags != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	tags.tags == null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( tags . tags == null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	tags . tags == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.empty.Count == 1	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . MetricTags . empty . Count == 1 ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . MetricTags . empty . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Timer(System.String name, Metrics.Unit unit, System.Func`1<Metrics.Sampling.Reservoir> builder, Metrics.TimeUnit rateUnit, Metrics.TimeUnit durationUnit, Metrics.MetricTags tags)	Metrics.MetricTags.None != null	1	5	0	public Timer Timer ( string name , Unit unit , Func < Reservoir > builder , TimeUnit rateUnit , TimeUnit durationUnit , MetricTags tags ) { if ( Metrics . MetricTags . None != null ) ; return this . Timer ( name , unit , ( ) => this . metricsBuilder . BuildTimer ( name , unit , rateUnit , durationUnit , builder ( ) ) , rateUnit , durationUnit , tags ) ; }	Metrics . MetricTags . None != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Dispose()	childContexts != null	1	10	0	public void Dispose ( ) { if ( childContexts != null ) ; Dispose ( true ) ; GC . SuppressFinalize ( this ) ; }	childContexts != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Dispose()	isDisabled == false	1	10	0	public void Dispose ( ) { if ( isDisabled == false ) ; Dispose ( true ) ; GC . SuppressFinalize ( this ) ; }	isDisabled == false
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Dispose()	metricsBuilder != null	1	10	0	public void Dispose ( ) { if ( metricsBuilder != null ) ; Dispose ( true ) ; GC . SuppressFinalize ( this ) ; }	metricsBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\Core\BaseMetricsContext.cs	Metrics.Core.BaseMetricsContext.Dispose()	registry != null	1	10	0	public void Dispose ( ) { if ( registry != null ) ; Dispose ( true ) ; GC . SuppressFinalize ( this ) ; }	registry != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Metrics.Logging.LogLevel logLevel, System.String message, System.Exception e)	logLevel != null	1	60	0	protected void Write ( LogLevel logLevel , string message , Exception e = null ) { if ( logLevel != null ) ; var formattedMessage = MessageFormatter ( this . _name , logLevel , message , e ) ; int color ; if ( Colors . TryGetValue ( logLevel , out color ) ) { var originalColor = _getForeground ( ) ; try { _setForeground ( color ) ; _write ( formattedMessage ) ; } finally { _setForeground ( originalColor ) ; } } else { _write ( formattedMessage ) ; } }	logLevel != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Metrics.Logging.LogLevel logLevel, System.String message, System.Exception e)	message != null	1	60	0	protected void Write ( LogLevel logLevel , string message , Exception e = null ) { if ( message != null ) ; var formattedMessage = MessageFormatter ( this . _name , logLevel , message , e ) ; int color ; if ( Colors . TryGetValue ( logLevel , out color ) ) { var originalColor = _getForeground ( ) ; try { _setForeground ( color ) ; _write ( formattedMessage ) ; } finally { _setForeground ( originalColor ) ; } } else { _write ( formattedMessage ) ; } }	message != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Metrics.Logging.LogLevel logLevel, System.String message, System.Exception e)	message.ToString().Equals("Metrics: GlobalContext Name set to CeleriacLauncher")	0.466666666666667	28	32	protected void Write ( LogLevel logLevel , string message , Exception e = null ) { if ( message . ToString ( ) . Equals ( "Metrics:GlobalContextNamesettoCeleriacLauncher" ) ) ; var formattedMessage = MessageFormatter ( this . _name , logLevel , message , e ) ; int color ; if ( Colors . TryGetValue ( logLevel , out color ) ) { var originalColor = _getForeground ( ) ; try { _setForeground ( color ) ; _write ( formattedMessage ) ; } finally { _setForeground ( originalColor ) ; } } else { _write ( formattedMessage ) ; } }	message . ToString ( ) . Equals ( "Metrics:GlobalContextNamesettoCeleriacLauncher" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.ColouredConsoleLogProvider.ColouredConsoleLogger.Write(Metrics.Logging.LogLevel logLevel, System.String message, System.Exception e)	e == null	0.466666666666667	28	32	protected void Write ( LogLevel logLevel , string message , Exception e = null ) { if ( e == null ) ; var formattedMessage = MessageFormatter ( this . _name , logLevel , message , e ) ; int color ; if ( Colors . TryGetValue ( logLevel , out color ) ) { var originalColor = _getForeground ( ) ; try { _setForeground ( color ) ; _write ( formattedMessage ) ; } finally { _setForeground ( originalColor ) ; } } else { _write ( formattedMessage ) ; } }	e == null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func`1<System.String> messageBuilder, System.Object[] formatParameters)	messageBuilder != null	1	60	0	public static Func < string > SimulateStructuredLogging ( Func < string > messageBuilder , object [ ] formatParameters ) { if ( messageBuilder != null ) ; if ( formatParameters == null ) { return messageBuilder ; } return ( ) => { string targetMessage = messageBuilder ( ) ; int argumentIndex = 0 ; foreach ( Match match in Pattern . Matches ( targetMessage ) ) { int notUsed ; if ( ! int . TryParse ( match . Value . Substring ( 1 , match . Value . Length - 2 ) , out notUsed ) ) { targetMessage = ReplaceFirst ( targetMessage , match . Value , "{" + argumentIndex ++ + "}" ) ; } } try { return String . Format ( CultureInfo . InvariantCulture , targetMessage , formatParameters ) ; } catch ( FormatException ex ) { throw new FormatException ( "Theinputstring'" + targetMessage + "'couldnotbeformattedusingstring.Format" , ex ) ; } } ; }	messageBuilder != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func`1<System.String> messageBuilder, System.Object[] formatParameters)	formatParameters.Count == 1	0.466666666666667	28	32	public static Func < string > SimulateStructuredLogging ( Func < string > messageBuilder , object [ ] formatParameters ) { if ( formatParameters . Count == 1 ) ; if ( formatParameters == null ) { return messageBuilder ; } return ( ) => { string targetMessage = messageBuilder ( ) ; int argumentIndex = 0 ; foreach ( Match match in Pattern . Matches ( targetMessage ) ) { int notUsed ; if ( ! int . TryParse ( match . Value . Substring ( 1 , match . Value . Length - 2 ) , out notUsed ) ) { targetMessage = ReplaceFirst ( targetMessage , match . Value , "{" + argumentIndex ++ + "}" ) ; } } try { return String . Format ( CultureInfo . InvariantCulture , targetMessage , formatParameters ) ; } catch ( FormatException ex ) { throw new FormatException ( "Theinputstring'" + targetMessage + "'couldnotbeformattedusingstring.Format" , ex ) ; } } ; }	formatParameters . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func`1<System.String> messageBuilder, System.Object[] formatParameters)	formatParameters != null	0.533333333333333	32	28	public static Func < string > SimulateStructuredLogging ( Func < string > messageBuilder , object [ ] formatParameters ) { if ( formatParameters != null ) ; if ( formatParameters == null ) { return messageBuilder ; } return ( ) => { string targetMessage = messageBuilder ( ) ; int argumentIndex = 0 ; foreach ( Match match in Pattern . Matches ( targetMessage ) ) { int notUsed ; if ( ! int . TryParse ( match . Value . Substring ( 1 , match . Value . Length - 2 ) , out notUsed ) ) { targetMessage = ReplaceFirst ( targetMessage , match . Value , "{" + argumentIndex ++ + "}" ) ; } } try { return String . Format ( CultureInfo . InvariantCulture , targetMessage , formatParameters ) ; } catch ( FormatException ex ) { throw new FormatException ( "Theinputstring'" + targetMessage + "'couldnotbeformattedusingstring.Format" , ex ) ; } } ; }	formatParameters != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func`1<System.String> messageBuilder, System.Object[] formatParameters)	formatParameters.All(x => x >= 1)	0.35	21	39	public static Func < string > SimulateStructuredLogging ( Func < string > messageBuilder , object [ ] formatParameters ) { if ( formatParameters . All ( x => x >= 1 ) ) ; if ( formatParameters == null ) { return messageBuilder ; } return ( ) => { string targetMessage = messageBuilder ( ) ; int argumentIndex = 0 ; foreach ( Match match in Pattern . Matches ( targetMessage ) ) { int notUsed ; if ( ! int . TryParse ( match . Value . Substring ( 1 , match . Value . Length - 2 ) , out notUsed ) ) { targetMessage = ReplaceFirst ( targetMessage , match . Value , "{" + argumentIndex ++ + "}" ) ; } } try { return String . Format ( CultureInfo . InvariantCulture , targetMessage , formatParameters ) ; } catch ( FormatException ex ) { throw new FormatException ( "Theinputstring'" + targetMessage + "'couldnotbeformattedusingstring.Format" , ex ) ; } } ; }	formatParameters . All ( x => x >= 1 )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func`1<System.String> messageBuilder, System.Object[] formatParameters)	formatParameters.All(x => x != null)	0.4	24	36	public static Func < string > SimulateStructuredLogging ( Func < string > messageBuilder , object [ ] formatParameters ) { if ( formatParameters . All ( x => x != null ) ) ; if ( formatParameters == null ) { return messageBuilder ; } return ( ) => { string targetMessage = messageBuilder ( ) ; int argumentIndex = 0 ; foreach ( Match match in Pattern . Matches ( targetMessage ) ) { int notUsed ; if ( ! int . TryParse ( match . Value . Substring ( 1 , match . Value . Length - 2 ) , out notUsed ) ) { targetMessage = ReplaceFirst ( targetMessage , match . Value , "{" + argumentIndex ++ + "}" ) ; } } try { return String . Format ( CultureInfo . InvariantCulture , targetMessage , formatParameters ) ; } catch ( FormatException ex ) { throw new FormatException ( "Theinputstring'" + targetMessage + "'couldnotbeformattedusingstring.Format" , ex ) ; } } ; }	formatParameters . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.TypeExtensions.GetMethodPortable(System.Type type, System.String name, System.Type[] types)	type != null	1	85	0	internal static MethodInfo GetMethodPortable ( this Type type , string name , params Type [ ] types ) { if ( type != null ) ; return type . GetMethod ( name , types ) ; }	type != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.TypeExtensions.GetMethodPortable(System.Type type, System.String name, System.Type[] types)	name != null	1	85	0	internal static MethodInfo GetMethodPortable ( this Type type , string name , params Type [ ] types ) { if ( name != null ) ; return type . GetMethod ( name , types ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.TypeExtensions.GetMethodPortable(System.Type type, System.String name, System.Type[] types)	name.ToString().Equals("WriteLine")	1	85	0	internal static MethodInfo GetMethodPortable ( this Type type , string name , params Type [ ] types ) { if ( name . ToString ( ) . Equals ( "WriteLine" ) ) ; return type . GetMethod ( name , types ) ; }	name . ToString ( ) . Equals ( "WriteLine" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.TypeExtensions.GetMethodPortable(System.Type type, System.String name, System.Type[] types)	types.Count == 1	1	85	0	internal static MethodInfo GetMethodPortable ( this Type type , string name , params Type [ ] types ) { if ( types . Count == 1 ) ; return type . GetMethod ( name , types ) ; }	types . Count == 1
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.TypeExtensions.GetMethodPortable(System.Type type, System.String name, System.Type[] types)	types.All(x => x != null)	1	85	0	internal static MethodInfo GetMethodPortable ( this Type type , string name , params Type [ ] types ) { if ( types . All ( x => x != null ) ) ; return type . GetMethod ( name , types ) ; }	types . All ( x => x != null )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.TypeExtensions.GetPropertyPortable(System.Type type, System.String name)	type != null	1	85	0	internal static PropertyInfo GetPropertyPortable ( this Type type , string name ) { if ( type != null ) ; return type . GetProperty ( name ) ; }	type != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.TypeExtensions.GetPropertyPortable(System.Type type, System.String name)	name != null	1	85	0	internal static PropertyInfo GetPropertyPortable ( this Type type , string name ) { if ( name != null ) ; return type . GetProperty ( name ) ; }	name != null
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.TypeExtensions.GetPropertyPortable(System.Type type, System.String name)	name.ToString().Equals("ForegroundColor")	1	85	0	internal static PropertyInfo GetPropertyPortable ( this Type type , string name ) { if ( name . ToString ( ) . Equals ( "ForegroundColor" ) ) ; return type . GetProperty ( name ) ; }	name . ToString ( ) . Equals ( "ForegroundColor" )
D:\Data\Code\Invariants\Repos\metrics.net\Src\Metrics\App_Packages\LibLog.3.1\LibLog.cs	Metrics.Logging.LogProviders.TypeExtensions.GetAssemblyPortable(System.Type type)	type != null	1	85	0	internal static Assembly GetAssemblyPortable ( this Type type ) { if ( type != null ) ; return type . Assembly ; }	type != null
